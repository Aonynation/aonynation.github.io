<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>交互入门题瞎做</title>
    <link href="/2022/11/06/16574484/"/>
    <url>/2022/11/06/16574484/</url>
    
    <content type="html"><![CDATA[<h2 id="luogu-p7045-mcoi-03金牌">luogu P7045 「MCOI-03」金牌</h2><p><ahref="https://www.luogu.com.cn/problem/P7045"><strong>题目链接</strong></a></p><p>看到题解中介绍了一种用于找出序列中出现次数大于 <spanclass="math inline">\(\left\lfloor\dfrac{n}{2}\right\rfloor\)</span>的摩尔投票法。<br />先来贺一波题解给出摩尔投票法的具体操作：<br />* 我们首先初始化变量 <span class="math inline">\(\text{ans=}a_1\)</span>, <span class="math inline">\(\text{cnt=}1\)</span> 。<br />* 从此序列的第二个数开始扫描，直到第 <spanclass="math inline">\(n\)</span> 个数 <spanclass="math inline">\(a_n\)</span> ，我们假设现在扫描到了 <spanclass="math inline">\(a_i\)</span> 。<br />* 如果此时 <span class="math inline">\(\text{ans=}a_i\)</span> 那么<span class="math inline">\(\text{cnt}\leftarrow \text{cnt}+ 1\)</span>否则 <span class="math inline">\(\text{cnt}\leftarrow \text{cnt}-1\)</span> 。<br />* 如果此时 <span class="math inline">\(\text{cnt=}0\)</span>，那么我们更新 <span class="math inline">\(\text{ans=}a_i\)</span>。<br />* 当我们全部扫完之后，<span class="math inline">\(\text{ans}\)</span>就是出现次数大于 <spanclass="math inline">\(\left\lfloor\dfrac{n}{2}\right\rfloor\)</span>的数 。</p><p>我们现在着手来考虑这个东西和题目有什么联系。<br />经过简单的思考，我们可以发现当存在一个数出现次数大于 <spanclass="math inline">\(\left\lfloor\dfrac{n}{2}\right\rfloor\)</span>时，那么它就是无解的。<br />这个非常好理解，因为从鸽巢原理可以知道，此时一定会有两个相同的数它们是相邻的。<br /></p><p>如果我们要求出每两个奖牌的磁性的关系是不可能的，所以我们可以参照摩尔投票法。</p><ul><li>我们维护一个队列 <span class="math inline">\(\text{que}\)</span>，满足：队列中所有的元素的磁性都是一样的（对标 <spanclass="math inline">\(\text{ans}\)</span>）。<br /></li><li>同时最开始的时候把 <span class="math inline">\(0\)</span>号奖牌放在答案序列（对标初始化）。<br /></li><li>然后大致的含义和上述相同：相同磁场压入队列，不同磁场压入答案数组。<br /></li><li>一直这样模拟最后不难发现会得到一个答案序列和一个队列 <spanclass="math inline">\(\text{que}\)</span> 。<br /></li></ul><p>现在就是要解决那些多出来的出现次数最多的奖牌。<br />一种可以很好的放置多余的奖牌的方案就是在答案序列中插缝摆放，具体可以看代码。</p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> quad putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> T, n, q, flag, ans[N], tot;<br>std::queue &lt;<span class="hljs-type">int</span>&gt; que;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> id1, <span class="hljs-type">int</span> id2)</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, id1, id2);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ret);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  std::cin &gt;&gt; T;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> test = <span class="hljs-number">1</span>; test &lt;= T; test ++) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;q);<br>    flag = <span class="hljs-number">-1</span>; tot = <span class="hljs-number">0</span>; ans[++tot] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>()) que.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>      <span class="hljs-keyword">if</span> (que.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> tmp = <span class="hljs-built_in">ask</span>(i, ans[tot]);<br>        <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">1</span>) ans[++tot] = i;<br>        <span class="hljs-keyword">else</span> que.<span class="hljs-built_in">emplace</span>(i);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> tmp = <span class="hljs-built_in">ask</span>(i, que.<span class="hljs-built_in">front</span>());<br>        <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">1</span>) &#123;<br>          ans[++tot] = i, ans[++tot] = que.<span class="hljs-built_in">front</span>();<br>          que.<span class="hljs-built_in">pop</span>();<br>        &#125; <span class="hljs-keyword">else</span> que.<span class="hljs-built_in">emplace</span>(i);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span> * tot; i &gt;= <span class="hljs-number">1</span>; i -= <span class="hljs-number">2</span>)<br>      ans[i] = ans[i / <span class="hljs-number">2</span>], ans[i - <span class="hljs-number">1</span>] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (que.<span class="hljs-built_in">size</span>()) &#123;<br>      <span class="hljs-type">bool</span> last = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">2</span> * tot; i += <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-type">int</span> tmp = <span class="hljs-built_in">ask</span>(que.<span class="hljs-built_in">front</span>(), ans[i]);<br>        <span class="hljs-keyword">if</span> (tmp &amp;&amp; last) ans[i - <span class="hljs-number">1</span>] = que.<span class="hljs-built_in">front</span>(), que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (!que.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">break</span>;<br>        last = tmp;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!que.<span class="hljs-built_in">empty</span>()) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>      <span class="hljs-built_in">fflush</span>(stdout);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * tot; i++)<br>        <span class="hljs-keyword">if</span> (ans[i] != <span class="hljs-number">-1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ans[i]);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>      <span class="hljs-built_in">fflush</span>(stdout);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><hr /><h2 id="cf1033e-hidden-bipartite-graph">CF1033E Hidden BipartiteGraph</h2><p><a href="https://www.luogu.com.cn/problem/CF1033E"title="题目链接"><strong>题目链接</strong></a></p><p>这题看上去一脸不可做，对，我看什么题都不可做。。。<br />然后瞄一眼题解，发现一个小 <span class="math inline">\(\ttTrick\)</span> ：<br /><strong>判定二分图可以先拉出一个生成树，対生成树进行染色然后看相同颜色内有没有连边。</strong></p><p>所以现在的第一步是拉出一个生成树。<br />首先，我们先把题目中要求的交互函数写出来，我用一个 <spanclass="math inline">\(\tt vector\)</span> 记录查询的点集。<br />同时在我自己测试时发现可能会询问重复的点集，所以用一个 <spanclass="math inline">\(\tt map\)</span> 来记录已经查过的答案。<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; chose)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (chose.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  std::<span class="hljs-built_in">sort</span>(chose.<span class="hljs-built_in">begin</span>(), chose.<span class="hljs-built_in">end</span>());<br>  <span class="hljs-keyword">if</span> (ma[chose]) <span class="hljs-keyword">return</span> ma[chose];<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;? &quot;</span>);<br>  <span class="hljs-built_in">write</span>(chose.<span class="hljs-built_in">size</span>()), Enter;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : chose) <span class="hljs-built_in">write</span>(t), quad; Enter;<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-type">int</span> ret; <span class="hljs-built_in">read</span>(ret); <br>  ma[chose] = ret; <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure> 接下来就按照生成树的角度进行思考。<br />首先我们需要并查集，这个非常简单不在累述，然后我们会发现要进行 <spanclass="math inline">\(n-1\)</span> 次连边操作。<br />对于每个连边操作，我们都要找到一个和根节点所在集合有边的点 <spanclass="math inline">\(p\)</span> 然后连边。<br />那么怎么找到这样的点 <span class="math inline">\(p\)</span>呢？这里有一个显然的结论：<br />&gt; 对于点集 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> ，如果 <spanclass="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 中的点有边相连，那么满足 <spanclass="math inline">\(ask(A)+ask(B)&lt; ask(A\cup B)\)</span></p><p>运用这个结论，我们就可以找到上文所讲的 <spanclass="math inline">\(p\)</span> 。</p><p>我们令根节点所在的点集为 <span class="math inline">\(A\)</span>，其他的点构成的点集为 <span class="math inline">\(B\)</span> 。<br />同时我们令上文结论中的查询方式为 <spanclass="math inline">\(check(A,B)\)</span> ，及调用 <spanclass="math inline">\(check(A,B)\)</span> 就可以知道是否有边。<br />因为询问次数控制较为严格，我们考虑 <span class="math inline">\(O(n\logn)\)</span> 的较大常数做法。<br />直接能够想到的是二分做法：（假设 <span class="math inline">\(B\)</span>集合的大小为 <span class="math inline">\(L\)</span>）<br />* 我们把 <span class="math inline">\(B\)</span> 按照大小平均分成两个集合<span class="math inline">\(B_1\)</span> 和 <spanclass="math inline">\(B_2\)</span> 。<br />* 分别查询 <span class="math inline">\(check(B_1,A)\)</span> 和 <spanclass="math inline">\(check(B_2,A)\)</span>，如果一个为真则取为真的，否则任意取一个。<br />* 不难发现，最后集合 <span class="math inline">\(B\)</span>只会剩下一个节点，那个节点就是 <span class="math inline">\(p\)</span>。复杂度 <span class="math inline">\(O(\log n)\)</span> 。</p><p>找到了 <span class="math inline">\(p\)</span> ，我们还要知道 <spanclass="math inline">\(p\)</span>和根节点集合中的哪一个点有边，按照相似的方法即可。<br />只不过此次查询的 <span class="math inline">\(check\)</span>操作更为简洁，复杂度还是 <span class="math inline">\(O(\log n)\)</span>。</p><p>重复 <span class="math inline">\(n-1\)</span>次上述的操作，我们就找到了一个生成树，接下来对树染色非常简单。<br />我们令染为白色和黑色的点集分别为 <spanclass="math inline">\(white\)</span> 和 <spanclass="math inline">\(black\)</span> ，进行一次 <spanclass="math inline">\(check(white,black)\)</span> 即可判断二分图。<br />如果是二分图，那么接下来非常简单，现在来讨论非二分图的情况。</p><p>我的做法是随机化，每一次对集合进行一次 <spanclass="math inline">\(\tt random_shuffle\)</span> ，然后取 <spanclass="math inline">\(\frac{L}{2}\)</span> 。<br />进行查询，如果可以的话让点集大小直接减半，<del>不知道对不对，反正我过了</del></p>所以这样下来，复杂度约为 <span class="math inline">\(O(n\log n)\)</span>带上 <span class="math inline">\(3\sim 5\)</span>倍常数，可以通过。<br />具体可以看代码：<details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> quad putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><br><span class="hljs-keyword">using</span> std::abs;<br><span class="hljs-keyword">using</span> std::pair;<br><span class="hljs-keyword">using</span> std::string;<br><span class="hljs-keyword">using</span> std::make_pair;<br><br><span class="hljs-comment">// #define int long long</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span></span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a, rest &amp;...x)</span></span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x, rest ...a)</span></span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1005</span>;<br><br><span class="hljs-type">int</span> n, root_edge, tot, ok[N], edgetot, col[N];<br><span class="hljs-type">int</span> deep[N], fa[N][<span class="hljs-number">15</span>], sta[N], top;<br>std::vector &lt;<span class="hljs-type">int</span>&gt; now, rt, white, black;<br>std::vector &lt;<span class="hljs-type">int</span>&gt; dis[N];<br><br>std::map &lt;std::vector&lt;<span class="hljs-type">int</span>&gt;, <span class="hljs-type">int</span>&gt; ma;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>  <span class="hljs-type">int</span> x, y;<br>  <span class="hljs-built_in">Edge</span> (<span class="hljs-type">int</span> _x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _y = <span class="hljs-number">0</span>) &#123;x = _x; y = _y;&#125;<br>&#125; edge[N * N];<br><span class="hljs-keyword">namespace</span> UFST &#123;<br><span class="hljs-type">int</span> fa[N], siz[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">rebuild</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; chose)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (chose.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  std::<span class="hljs-built_in">sort</span>(chose.<span class="hljs-built_in">begin</span>(), chose.<span class="hljs-built_in">end</span>());<br>  <span class="hljs-keyword">if</span> (ma[chose]) <span class="hljs-keyword">return</span> ma[chose];<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;? &quot;</span>);<br>  <span class="hljs-built_in">write</span>(chose.<span class="hljs-built_in">size</span>()), Enter;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : chose) <span class="hljs-built_in">write</span>(t), quad; Enter;<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-type">int</span> ret; <span class="hljs-built_in">read</span>(ret); <br>  ma[chose] = ret; <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>  now.<span class="hljs-built_in">clear</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++) now.<span class="hljs-built_in">emplace_back</span>(ok[i]);<br>  <span class="hljs-type">int</span> edge1 = <span class="hljs-built_in">ask</span>(now);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : rt) now.<span class="hljs-built_in">emplace_back</span>(t);<br>  <span class="hljs-type">int</span> edge2 = <span class="hljs-built_in">ask</span>(now);<br>  <span class="hljs-keyword">if</span> (edge1 + root_edge &lt; edge2) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">check2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>  now.<span class="hljs-built_in">clear</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++) now.<span class="hljs-built_in">emplace_back</span>(ok[i]);<br>  <span class="hljs-type">int</span> edge1 = <span class="hljs-built_in">ask</span>(now);<br>  now.<span class="hljs-built_in">emplace_back</span>(p);<br>  <span class="hljs-type">int</span> edge2 = <span class="hljs-built_in">ask</span>(now);<br>  <span class="hljs-keyword">if</span> (edge1 &lt; edge2) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">LCA</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(n); UFST::<span class="hljs-built_in">rebuild</span>(n);<br>  <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Y 1 \n1&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  now.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-number">1</span>); <br>  root_edge = <span class="hljs-built_in">ask</span>(now);<br>  rt = now;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> edgenum = <span class="hljs-number">1</span>, rootteam; edgenum &lt; n; edgenum++) &#123;<br>    root_edge = <span class="hljs-built_in">ask</span>(rt);<br>    tot = <span class="hljs-number">0</span>, rootteam = UFST::<span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>      <span class="hljs-keyword">if</span> (UFST::<span class="hljs-built_in">find</span>(i) != rootteam) ok[++tot] = i;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">1</span>, right = tot, mid;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>      mid = (left + right) / <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(left, mid)) right = mid;<br>      <span class="hljs-keyword">else</span> left = mid + <span class="hljs-number">1</span>; <br>    &#125;<br>    <span class="hljs-type">int</span> point = ok[left];<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : rt) ok[++tot] = t;<br>    left = <span class="hljs-number">1</span>; right = tot;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>      mid = (left + right) / <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check2</span>(left, mid, point)) right = mid;<br>      <span class="hljs-keyword">else</span> left = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    UFST::<span class="hljs-built_in">merge</span>(ok[left], point);<br>    edge[++edgetot] = <span class="hljs-built_in">Edge</span>(ok[left], point);<br>    rt.<span class="hljs-built_in">emplace_back</span>(point);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= edgetot; i++) &#123;<br>    Edge p = edge[i];<br>    dis[p.x].<span class="hljs-built_in">emplace_back</span>(p.y);<br>    dis[p.y].<span class="hljs-built_in">emplace_back</span>(p.x);<br>  &#125;<br>  <span class="hljs-built_in">DFS</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (col[i] == <span class="hljs-number">0</span>) white.<span class="hljs-built_in">emplace_back</span>(i);<br>    <span class="hljs-keyword">else</span> black.<span class="hljs-built_in">emplace_back</span>(i);<br>  &#125;<br>  <span class="hljs-comment">// for (int num : white) write(num), quad; Enter;</span><br>  <span class="hljs-comment">// for (int num : black) write(num), quad; Enter;</span><br>  <span class="hljs-type">int</span> edge1 = <span class="hljs-built_in">ask</span>(white), edge2 = <span class="hljs-built_in">ask</span>(black);<br>  <span class="hljs-comment">// printf(&quot;!!!&quot;);write(white.size(), edge1);</span><br>  <span class="hljs-type">int</span> p1, p2;<br>  <span class="hljs-keyword">if</span> (edge1 == <span class="hljs-number">0</span> &amp;&amp; edge2 == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Y &quot;</span>); <span class="hljs-built_in">write</span>(white.<span class="hljs-built_in">size</span>()), Enter;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : white) <span class="hljs-built_in">write</span>(num), quad; Enter;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (edge1 != <span class="hljs-number">0</span>) &#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : white) ok[++tot] = num;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>      now.<span class="hljs-built_in">clear</span>();<br>      std::<span class="hljs-built_in">random_shuffle</span>(ok + <span class="hljs-number">1</span>, ok + <span class="hljs-number">1</span> + tot);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i * <span class="hljs-number">2</span> - <span class="hljs-number">1</span> &lt;= std::<span class="hljs-built_in">max</span>(tot, <span class="hljs-number">3</span>); i++) now.<span class="hljs-built_in">emplace_back</span>(ok[i]);<br>      <span class="hljs-comment">// for (int t : now) write(t), quad; Enter; write(ask(now)); Enter;</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ask</span>(now)) &#123; <br>        <span class="hljs-keyword">if</span> (now.<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>) &#123;p1 = ok[<span class="hljs-number">1</span>]; p2 = ok[<span class="hljs-number">2</span>]; <span class="hljs-keyword">break</span>;&#125;<br>        tot = (tot + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>      &#125;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (edge2 != <span class="hljs-number">0</span>) &#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : black) ok[++tot] = num;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>      now.<span class="hljs-built_in">clear</span>();<br>      std::<span class="hljs-built_in">random_shuffle</span>(ok + <span class="hljs-number">1</span>, ok + <span class="hljs-number">1</span> + tot);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i * <span class="hljs-number">2</span> - <span class="hljs-number">1</span> &lt;= tot; i++) now.<span class="hljs-built_in">emplace_back</span>(ok[i]);<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ask</span>(now)) &#123; <br>        <span class="hljs-keyword">if</span> (now.<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>) &#123;p1 = ok[<span class="hljs-number">1</span>]; p2 = ok[<span class="hljs-number">2</span>]; <span class="hljs-keyword">break</span>;&#125;<br>        tot = (tot + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N &quot;</span>); <br>  <span class="hljs-type">int</span> lca = <span class="hljs-built_in">LCA</span>(p1, p2);<br>  <span class="hljs-built_in">write</span>(deep[p1] + deep[p2] - <span class="hljs-number">2</span> * deep[lca] + <span class="hljs-number">1</span>); Enter;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-built_in">write</span>(p1), quad;<br>    p1 = fa[p1][<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> (p1 == lca) <span class="hljs-keyword">break</span>;<br>  &#125; <br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    sta[++top] = p2;<br>    <span class="hljs-keyword">if</span> (p2 == lca) <span class="hljs-keyword">break</span>;<br>    p2 = fa[p2][<span class="hljs-number">0</span>];<br>  &#125;<br>  <span class="hljs-keyword">while</span> (top) <span class="hljs-built_in">write</span>(sta[top]), quad, top --; Enter;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> father)</span> </span>&#123;<br>  deep[now] = deep[father] + <span class="hljs-number">1</span>;<br>  col[now] = <span class="hljs-number">1</span> - col[father];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">12</span>; i++) fa[now][i + <span class="hljs-number">1</span>] = fa[fa[now][i]][i];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : dis[now]) &#123;<br>    <span class="hljs-keyword">if</span> (t == father) <span class="hljs-keyword">continue</span>;<br>    fa[t][<span class="hljs-number">0</span>] = now;<br>    <span class="hljs-built_in">DFS</span>(t, now);<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">LCA</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (deep[x] &lt; deep[y]) std::<span class="hljs-built_in">swap</span>(x, y);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">13</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    <span class="hljs-keyword">if</span> (deep[fa[x][i]] &gt;= deep[y]) x = fa[x][i];<br>  <span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">return</span> x;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">13</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    <span class="hljs-keyword">if</span> (fa[x][i] != fa[y][i]) x = fa[x][i], y = fa[y][i];<br>  <span class="hljs-keyword">return</span> fa[x][<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-keyword">namespace</span> UFST &#123;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> x == fa[x] ? x : fa[x] = <span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">rebuild</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) fa[i] = i, siz[i] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  x = <span class="hljs-built_in">find</span>(x); y = <span class="hljs-built_in">find</span>(y);<br>  <span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">return</span> ;<br>  <span class="hljs-keyword">if</span> (siz[x] &gt; siz[y]) std::<span class="hljs-built_in">swap</span>(x, y);<br>  fa[x] = y; siz[y] += siz[x];<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span> </span>&#123;<br>  <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, t = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c) &amp;&amp; c != <span class="hljs-string">&#x27;-&#x27;</span>) c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) c = <span class="hljs-built_in">getchar</span>(), t = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) s = s * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>  a = s * t;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>  <span class="hljs-type">int</span> top = <span class="hljs-number">0</span>, sta[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-keyword">while</span> (x) sta[++top] = x % <span class="hljs-number">10</span>, x /= <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">while</span> (top) <span class="hljs-built_in">putchar</span>(sta[top] + <span class="hljs-string">&#x27;0&#x27;</span>), top --;<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a, rest &amp;...x)</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(a); <span class="hljs-built_in">read</span>(x...);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x, rest ...a)</span> </span>&#123;<br>  <span class="hljs-built_in">write</span>(x); quad; <span class="hljs-built_in">write</span>(a...);<br>&#125;<br><br></code></pre></td></tr></table></figure></details><h2 id="cf1129e-legendary-tree">CF1129E Legendary Tree</h2><p><ahref="https://www.luogu.com.cn/problem/CF1129E"><strong>题目链接</strong></a></p><p>一道自认为很有意思的交互题。<br />题目给出的询问方式看上去非常申必，但是我们可以从树的性质下手进行分析。</p><p>我们假定这个树的根节点是 <span class="math inline">\(1\)</span>，那么很显然，我们可以进行 <span class="math inline">\(n-1\)</span>次询问。<br />对于第 <span class="math inline">\(i\)</span> 次询问，我们是这样的：<span class="math display">\[\{\{1\},\{2,3,\cdots ,n-1,n\},i\}\]</span> 这个表示从根节点出发，经过 <spanclass="math inline">\(i\)</span> 节点最后能到达树上的几个节点。<br />几乎不用想的，上述询问直接给出了第 <spanclass="math inline">\(i\)</span> 个节点的子树大小 <spanclass="math inline">\(siz\)</span> 。<br />现在每一个节点的子树大小都确定了，问题转化成为对于节点 <spanclass="math inline">\(i\)</span> 确定它的父亲节点是什么。</p><p>考虑到随着节点深度的不断增加，节点的子树大小一定不断减小。<br />所以我们按照 <span class="math inline">\(siz\)</span>从小到大排序，这样的话对于每一个节点 <spanclass="math inline">\(i\)</span> ，它的儿子一定是在它的左边。<br />现在问题就是在 <span class="math inline">\(i\)</span>左边所有没有被选择的节点中高效率地找到 <spanclass="math inline">\(i\)</span> 的儿子们。</p><p>在这里，我们可以用二分的方法来解决这个问题：<br />我们假定现在已经扫到了第 <span class="math inline">\(i\)</span>个节点，我们记 <span class="math inline">\(i\)</span>左边没有被选的节点集合为 <span class="math inline">\(S\)</span> 。<br />首先，二分的左边界 <span class="math inline">\(L\)</span> 一定是 <spanclass="math inline">\(1\)</span> ，有边界我们定为 <spanclass="math inline">\(|S|\)</span> ，及 <spanclass="math inline">\(S\)</span> 集合的大小。<br />我们记此时二分出的值为 <span class="math inline">\(mid\)</span>，那么我们进行如下的询问： <span class="math display">\[\{\{1\},\{S_1,S_2,\cdots ,S_{mid-1},S_{mid}\}, u\}\]</span> 其中 <span class="math inline">\(u\)</span>表示当前扫到的节点的编号。<br />当我们发现询问的值大于 <span class="math inline">\(0\)</span>时，我们就缩小范围，否则就增大范围。<br />最后我们要找的是满足上述询问大于 <span class="math inline">\(0\)</span>的最小的 <span class="math inline">\(pos\)</span> ，<spanclass="math inline">\(pos\)</span> 表示排完序后的节点编号。<br />容易发现，其实最后一个 <span class="math inline">\(pos\)</span>位置上的节点一定是 <span class="math inline">\(u\)</span> 的孩子，<spanclass="math inline">\(u\)</span> 的定义如上。</p>这样进行不断的询问，可以发现询问次数是 <spanclass="math inline">\(O(n^2\log n)\)</span> 级别的，显然可以通过。<details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">505</span>;<br><br><span class="hljs-type">int</span> n, root, siz[N], fa[N], st[N], tot;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>  <span class="hljs-type">int</span> id, siz;<br>  <span class="hljs-built_in">Node</span> (<span class="hljs-type">int</span> _id = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _siz = <span class="hljs-number">0</span>) &#123;<br>    id = _id; siz = _siz;<br>  &#125;<br>  <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Node &amp;p, <span class="hljs-type">const</span> Node &amp;q) &#123;<br>    <span class="hljs-keyword">return</span> p.siz &lt; q.siz;<br>  &#125;<br>&#125; node[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask_size</span><span class="hljs-params">(<span class="hljs-type">int</span> point)</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1\n1\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n - <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d\n&quot;</span>, point);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-type">int</span> ret; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ret);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> point, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1\n1\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, right);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= right; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, st[i]);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, point);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-type">int</span> ret; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ret);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>  root = <span class="hljs-number">1</span>; siz[root] = n;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) siz[i] = <span class="hljs-built_in">ask_size</span>(i);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) node[i] = <span class="hljs-built_in">Node</span>(i, siz[i]);<br>  std::<span class="hljs-built_in">sort</span>(node + <span class="hljs-number">1</span>, node + <span class="hljs-number">1</span> + n);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>      tot = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j++) <br>        <span class="hljs-keyword">if</span> (fa[node[j].id] == <span class="hljs-number">0</span>) st[++tot] = node[j].id;<br>      <span class="hljs-type">int</span> left = <span class="hljs-number">1</span>, right = tot, ans = n + <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ask</span>(node[i].id, mid)) &#123;<br>          right = mid - <span class="hljs-number">1</span>;<br>          ans = std::<span class="hljs-built_in">min</span>(ans, mid);<br>        &#125; <span class="hljs-keyword">else</span> left = mid + <span class="hljs-number">1</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (ans == n + <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>      fa[st[ans]] = node[i].id;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ANSWER\n&quot;</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, fa[i], i);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><h2 id="cf1705f-mark-and-the-online-exam">CF1705F Mark and the OnlineExam</h2><p><ahref="https://www.luogu.com.cn/problem/CF1705F"><strong>题目链接</strong></a></p><p>看上去像是经典交互问题，但是好像不太会……</p><p>这道题的一种非常直接的想法也是第一步就是先全部试一下 <spanclass="math inline">\(\text{T}\)</span> 然后你就能得到一共有多少个答案为<span class="math inline">\(\text{T}\)</span> 。</p><p>然后最暴力的方法就是每一次把其中一个选项变成 <spanclass="math inline">\(\text{F}\)</span> 然后查询结果。<br />正确性是没得讲，但是这样操作的询问次数是 <spanclass="math inline">\(O(n)\)</span> 的级别，会 <spanclass="math inline">\(\text{Wrong Answer on test 9}\)</span> 。</p><p>下面是一种看到的非常巧妙的构造询问的方法：<br />看到 <span class="math inline">\(n\)</span>和询问次数的数量级关系，容易判断出询问的次数要是 <spanclass="math inline">\(\frac{n}{3}\)</span> 级别才不会有问题。<br />我们考虑把这 <span class="math inline">\(n\)</span>个选择题平均地分成三个部分，同时为了方便，我们定义 <spanclass="math inline">\(m=\left\lfloor\dfrac{n}{3}\right\rfloor\)</span>。</p><p>令序列 <span class="math inline">\(S\)</span>为询问时我们的答案，<spanclass="math inline">\(\text{ret=ask(S)}\)</span>表示一次询问操作。<br />1. 最简单的一步令 <span class="math inline">\(S=\{T,T,\cdots,T\}\)</span> ，<span class="math inline">\(\text{num=ask(S)}\)</span>表示答案中有多少个 <span class="math inline">\(\text{T}\)</span>。<br />2. 对于每一个 <span class="math inline">\(i\ (i\leq m)\)</span> ，我们把<span class="math inline">\(i\)</span> 和 <spanclass="math inline">\(i+m\)</span> 这两位变成 <spanclass="math inline">\(\text{F}\)</span> 其他的位仍然是 <spanclass="math inline">\(\text{T}\)</span> ，进行询问 <spanclass="math inline">\(\text{ret=ask(S)}\)</span> ，然后对 <spanclass="math inline">\(\text{ret}\)</span> 进行分讨。<br />* <span class="math inline">\(ret=num+2\)</span> 说明这两个猜对了，所以<span class="math inline">\(i\)</span> 和 <span class="math inline">\(i+ m\)</span> 这两位都是 <span class="math inline">\(\text{F}\)</span>。<br />* <span class="math inline">\(ret=num-2\)</span> 说明两个都猜错了，所以<span class="math inline">\(i\)</span> 和 <span class="math inline">\(i+ m\)</span> 这两位都是 <span class="math inline">\(\text{T}\)</span>。<br />* <span class="math inline">\(ret=num\)</span>说明一个猜对一个猜错了，我们先放一边，不进行考虑。<br />3. 令 <span class="math inline">\(S&#39;=m\times \text{F} + (n-m)\times\text{T}\)</span> ，进行询问 <spanclass="math inline">\(\text{q3=ask(S&#39;)}\)</span> 。<br />4. 对于每一个 <span class="math inline">\(i\ (i\leq m \text{且第} \  i\\text{位还没有被确定})\)</span>，我们把 <spanclass="math inline">\(S&#39;\)</span> 的第 <spanclass="math inline">\(i\)</span> 变成 <spanclass="math inline">\(\text{T}\)</span>，第 <spanclass="math inline">\(i+m\)</span> 和 <spanclass="math inline">\(i+2m\)</span> 位变成 <spanclass="math inline">\(\text{T}\)</span> ，在对其进行询问 <spanclass="math inline">\(\text{ret=ask(S&#39;&#39;)}\)</span>。<br />* <span class="math inline">\(ret = q3+3\)</span> 三个都猜对了，答案就是<span class="math inline">\(\text{TFF}\)</span> 。  * <spanclass="math inline">\(ret = q3-3\)</span> 三个都猜错了，答案是 <spanclass="math inline">\(\text{FTT}\)</span> 。<br />* <span class="math inline">\(ret = q3+1\)</span>对了两个错了一个，结合上述的分析以及 <strong>情况2</strong>的排查可以得出答案是 <span class="math inline">\(\text{TFT}\)</span>，在这里不再证明。<br />* <span class="math inline">\(ret = q3-1\)</span>对了一个错了两个，同理，答案是 <spanclass="math inline">\(\text{FTF}\)</span> 。<br />5. 对于所有还没有确定的，直接按照最暴力的方法去做就可以了。<br /></p><p>容易发现询问次数是 <spanclass="math inline">\(O(\left\lfloor\dfrac{n}{3}\right\rfloor)\)</span>级别的，没有任何问题。</p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n, ans[N], visit[N], num, out[N], ret, q3;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> *ans)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (ans[i] == <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;T&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;F&quot;</span>);<br>  &#125; Enter;<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-type">int</span> ret; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ret);<br>  <span class="hljs-keyword">if</span> (ret == n) <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n); <br>  <span class="hljs-built_in">memset</span>(out, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(out));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) ans[i] = <span class="hljs-number">1</span>;<br>  num = <span class="hljs-built_in">ask</span>(ans);<br>  <span class="hljs-type">int</span> m = n / <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>    <span class="hljs-type">int</span> x = i, y = i + m;<br>    ans[x] = ans[y] = <span class="hljs-number">0</span>;<br>    ret = <span class="hljs-built_in">ask</span>(ans);<br>    <span class="hljs-keyword">if</span> (ret == num + <span class="hljs-number">2</span>) out[x] = out[y] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == num - <span class="hljs-number">2</span>) out[x] = out[y] = <span class="hljs-number">1</span>; <br>    ans[x] = ans[y] = <span class="hljs-number">1</span>; <br>  &#125;<br>  std::<span class="hljs-built_in">fill</span>(ans + <span class="hljs-number">1</span>, ans + <span class="hljs-number">1</span> + n, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) ans[i] = <span class="hljs-number">0</span>;<br>  q3 = <span class="hljs-built_in">ask</span>(ans);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>    <span class="hljs-keyword">if</span> (out[i] != <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br>    ans[i] = <span class="hljs-number">1</span>, ans[i + m] = <span class="hljs-number">0</span>, ans[i + <span class="hljs-number">2</span> * m] = <span class="hljs-number">0</span>;<br>    ret = <span class="hljs-built_in">ask</span>(ans);<br>    <span class="hljs-keyword">if</span> (ret == q3 - <span class="hljs-number">3</span>) &#123;<br>      out[i] = <span class="hljs-number">0</span>; out[i + m] = <span class="hljs-number">1</span>, out[i + <span class="hljs-number">2</span> * m] = <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == q3 + <span class="hljs-number">3</span>) &#123;<br>      out[i] = <span class="hljs-number">1</span>; out[i + m] = <span class="hljs-number">0</span>; out[i + <span class="hljs-number">2</span> * m] = <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == q3 + <span class="hljs-number">1</span>) &#123;<br>      out[i] = <span class="hljs-number">1</span>; out[i + m] = <span class="hljs-number">0</span>; out[i + <span class="hljs-number">2</span> * m] = <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == q3 - <span class="hljs-number">1</span>) &#123;<br>      out[i] = <span class="hljs-number">0</span>; out[i + m] = <span class="hljs-number">1</span>; out[i + <span class="hljs-number">2</span> * m] = <span class="hljs-number">0</span>;<br>    &#125;<br>    ans[i] = <span class="hljs-number">0</span>, ans[i + m] = <span class="hljs-number">1</span>, ans[i + <span class="hljs-number">2</span> * m] = <span class="hljs-number">1</span>;<br>  &#125;<br>  std::<span class="hljs-built_in">fill</span>(ans + <span class="hljs-number">1</span>, ans + <span class="hljs-number">1</span> + n, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (out[i] != <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br>    ans[i] = <span class="hljs-number">0</span>;<br>    ret = <span class="hljs-built_in">ask</span>(ans);<br>    <span class="hljs-keyword">if</span> (ret &lt; num) out[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> out[i] = <span class="hljs-number">0</span>;<br>    ans[i] = <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-built_in">printf</span>(out[i] == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;T&quot;</span> : <span class="hljs-string">&quot;F&quot;</span>);<br>  Enter;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><h2 id="cf1142e-pink-floyd">CF1142E Pink Floyd</h2><p><ahref="https://www.luogu.com.cn/problem/CF1142E"><strong>题目链接</strong></a></p><p>好申必的题，可能是因为我水平不够吧……</p><p>为了解决这道题，首先我们要解决没有粉色边全部是绿色边的情况。<br />因为询问的操作次数上限是 <span class="math inline">\(2n\)</span>再加上交互库有自适应功能，所以找 <span class="math inline">\(u\)</span>再验证显然是不可能的。<br />我没有证明，也就感性理解一下好像没有什么大的问题。</p><p>然后发现一种神奇的做法：可以逐步去筛选那些可能是 <spanclass="math inline">\(u\)</span> 的点，最后剩下的显然就是答案。<br />初始化时所有的点都在候选的集合里面，我们令这个集合为 <spanclass="math inline">\(S\)</span> 。<br />枚举 <span class="math inline">\(u,v\in S\)</span> 如果 <spanclass="math inline">\(u\rightarrow v\)</span> 我们就把 <spanclass="math inline">\(v\)</span> 从 <spanclass="math inline">\(S\)</span> 中删掉，否则把 <spanclass="math inline">\(u\)</span> 从 <spanclass="math inline">\(S\)</span> 中删掉。<br />这个东西是非常显然的，因为我们假设令 <spanclass="math inline">\(P(x)\)</span> 表示 <spanclass="math inline">\(x\)</span>点能到的所有点的集合，这个时候我们可以发现当 <spanclass="math inline">\(u\rightarrow v\)</span> 的时候可以直接把 <spanclass="math inline">\(v\)</span> 纳入到 <spanclass="math inline">\(P(u)\)</span> 里面去，所以在不在 <spanclass="math inline">\(S\)</span> 中就不那么必要了。<br />容易发现：每一次询问都会有一个点从 <spanclass="math inline">\(S\)</span> 集合中删去，我们一共进行 <spanclass="math inline">\(n-1\)</span>此操作就可以使集合只剩下一个元素，也就是答案。</p><p>现在来考虑完整的题目：由数据的范围可以看出，只走粉边到达所有的点是不可能的事情，所以考虑从绿边下手。<br />同样的，我们还是要先确定一个可能的答案集合 <spanclass="math inline">\(S\)</span> ，使得 <spanclass="math inline">\(S\)</span>中任意的两个点没有粉边相连，且满足集合内的点能通过一些构造的手段使得能和非集合中的点连边。<br />因为集合中是没有粉边的情况的，所以我们又回到了一开始 <spanclass="math inline">\(m=0\)</span>的问题上，可以直接调用构造的方法。</p><p>仔细分析上述筛选答案的方法，可以发现 <spanclass="math inline">\(S\)</span> 中点的入读度一定是 <spanclass="math inline">\(0\)</span> 所以我们可以维护一个拓扑排序。<br />每次弹出两个点，然后然后按照筛选的方法舍弃一个，另一个加入到队列中，最后剩下的就是<span class="math inline">\(u\)</span> 。<br />讲的不太明白，具体可以看一下代码。</p><p>询问的复杂度是 <span class="math inline">\(O(n+m)\)</span>级别的，没有压力。</p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> quad putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> n, m, ok[<span class="hljs-number">305</span>][<span class="hljs-number">305</span>], visit[N], in[N], deg[N];<br>std::vector &lt;<span class="hljs-type">int</span>&gt; dis1[N], dis2[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;? %d %d\n&quot;</span>, a, b);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-type">int</span> ret; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ret);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> now)</span> </span>&#123;<br>  visit[now] = in[now] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : dis1[now]) &#123;<br>    <span class="hljs-keyword">if</span> (in[t] == <span class="hljs-number">0</span>) &#123;<br>      deg[t] ++;<br>      dis2[now].<span class="hljs-built_in">emplace_back</span>(t);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (visit[t] == <span class="hljs-number">0</span>) <span class="hljs-built_in">DFS</span>(t);<br>  &#125;<br>  in[now] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt;= m; i++) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);<br>    dis1[x].<span class="hljs-built_in">emplace_back</span>(y);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (visit[i]) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">DFS</span>(i);<br>  &#125;<br>  std::queue &lt;<span class="hljs-type">int</span>&gt; que;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <br>    <span class="hljs-keyword">if</span> (deg[i] == <span class="hljs-number">0</span>) que.<span class="hljs-built_in">emplace</span>(i);<br>  <span class="hljs-keyword">while</span> (que.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-type">int</span> u = que.<span class="hljs-built_in">front</span>(); que.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-type">int</span> v = que.<span class="hljs-built_in">front</span>(); que.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ask</span>(u, v) == <span class="hljs-number">0</span>) std::<span class="hljs-built_in">swap</span>(u, v);<br>    que.<span class="hljs-built_in">push</span>(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : dis2[v]) &#123;<br>      deg[t] --;<br>      <span class="hljs-keyword">if</span> (deg[t] == <span class="hljs-number">0</span>) que.<span class="hljs-built_in">emplace</span>(t);<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;! %d\n&quot;</span>, que.<span class="hljs-built_in">front</span>());<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><p><strong>给我点赞瞄，给我点赞谢谢喵。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AGC010F 题解</title>
    <link href="/2022/11/06/16653964/"/>
    <url>/2022/11/06/16653964/</url>
    
    <content type="html"><![CDATA[<p>现在也就会写一写代码长度不超过 <spanclass="math inline">\(1k\)</span> 的题目了。 /kk</p><p>看上去一脸不可做，看到 <strong>从必败状态逆推</strong>的提示后会了。</p><p>考虑什么算是必败状态，我们设此时棋子所在的位置为 <spanclass="math inline">\(now\)</span> 。<br />那么可以发现，当对于所有的 <span class="math inline">\(t\)</span> 存在<span class="math inline">\(now\rightarrow t\)</span> 这条边，都满足<span class="math inline">\(A_{now}\leq A_t\)</span> 时，在 <spanclass="math inline">\(t\)</span> 点一定是必败的。<br />原因显然，因为对于上述的情况，一但我把棋子从 <spanclass="math inline">\(now\)</span> 移走，对手就会把它移回到 <spanclass="math inline">\(now\)</span> 点，然后我就寄了。<br />我们考虑把眼光放低，着重去看一次移棋子的操作，容易发现当 <spanclass="math inline">\(A_{now}\leq A_t\)</span> 时我把棋子从 <spanclass="math inline">\(now\)</span> 移到 <spanclass="math inline">\(t\)</span> 是不能做的。<br />原因是一样的，因为对手仍然可以把我赶回 <spanclass="math inline">\(now\)</span> 。<br />所以可以看出你一条边是不可能从不同方向经过两次，也就是说在树中不能走回头路。</p><p>那我们直接令 <span class="math inline">\(i\)</span> 为根节点，跑<span class="math inline">\(n\)</span> 遍 <spanclass="math inline">\(\text{DFS}\)</span> ，复杂度 <spanclass="math inline">\(O(n^2)\)</span> 。<br />代码只有 800B ，小学生写不出来的话幼儿园都会写。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5005</span>;<br><br><span class="hljs-type">int</span> n, a[N], flag[N];<br>std::vector &lt;<span class="hljs-type">int</span>&gt; dis[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> father)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : dis[now]) &#123;<br>    <span class="hljs-keyword">if</span> (t == father) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfs</span>(t, now);<br>    <span class="hljs-keyword">if</span> (flag[t] == <span class="hljs-number">0</span> &amp;&amp; a[now] &gt; a[t]) <br>      flag[now] = <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  std::cin &gt;&gt; n;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) std::cin &gt;&gt; a[i];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt; n; i++) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);<br>    dis[x].<span class="hljs-built_in">emplace_back</span>(y);<br>    dis[y].<span class="hljs-built_in">emplace_back</span>(x);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-built_in">memset</span>(flag, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(flag));<br>    <span class="hljs-built_in">dfs</span>(i, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (flag[i] == <span class="hljs-number">1</span>)<br>      std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>  &#125;<br>  std::cout &lt;&lt; std::endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组合计数入门题瞎做</title>
    <link href="/2022/11/06/16579490/"/>
    <url>/2022/11/06/16579490/</url>
    
    <content type="html"><![CDATA[<h2 id="luogu-p5135-painting">luogu P5135 painting</h2><p><ahref="https://www.luogu.com.cn/problem/P5135"><strong>题目链接</strong></a></p><p>很入门的一道题，没有什么难度。<br />显然的，按照 <span class="math inline">\(op\)</span> 进行分类讨论：</p><ul><li><p><span class="math inline">\(op=1\)</span> ，答案是 <spanclass="math inline">\(\dbinom{n}{m}\)</span>。原因很简单，先随机得到所在列然后排个序就可以了。</p></li><li><p><span class="math inline">\(op=0\)</span> ，答案是 <spanclass="math inline">\(\dbinom{n+m-1}{m}\)</span>。也不难，考虑上述情况的解法，这里不再累述。</p></li></ul><p>此时因为 <span class="math inline">\(T\)</span> 和 <spanclass="math inline">\(m\)</span>都很小，所以直接暴力算组合数就可以了。<br />所以代码难度是小学组的，复杂度 <spanclass="math inline">\(O(Tm)\)</span> ，代码不放了。</p><h2 id="hnoi2011-卡农">[HNOI2011] 卡农</h2><p><ahref="https://www.luogu.com.cn/problem/P3214"><strong>题目链接</strong></a></p><p>好牛逼的一道题…… 可能是因为我太菜了……<br />发现对于两个不同的曲子的定义没有什么用处，先求出总的结果然后除以 <spanclass="math inline">\(m!\)</span> 就可以了。</p><p>然后我就不会了，最后只能看一眼题解……<br />考虑现在把题目进行转化：我们把音阶看成一个集合<br /><span class="math display">\[S=\{1,2,3,\cdots ,n-1,n\}\]</span>然后我们从这个集合 <span class="math inline">\(S\)</span> 中抽取 <spanclass="math inline">\(m\)</span>个不为空的子集作为题目中提到的音乐段。<br />我们定义取出的音乐段的集合为 <span class="math inline">\(S_2\)</span>，那么根据题目的描述，有两个个非常显然的限制：</p><ul><li><p>对于任意 <span class="math inline">\(s_1,s_2\in S_2\)</span>，满足 <span class="math inline">\(s_1\neq s_2\)</span> 。<br /></p></li><li><p>所有集合 <span class="math inline">\(S_2\)</span>中的片段，不同音阶的出现次数应该为偶数。</p></li></ul><p>考虑用 <span class="math inline">\(\text{dp}\)</span>解决问题，设状态 <span class="math inline">\(F_i\)</span> 表示到了第<span class="math inline">\(i\)</span> 个子集的方案数。<br />对于 <span class="math inline">\(F_i\)</span>的转移，尝试用总共可以取到的方案数减去不满足上述性质的方案数，最后得到答案。</p><p>先来看总共可以取到的方案数：<br />我们可以把每一个音阶看成是二进制上的一个位置，用 <spanclass="math inline">\(0\)</span> 或 <spanclass="math inline">\(1\)</span> 表述它出现的次数。<br />这样的话我们可以发现，上文出现次数为偶数的限制可以转换成集合内每个片段所代表的的二进制异或和为<span class="math inline">\(0\)</span> 。<br />考虑到现在的第 <span class="math inline">\(i\)</span>位，它完全取决于之前 <span class="math inline">\(i-1\)</span>位所填的方法，对于每一种 <span class="math inline">\(i-1\)</span>的排列都有不同的异或和。<br />所以现在得出总的方案数是 <spanclass="math inline">\(A_{2^n-1}^{i-1}\)</span> 就不那么困难了。</p><p>接下来考虑怎么去掉方案中的空集 —— 空集显然是不合法的。<br />对于一个片段 <span class="math inline">\(i\)</span>，如果它是空集，那么前 <span class="math inline">\(i-1\)</span>个片段一定可以构成一个完整的曲子。<br />所以这一部分的答案就是 <span class="math inline">\(F_{i-1}\)</span>。</p><p>再来看任意两个集合不一样的限制：<br />我们假设第 <span class="math inline">\(i\)</span> 个和第 <spanclass="math inline">\(j\)</span> 个集合时一模一样的，那么我们把 <spanclass="math inline">\(i\)</span> 和 <spanclass="math inline">\(j\)</span>删掉一定可以构成一个合法的音乐，这个方案是 <spanclass="math inline">\(F_{i-2}\)</span> 。<br />其中对于所谓的 <span class="math inline">\(j\)</span> ，一共有 <spanclass="math inline">\(i-1\)</span> 种取值，所以一定有一项是 <spanclass="math inline">\(i-1\)</span> 。<br />最后，对于子集 <span class="math inline">\(i\)</span> ，一共有 <spanclass="math inline">\(2^n-1-(i-2)\)</span> 种取值，原因显然。<br />最后可以得到转移方程 ： <span class="math display">\[F_i=A_{2^n-1}^{i-1}-F_{i-1}-F_{i-2}\times(i-1)\times(2^n-i+1)\]</span></p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> quad putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e8</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e6</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> n, m, F[N], two[N], mul, A[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  std::cin &gt;&gt; n &gt;&gt; m;<br>  two[<span class="hljs-number">0</span>] = A[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + m; i++) two[i] = two[i - <span class="hljs-number">1</span>] * <span class="hljs-number">2</span> % mod;<br>  <span class="hljs-type">int</span> maxn = two[n] - <span class="hljs-number">1</span> + mod;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) A[i] = A[i - <span class="hljs-number">1</span>] * (maxn - i + <span class="hljs-number">1</span> + mod) % mod; <br>  F[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> mul = <span class="hljs-number">1</span>, pmul = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= m; i++) &#123;<br>    mul = mul * i % mod;<br>    F[i] = A[i - <span class="hljs-number">1</span>] - F[i - <span class="hljs-number">1</span>] - F[i - <span class="hljs-number">2</span>] * (i - <span class="hljs-number">1</span>) % mod * (maxn - i + <span class="hljs-number">2</span> + mod) % mod;<br>    F[i] = (F[i] % mod + mod) % mod;<br>  &#125;<br>  <span class="hljs-comment">// std::cout &lt;&lt; F[m] &lt;&lt; std::endl;</span><br>  <span class="hljs-type">int</span> ans = F[m] * <span class="hljs-built_in">power</span>(mul, mod - <span class="hljs-number">2</span>) % mod;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, (ans % mod + mod) % mod);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ret = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (n) &#123;<br>    <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>) ret = ret * a % mod;<br>    a = a * a % mod; n /= <span class="hljs-number">2</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ret;<br>&#125; <br></code></pre></td></tr></table></figure></details><h2 id="cf1437f-emotional-fishermen">CF1437F Emotional Fishermen</h2><p><ahref="https://www.luogu.com.cn/problem/CF1437F"><strong>题目链接</strong></a></p><p>发现自己组合计数的水平真的跟吃屎一样，还是做一点简单的题目吧……</p><p>发现最后的方案数和初始的 <span class="math inline">\(a_i\)</span>没有任何的关系，所以先按照 <span class="math inline">\(a_i\)</span>从小到大排序。</p><p>我们假设最后的合法排列是这样的： <span class="math display">\[P_1,P_2,P_3,\cdots ,P_{n-1},P_n\]</span> 那么一定满足 <span class="math inline">\(2P_j&lt; P_i\ (j\leqi)\)</span> ，同时 <span class="math inline">\(2a_j&lt; P_i\)</span>的数都可以放在 <span class="math inline">\(P_i\)</span> 的右边。<br />我们令 <span class="math inline">\(limit_i\)</span> 表示最大的 <spanclass="math inline">\(j\)</span> 满足 <spanclass="math inline">\(2a_j&lt; a_i\)</span> 。</p><p>考虑 <span class="math inline">\(\text{DP}\)</span>，想到一个很显然的状态： <span class="math inline">\(F_i\)</span>表示当前最大值是 <span class="math inline">\(a_i\)</span>时的方案数。<br />注意到此时一定选取了 <span class="math inline">\(limit_i+1\)</span>个数。<br />可以得到 ： <span class="math display">\[F_i=\sum_{j=1}^{limit_i}F_j\times A_{limit_i-limit_j-1}^{n-limit_j-2}\]</span>原因也很简单，考虑一共剩下多少个数以及有多少个位置可以填就可以了。<br />代码小学难度，不放了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】DZY Loves Math V</title>
    <link href="/2022/11/06/16727066/"/>
    <url>/2022/11/06/16727066/</url>
    
    <content type="html"><![CDATA[<h3 id="题目描述">题目描述</h3><p>给你 <span class="math inline">\(n\)</span> 个整数 <spanclass="math inline">\(a_i\)</span> 叫你求： <spanclass="math display">\[\sum_{i_1|a_1}\sum_{i_2|a_2}\sum_{i_3|a_3}\cdots\sum_{i_n|a_n}\varphi(i_1i_2i_3\cdotsi_n)\]</span></p><h3 id="简要思路">简要思路</h3><p>发现对于欧拉函数 <span class="math inline">\(\varphi(n)\)</span>为积性函数，所以不难想到对于每一个质数 <spanclass="math inline">\(p\)</span> 考虑贡献。</p><p>我们假设现在考虑到的质数为 <span class="math inline">\(p\)</span>，令对于每一个 <span class="math inline">\(a_i\)</span> 质数 <spanclass="math inline">\(p\)</span> 所对的最大指数为 <spanclass="math inline">\(b_i\)</span> 。<br />那么我们可以得到此时 <span class="math inline">\(p\)</span> 的贡献为：<span class="math display">\[\begin{split}S &amp;=\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}\varphi(p^{i_1}p^{i_2}p^{i_3}\cdots p^{i_n})\\&amp;=\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}\varphi(p^{i_1+i_2+i_3+\cdots+i_n})\end{split}\]</span> 考虑到对于 <span class="math inline">\(\varphi(p^n)\)</span>有这样的公式： <span class="math display">\[\varphi(p^n)=p^n\times\frac{p-1}{p}\]</span> 所以上式可以表示为： <span class="math display">\[\begin{split}S&amp;=\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}(p^{i_1+i_2+i_3+\cdots+i_n}\times\frac{p-1}{p})\\&amp;=\frac{p-1}{p}\times\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}p^{i_1+i_2+i_3+\cdots+i_n}\end{split}\]</span> 看上去没有任何问题，但是发现当 <spanclass="math inline">\(i_1=i_2=i_3=\cdots=i_n=0\)</span>时有一定的缺陷，所以改成： <span class="math display">\[\begin{split}S&amp;=\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}(p^{i_1+i_2+i_3+\cdots+i_n}\times\frac{p-1}{p})\\&amp;=\frac{p-1}{p}\times\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}p^{i_1+i_2+i_3+\cdots+i_n}\\&amp;=\left[\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}p^{i_1+i_2+i_3+\cdots+i_n}-1\right]\times\frac{p-1}{p}+1\end{split}\]</span> 现在发现后面的那一部分包括那个 <spanclass="math inline">\(-1\)</span>都是死的，所要计算的也就是下面这个式子： <span class="math display">\[\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}p^{i_1+i_2+i_3+\cdots+i_n}\]</span> 我们尝试着把这个式子拆开来看一下： <spanclass="math display">\[\begin{split}S&#39;&amp;=\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}p^{i_1+i_2+i_3+\cdots+i_n}\\&amp;=\sum_{i_1=0}^{b_1}p^{i_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}p^{i_2+i_3+\cdots+i_n}\\&amp;=\sum_{i_1=0}^{b_1}p^{i_1}\sum_{i_2=0}^{b_2}p^{i_2}\sum_{i_3=0}^{b_3}p^{i_3}\cdots\sum_{i_n=0}^{b_n}p^{i_n}\\&amp;=\prod_{i=1}^n(1+p+p^2+\cdots +p^{b_i})\end{split}\]</span> 然后对所有的质数 <span class="math inline">\(p\)</span>去一个乘积就可以了，代码很简单。</p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> n, a[N], tag[M];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ret = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (n) &#123;<br>    <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>) ret = <span class="hljs-number">1ll</span> * ret * a % mod;<br>    a = <span class="hljs-number">1ll</span> * a * a % mod;<br>    n /= <span class="hljs-number">2</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  std::cin &gt;&gt; n;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= M - <span class="hljs-number">5</span>; i++) tag[i] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-type">int</span> t = a[i], num = <span class="hljs-number">0</span>, mul = <span class="hljs-number">1</span>, ss = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">2</span>; j * j &lt;= t; j++) &#123;<br>      <span class="hljs-keyword">if</span> (t % j) <span class="hljs-keyword">continue</span>;<br>      num = <span class="hljs-number">0</span>; mul = <span class="hljs-number">1</span>; ss = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> (t % j == <span class="hljs-number">0</span>) t /= j, num ++;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= num; k ++) &#123;<br>        ss = (<span class="hljs-number">0ll</span> + ss + mul) % mod;<br>        mul = <span class="hljs-number">1ll</span> * mul * j % mod;<br>      &#125;<br>      tag[j] = <span class="hljs-number">1ll</span> * tag[j] * ss % mod;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (t &gt; <span class="hljs-number">1</span>) &#123;<br>      ss = <span class="hljs-number">1</span> + t;<br>      tag[t] = (<span class="hljs-number">1ll</span> * tag[t] * ss) % mod;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= M - <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (tag[i] == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-type">int</span> mul = <span class="hljs-number">1ll</span> * (tag[i] - <span class="hljs-number">1</span>) * (i - <span class="hljs-number">1</span>) % mod * <span class="hljs-built_in">power</span>(i, mod - <span class="hljs-number">2</span>) % mod + <span class="hljs-number">1</span>;<br>    mul = (<span class="hljs-number">1ll</span> * mul % mod + mod) % mod;<br>    ans = <span class="hljs-number">1ll</span> * ans * mul % mod;<br>  &#125;<br>  std::cout &lt;&lt; ans &lt;&lt; std::endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>luoguP6965 [NEERC2016]Binary Code 题解</title>
    <link href="/2022/11/06/16749085/"/>
    <url>/2022/11/06/16749085/</url>
    
    <content type="html"><![CDATA[<p><ahref="https://www.luogu.com.cn/problem/P6936"><strong>题目链接</strong></a></p><p>这个题目的流程还是非常顺利的，难度在代码能力。</p><p>看到每个字符串最多只有一个不确定的地方，也就是说明每个字符串最多两种可能。<br />一个非常显然的想法就是 <span class="math inline">\(\text{2-SAT}\)</span> ，直接暴力枚举出所有不能同时存在的组合，这样是 <spanclass="math inline">\(O(n^2)\sim O(n^3)\)</span> 的。</p><p>考虑怎么优化这个 <span class="math inline">\(\text{2-SAT}\)</span>的连边过程。<br />对于每一个字符串，我们把不确定的地方分别放入 <spanclass="math inline">\(1\)</span> 或 <spanclass="math inline">\(0\)</span> 后塞到一个 <spanclass="math inline">\(\text{Trie}\)</span> 树里面。<br />特别的，对于没有不确定位置的字符串我们直接插入到 <spanclass="math inline">\(\text{Trie}\)</span> 具体实现可以看代码。</p><p>容易知道的是，对于一个标记点 <span class="math inline">\(p\)</span>，所有在它子树中的标记点都是不可行的状态，也就是说存在前缀的关系。<br />到这里可以想到直接去遍历它的子树，然后暴力建边，但是仍然不够优秀。<br />我们尝试着把 <span class="math inline">\(\text{Trie}\)</span> 树拉出<span class="math inline">\(\text{dfn}\)</span> 序，那么对于一个节点<span class="math inline">\(i\)</span> ，能够对它造成影响的是<code>dfn[i]~dfn[i+siz[i]-1]</code> 。</p><p>把所有的标记点按照 <span class="math inline">\(\text{dfn}\)</span>序排序，那么知道范围后就可以二分得出一段连边的区间 <spanclass="math inline">\([l,r]\)</span> 。<br />然后可以直接线段树优化建图，直接跑 <spanclass="math inline">\(\text{2-SAT}\)</span> 就可以了。</p><p>但是事实证明，已经做到上述的情况时，想把它卡掉还是比较困难的，直接写暴力连边可以过70+ 个点 。<br />因为不想写线段树优化建图，所以来点玄学的优化：记录每一个字符串出现的次数。<br />当其中的一个字符串出现次数大于 <span class="math inline">\(2\)</span>的时候，直接判断无解。</p><p>实测证明，开了 <span class="math inline">\(O_2\)</span>以后跑点得很快。</p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><br><span class="hljs-keyword">using</span> std::pair;<br><span class="hljs-keyword">using</span> std::string;<br><span class="hljs-keyword">using</span> std::make_pair;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mp make_pair</span><br><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">1e9</span>;<br><span class="hljs-type">const</span> ll infll = <span class="hljs-number">0ll</span> + <span class="hljs-number">1e18</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> n, tot, dfn[<span class="hljs-number">2</span> * N], dfnnum, col[<span class="hljs-number">2</span> * N], sta[N * <span class="hljs-number">2</span>], top, low[N * <span class="hljs-number">2</span>], colnum;<br>string s[N], ss;<br>std::vector &lt;<span class="hljs-type">int</span>&gt; dis[N * <span class="hljs-number">2</span>];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>  <span class="hljs-type">int</span> id, tag, dfn;<br>  <span class="hljs-built_in">Node</span> (<span class="hljs-type">int</span> _id = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _tag = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _dfn = <span class="hljs-number">0</span>) &#123;<br>    id = _id; tag = _tag; dfn = _dfn;<br>  &#125;<br>  <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Node &amp;p, <span class="hljs-type">const</span> Node &amp;q) &#123;<br>    <span class="hljs-keyword">return</span> p.dfn &lt; q.dfn;<br>  &#125;<br>&#125; node[N * <span class="hljs-number">2</span>];<br><br><span class="hljs-keyword">namespace</span> Trie &#123;<br><span class="hljs-type">int</span> son[N][<span class="hljs-number">2</span>], pnum = <span class="hljs-number">1</span>, siz[N], dfn[N], dfnnum;<br>std::vector &lt;pii&gt; mark[N];<br>std::map &lt;pii, <span class="hljs-type">int</span>&gt; point, p;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span>, string, <span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">changePtoDfn</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> tag)</span> </span>&#123;<span class="hljs-keyword">return</span> n * <span class="hljs-number">2</span> - tag;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve_addline</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> now)</span> </span>&#123;<br>  dfn[now] = low[now] = ++dfnnum;<br>  sta[++top] = now;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : dis[now]) &#123;<br>    <span class="hljs-keyword">if</span> (dfn[t] == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">Tarjan</span>(t);<br>      low[now] = std::<span class="hljs-built_in">min</span>(low[now], low[t]);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (col[t] == <span class="hljs-number">0</span>) &#123;<br>      low[now] = std::<span class="hljs-built_in">min</span>(low[now], dfn[t]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (low[now] == dfn[now]) &#123;<br>    col[now] = ++colnum;<br>    <span class="hljs-keyword">while</span> (sta[top] != now) &#123;<br>      col[sta[top]] = colnum;<br>      top --;<br>    &#125;<br>    top --;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-comment">// File(&quot;1&quot;);</span><br>  std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>  std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>), std::cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>  std::cin &gt;&gt; n;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, pos, len; i &lt;= n; i++) &#123;<br>    std::cin &gt;&gt; s[i];<br>    ss = s[i]; pos = <span class="hljs-number">-1</span>; len = ss.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len; j ++)<br>      <span class="hljs-keyword">if</span> (ss[j] == <span class="hljs-string">&#x27;?&#x27;</span>) &#123;pos = j; <span class="hljs-keyword">break</span>;&#125;<br>    <span class="hljs-keyword">if</span> (pos == <span class="hljs-number">-1</span>) &#123;<br>      Trie::<span class="hljs-built_in">insert</span>(i, ss, <span class="hljs-number">0</span>);<br>      Trie::<span class="hljs-built_in">insert</span>(i, ss, <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ss[pos] = <span class="hljs-string">&#x27;0&#x27;</span>; <br>      Trie::<span class="hljs-built_in">insert</span>(i, ss, <span class="hljs-number">0</span>);<br>      ss[pos] = <span class="hljs-string">&#x27;1&#x27;</span>; <br>      Trie::<span class="hljs-built_in">insert</span>(i, ss, <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  Trie::<span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  Trie::<span class="hljs-built_in">changePtoDfn</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    node[++tot] = <span class="hljs-built_in">Node</span>(i, <span class="hljs-number">0</span>, Trie::point[<span class="hljs-built_in">mp</span>(i, <span class="hljs-number">0</span>)]);<br>    node[++tot] = <span class="hljs-built_in">Node</span>(i, <span class="hljs-number">1</span>, Trie::point[<span class="hljs-built_in">mp</span>(i, <span class="hljs-number">1</span>)]);<br>  &#125;<br>  std::<span class="hljs-built_in">sort</span>(node + <span class="hljs-number">1</span>, node + <span class="hljs-number">1</span> + tot);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>    <span class="hljs-built_in">solve_addline</span>(i, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">solve_addline</span>(i, <span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n * <span class="hljs-number">2</span>; i ++)<br>    <span class="hljs-keyword">if</span> (dfn[i] == <span class="hljs-number">0</span>) <span class="hljs-built_in">Tarjan</span>(i);<br>  <span class="hljs-comment">// for (int i = 1; i &lt;= n; i++)</span><br>  <span class="hljs-comment">//   std::cout &lt;&lt; col[get(i, 0)] &lt;&lt; &quot; &quot; &lt;&lt; col[get(i, 1)] &lt;&lt; std::endl;</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <br>    <span class="hljs-keyword">if</span> (col[<span class="hljs-built_in">get</span>(i, <span class="hljs-number">0</span>)] == col[<span class="hljs-built_in">get</span>(i, <span class="hljs-number">1</span>)]) &#123;<br>      std::cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; std::endl;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>  std::cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; std::endl;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, len; i &lt;= n; i++) &#123;<br>    ss = s[i]; len = ss.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> num = col[<span class="hljs-built_in">get</span>(i, <span class="hljs-number">0</span>)] &lt; col[<span class="hljs-built_in">get</span>(i, <span class="hljs-number">1</span>)] ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len; j ++)<br>      <span class="hljs-keyword">if</span> (ss[j] == <span class="hljs-string">&#x27;?&#x27;</span>) ss[j] = num + <span class="hljs-string">&#x27;0&#x27;</span>;<br>    std::cout &lt;&lt; ss &lt;&lt; std::endl;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve_addline</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> tag)</span> </span>&#123;<br>  <span class="hljs-type">int</span> dfn, size, rightnum, leftnum, l, r;<br>  <span class="hljs-type">int</span> L = inf, R = -inf;<br>  size = Trie::siz[Trie::p[<span class="hljs-built_in">mp</span>(id, tag)]];<br>  dfn = Trie::point[<span class="hljs-built_in">mp</span>(id, tag)];<br>  rightnum = dfn + size - <span class="hljs-number">1</span>;<br>  leftnum = dfn;<br>  l = <span class="hljs-number">1</span>, r = tot;<br>  <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>    <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (node[mid].dfn &gt;= leftnum) &#123;<br>      L = std::<span class="hljs-built_in">min</span>(L, mid);<br>      r = mid - <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>  &#125;<br>  l = <span class="hljs-number">1</span>, r = tot;<br>  <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>    <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (node[mid].dfn &lt;= rightnum) &#123;<br>      R = std::<span class="hljs-built_in">max</span>(R, mid);<br>      l = mid + <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-comment">// if (id % 10000 == 0) std::cerr &lt;&lt; id &lt;&lt; std::endl;</span><br>  <span class="hljs-comment">// std::cerr &lt;&lt; L &lt;&lt; &quot; &quot; &lt;&lt; R &lt;&lt; std::endl;</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = L, Id, Tag; i &lt;= R; i ++) &#123;<br>    Id = node[i].id; <br>    Tag = node[i].tag;<br>    <span class="hljs-keyword">if</span> (id == Id &amp;&amp; Tag == tag) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-comment">// std::cout &lt;&lt; id &lt;&lt; &quot; &quot; &lt;&lt; tag &lt;&lt; &quot; &quot; &lt;&lt; Id &lt;&lt; &quot; &quot; &lt;&lt; Tag &lt;&lt; std::endl;</span><br>    dis[<span class="hljs-built_in">get</span>(id, tag)].<span class="hljs-built_in">emplace_back</span>(<span class="hljs-built_in">get</span>(Id, <span class="hljs-number">1</span> - Tag));<br>  &#125;<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> Trie &#123;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> id, string s, <span class="hljs-type">int</span> tag)</span> </span>&#123;<br>  <span class="hljs-type">int</span> len = s.<span class="hljs-built_in">size</span>(), now = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-type">int</span> bit = s[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (son[now][bit] == <span class="hljs-number">0</span>) <br>      son[now][bit] = ++pnum;<br>    now = son[now][bit];<br>  &#125;<br>  mark[now].<span class="hljs-built_in">emplace_back</span>(<span class="hljs-built_in">mp</span>(id, tag));<br>  point[<span class="hljs-built_in">mp</span>(id, tag)] = now;<br>  p[<span class="hljs-built_in">mp</span>(id, tag)] = now;<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> father)</span> </span>&#123;<br>  dfn[now] = ++ dfnnum;<br>  siz[now] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">1</span>; i ++) &#123;<br>    <span class="hljs-keyword">if</span> (son[now][i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfs</span>(son[now][i], now);<br>    siz[now] += siz[son[now][i]];<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">changePtoDfn</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>    point[<span class="hljs-built_in">mp</span>(i, <span class="hljs-number">0</span>)] = dfn[point[<span class="hljs-built_in">mp</span>(i, <span class="hljs-number">0</span>)]];<br>    point[<span class="hljs-built_in">mp</span>(i, <span class="hljs-number">1</span>)] = dfn[point[<span class="hljs-built_in">mp</span>(i, <span class="hljs-number">1</span>)]];<br>  &#125;<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></details>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>luoguP7028 [NWRRC2017]Joker 题解</title>
    <link href="/2022/11/06/16749144/"/>
    <url>/2022/11/06/16749144/</url>
    
    <content type="html"><![CDATA[<p><ahref="https://www.luogu.com.cn/problem/P7028"><strong>题目链接</strong></a></p><p>一道牛逼的题目。</p><p>上来先来一波推式子： <span class="math display">\[\begin{split}S_n&amp;=\sum_{i=1}^n w_i\\&amp;=\sum_{i=1}^n\begin{cases}\dfrac{a_i}{P}&amp;a_i&gt;0\\\dfrac{a_i}{|N|}&amp;a_i&lt;0\end{cases}\\&amp;=\frac{1}{P}\sum_{i=1}^na_i\[a_i&gt;0]+\frac{1}{|N|}\sum_{i=1}^na_i\ [a_i&lt;0]\end{split}\]</span> 然后我们令 <span class="math display">\[\begin{split}P_i&amp;=\sum_{j=1}^ia_j\ [a_j&gt;0]\\N_i&amp;=-\sum_{j=1}^ia_j\ [a_j&lt;0]\end{split}\]</span> 直接代入上式，可以得到： <span class="math display">\[\begin{split}S_i&amp;=\frac{P_i}{P_n}-\frac{N_i}{N_n}\\&amp;=\frac{1}{P_nN_n}\times(P_iN_n-N_iP_n)\end{split}\]</span> 因为 <span class="math inline">\(\frac{1}{P_nN_n}\)</span>是固定的，所以现在的问题是最大化 <spanclass="math inline">\(P_iN_n-N_iP_n\)</span> 。 发现 <spanclass="math inline">\(P_iN_n-N_iP_n\)</span>的形式非常符合向量的叉积运算，所以上面的这个可以看成是 <spanclass="math inline">\((P_i,\ N_i)\times(P_n,\ N_n)\)</span> 。</p><p>认真思考后发现，对于 <span class="math inline">\(S_i\)</span>大小可能有贡献的点一定是在一个右下凸壳上，证明略。<br />那么现在的问题是：对于一个不断更新的点集，求这个点集的下凸壳。</p><p>本人太菜，不会 <span class="math inline">\(poly\)</span>的做法，所以退而求其次采用分块维护下凸壳。<br /></p><p>预处理的地方非常简单，就是对于每个块分别求出下凸壳。</p><p>对于修改的操作，我们发现所谓的区间修改也就是后缀的修改，散块直接重构，整块打标记。<br />同时还有一种不需要打标记的方法，发现向量叉积运算有分配律，所以可以直接维护一个类似前缀和的东西，这样可以不用打标记。<br />具体的方法是在查询的时候累计之前块最后一个点的答案。</p><p>查询操作对于每一个块找到最有可能成为答案的位置，然后所有的块进行比较。<br />对于一个块我们怎么找到一个最优秀的点，方法是这样的：<br />发现对于一个下凸壳，斜率是不断递增的，所以可以利用这样的性质直接二分即可。</p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><br><span class="hljs-keyword">using</span> std::pair;<br><span class="hljs-keyword">using</span> std::make_pair;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mp make_pair</span><br><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">1e9</span>;<br><span class="hljs-type">const</span> ll infll = <span class="hljs-number">0ll</span> + <span class="hljs-number">1e18</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> blen = <span class="hljs-number">250</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><br><span class="hljs-type">int</span> n, q, a[N], s1, s2;<br><span class="hljs-type">int</span> st[N], en[N], bel[N], bnum, sta[blen], tp;<br><span class="hljs-type">int</span> tu[blen][blen], top[blen];<br><span class="hljs-comment">//s1 -&gt; +  s2 -&gt; -</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-type">int</span> x, y;<br>  <span class="hljs-built_in">Point</span> (<span class="hljs-type">int</span> _x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _y = <span class="hljs-number">0</span>) &#123;x = _x; y = _y;&#125;<br>  <span class="hljs-keyword">friend</span> Point <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Point &amp;p, <span class="hljs-type">const</span> Point &amp;q) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(p.x + q.x, p.y + q.y);<br>  &#125;<br>  <span class="hljs-keyword">friend</span> Point <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Point &amp;p, <span class="hljs-type">const</span> Point &amp;q) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(p.x - q.x, p.y - q.y);<br>  &#125;<br>  <span class="hljs-keyword">friend</span> <span class="hljs-type">int</span> <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Point &amp;p, <span class="hljs-type">const</span> Point &amp;q) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1ll</span> * p.x * q.y - <span class="hljs-number">1ll</span> * p.y * q.x;<br>  &#125;<br>&#125; p[N], A;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">cross</span><span class="hljs-params">(Point a, Point b, Point c)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> (a - b) * (c - b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Build</span><span class="hljs-params">()</span> </span>&#123;<br>  Point now = <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= bnum; i ++) &#123;<br>    tp = <span class="hljs-number">0</span>;<br>    now = <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = st[i]; j &lt;= en[i]; j ++) &#123;<br>      <span class="hljs-keyword">if</span> (a[j] &gt; <span class="hljs-number">0</span>) now = now + <span class="hljs-built_in">Point</span>(a[j], <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">else</span> now = now + <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, -a[j]);<br>      p[j] = now;<br>      <span class="hljs-keyword">while</span> (tp &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">cross</span>(p[j], p[sta[tp - <span class="hljs-number">1</span>]], p[sta[tp]]) &gt;= <span class="hljs-number">0</span>) tp --;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>      &#125;<br>      sta[++tp] = j;<br>    &#125;<br>    top[i] = tp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= tp; j ++)<br>      tu[i][j] = sta[j];<br>  &#125;<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">rebuild</span><span class="hljs-params">(<span class="hljs-type">int</span> bl)</span> </span>&#123;<br>  tp = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = st[bl]; i &lt;= en[bl]; i ++) &#123;<br>    <span class="hljs-keyword">while</span> (tp &gt; <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">cross</span>(p[i], p[sta[tp - <span class="hljs-number">1</span>]], p[sta[tp]]) &gt;= <span class="hljs-number">0</span>) tp --;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    sta[++tp] = i;<br>  &#125;<br>  top[bl] = tp;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= tp; i ++)<br>    tu[bl][i] = sta[i];<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> pii <span class="hljs-title">getans</span><span class="hljs-params">(<span class="hljs-type">int</span> bl)</span> </span>&#123;<br>  <span class="hljs-type">int</span> left = <span class="hljs-number">1</span>, right = top[bl], ret = right;<br>  <span class="hljs-type">int</span> *tt = tu[bl];<br>  <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>    <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> ((p[tt[mid]] - p[tt[mid + <span class="hljs-number">1</span>]]) * A &gt;= <span class="hljs-number">0</span>) &#123;<br>      right = mid - <span class="hljs-number">1</span>;<br>      ret = std::<span class="hljs-built_in">min</span>(ret, mid);<br>    &#125; <span class="hljs-keyword">else</span> left = mid + <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">mp</span>(tt[ret], p[tt[ret]] * A);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> ans = -inf, ansid = inf, ss = <span class="hljs-number">0</span>;<br>  A = <span class="hljs-built_in">Point</span>(s1, s2);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= bnum; i ++) &#123;<br>    pii chose = <span class="hljs-built_in">getans</span>(i);<br>    <span class="hljs-keyword">if</span> (ss + chose.second &gt; ans) &#123;<br>      ans = ss + chose.second;<br>      ansid = chose.first;<br>    &#125;<br>    ss = ss + p[en[i]] * A;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ansid;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>  Point now = <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = st[bel[id]]; i &lt;= en[bel[id]]; i ++) &#123;<br>    <span class="hljs-keyword">if</span> (a[i] &gt; <span class="hljs-number">0</span>) now = now + <span class="hljs-built_in">Point</span>(a[i], <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">else</span> now = now + <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, -a[i]);<br>    p[i] = now;<br>  &#125;<br>  <span class="hljs-built_in">rebuild</span>(bel[id]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(q);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">read</span>(a[i]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    s1 += (a[i] &gt; <span class="hljs-number">0</span>) ? a[i] : <span class="hljs-number">0</span>;<br>    s2 += (a[i] &lt; <span class="hljs-number">0</span>) ? -a[i] : <span class="hljs-number">0</span>;<br>  &#125;<br>  bnum = (n + blen - <span class="hljs-number">1</span>) / blen;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= bnum; i ++) &#123;<br>    st[i] = (i - <span class="hljs-number">1</span>) * blen + <span class="hljs-number">1</span>;<br>    en[i] = i * blen;<br>  &#125;<br>  en[bnum] = n;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= bnum; i ++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = st[i]; j &lt;= en[i]; j ++) bel[j] = i;<br>  <span class="hljs-built_in">Build</span>(); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>());<br>  <span class="hljs-comment">// for (int i = 1; i &lt;= top[1]; i ++) printf(&quot;-&gt; %d&quot;, tu[1][i]);</span><br>  <span class="hljs-comment">// printf(&quot;\n&quot;);</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> test = <span class="hljs-number">1</span>, id, x; test &lt;= q; test ++) &#123;<br>    <span class="hljs-built_in">read</span>(id), <span class="hljs-built_in">read</span>(x);<br>    s1 -= (a[id] &gt; <span class="hljs-number">0</span>) ? a[id] : <span class="hljs-number">0</span>;<br>    s2 -= (a[id] &lt; <span class="hljs-number">0</span>) ? -a[id] : <span class="hljs-number">0</span>;<br>    s1 += (x &gt; <span class="hljs-number">0</span>) ? x : <span class="hljs-number">0</span>; s2 += (x &lt; <span class="hljs-number">0</span>) ? -x : <span class="hljs-number">0</span>;<br>    a[id] = x;<br>    <span class="hljs-built_in">modify</span>(id, x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>());<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span> </span>&#123;<br>  T s = <span class="hljs-number">0</span>, t = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) &#123;t = (c == <span class="hljs-string">&#x27;-&#x27;</span>) ? <span class="hljs-number">-1</span> : t; c = <span class="hljs-built_in">getchar</span>();&#125;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) s = s * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>  a = s * t;<br>&#125;<br></code></pre></td></tr></table></figure></details>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础组合数练习题</title>
    <link href="/2022/11/06/ji_chu_zu_he_lian_xi_ti/"/>
    <url>/2022/11/06/ji_chu_zu_he_lian_xi_ti/</url>
    
    <content type="html"><![CDATA[<p>题目很简单，求： <span class="math display">\[Ans=\frac{ \sum\limits_{ i=m }^n\binom{i-1} {m-1}\times i^k} {\binom{n}{m} }\]</span> 其中，给定 <span class="math inline">\(n\)</span> ，<spanclass="math inline">\(m\)</span> 和 <spanclass="math inline">\(k\)</span> 。<br />满足 <span class="math inline">\(m\leq n \leq 10^7 , k\leq 5000\)</span>，数据组数不超过 <span class="math inline">\(5000\)</span> 。</p><p>前置知识：<br /></p><ul><li><p><spanclass="math inline">\(i^k=\sum\limits_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\timesi^{\overline{j} }\)</span></p></li><li><p><ahref="https://www.cnblogs.com/black-swallow/p/16068322.html#5112039">组合数公式全家桶</a></p></li></ul><p>容易发现 <span class="math inline">\(\binom{n} {m}\)</span>是一个定值，所以只需要化简分子。</p><p><span class="math display">\[\begin{split}S&amp;=\sum\limits_{i=m}^n\binom{i-1} {m-1}\times i^k\\&amp;=\sum\limits_{i=m}^n\binom{i-1} {m-1}\times\sum\limits_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\timesi^{\overline{j} }\\&amp;=\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\sum_{i=m}^n\binom{i-1}{m-1}\times i^{\overline{j} }\\&amp;=\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\sum_{i=m}^n\frac{(i-1)!} {(m-1)!(i-m)!}\times\frac{(i + j - 1)!} {(i-1)!}\\&amp;=\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\sum_{i=m}^n\frac{(i + j - 1)!} {(m-1)!(i-m)!}\\\end{split}\]</span> 我们设 <span class="math inline">\(t= i - m\)</span> ，并用<span class="math inline">\(t\)</span> 代替式子中的 <spanclass="math inline">\(i\)</span> 。 <span class="math display">\[\begin{split}S &amp;=\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\sum_{i=m}^n\frac{(i + j - 1)!} {(m-1)!(i-m)!}\\&amp;=\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\sum_{i=0}^{n- m}\frac{(t + m + j - 1)!} {(m-1)!\times t!}\\&amp;=\frac{1}{(m-1)!}\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\sum_{i=0}^{n- m}\frac{(t + m + j - 1)!} {t!}\\&amp;=\frac{1}{(m-1)!}\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\sum_{i=0}^{n- m}\frac{(t + m + j - 1)!} {t!\times (m+j-1)!}\times(m+j-1)!\\&amp;= \frac{1}{(m-1)!}\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}(m+j-1)!\sum_{i=0}^{n- m}\frac{(t + m + j - 1)!} {t!\times (m+j-1)!}\\&amp;=\frac{1}{(m-1)!}\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}(m+j-1)!\sum_{i=0}^{n- m}\binom{t+m+j-1} {m+j-1}\\&amp;=\frac{1}{(m-1)!}\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}(m+j-1)!\binom{m+j-1+n-m+1}{n-m}\\&amp;=\frac{1}{(m-1)!}\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}(m+j-1)!\binom{n+ j} {n-m}\\\end{split}\]</span></p><p>发现只有一个和 <span class="math inline">\(i\)</span>有关的组合数，其他的可以直接预处理。<br />每次操作的复杂度是 <span class="math inline">\(O(k)\)</span> ，<spanclass="math inline">\(T\)</span> 组数据的话就是 <spanclass="math inline">\(O(Tk)\)</span> 。</p><p>代码小学难度。</p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>各种模板的集合</title>
    <link href="/2022/11/06/mu_ban/"/>
    <url>/2022/11/06/mu_ban/</url>
    
    <content type="html"><![CDATA[<h2 id="fastmod">Fastmod</h2><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__uint128_t</span> L;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">FastMod</span> &#123;<br>  ull b, m;<br>  <span class="hljs-built_in">FastMod</span>() &#123;&#125;<br>  <span class="hljs-built_in">FastMod</span>(ull b) : <span class="hljs-built_in">b</span>(b), <span class="hljs-built_in">m</span>(<span class="hljs-built_in">ull</span>((<span class="hljs-built_in">L</span>(<span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">64</span>) / b)) &#123;&#125;<br>  <span class="hljs-function">ull <span class="hljs-title">getmod</span><span class="hljs-params">(ull a)</span> </span>&#123;<br>    ull q = (ull)((<span class="hljs-built_in">L</span>(m) * a) &gt;&gt; <span class="hljs-number">64</span>);<br>    ull r = a - q * b;<br>    <span class="hljs-keyword">return</span> r &gt;= b ? r - b : r;<br>  &#125;<br>&#125; Mod;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> getmod Mod.getmod</span><br><br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  std::cin &gt;&gt; n;<br>  Mod = <span class="hljs-built_in">FastMod</span>(<span class="hljs-number">114514</span>);<br>  std::cout &lt;&lt; <span class="hljs-built_in">getmod</span>(n) &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure></details><h2 id="lct">LCT</h2><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">namespace</span> LCT &#123;<br><span class="hljs-type">int</span> f[N], c[N][<span class="hljs-number">2</span>], s[N], st[N];<br><span class="hljs-type">bool</span> r[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">nroot</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushr</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">access</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">makeroot</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">findroot</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>; <span class="hljs-comment">// split(x, y) 表示取出 x,y 的路径</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">link</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">cut</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br>&#125;<br><span class="hljs-keyword">using</span> LCT::s;<br><br><span class="hljs-keyword">namespace</span> LCT &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rc c[x][1]</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lc c[x][0]</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">nroot</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> c[f[x]][<span class="hljs-number">0</span>] == x || c[f[x]][<span class="hljs-number">1</span>] == x; &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; s[x] = s[lc] + s[rc]+????; &#125; <span class="hljs-comment">// s 数组是记录结果。</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushr</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<span class="hljs-type">int</span> t = lc; lc = rc; rc = t; r[x] ^= <span class="hljs-number">1</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (r[x]) &#123;<br>    <span class="hljs-keyword">if</span> (lc) <span class="hljs-built_in">pushr</span>(lc);<br>    <span class="hljs-keyword">if</span> (rc) <span class="hljs-built_in">pushr</span>(rc);<br>    r[x] = <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> y = f[x], z = f[y], k = c[y][<span class="hljs-number">1</span>] == x, w = c[x][!k];<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">nroot</span>(y)) c[z][c[z][<span class="hljs-number">1</span>] == y] = x; c[x][!k] = y; c[y][k] = w;<br>  <span class="hljs-keyword">if</span> (w)f[w] = y; f[y] = x; f[x] = z;<br>  <span class="hljs-built_in">pushup</span>(y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> y = x, z = <span class="hljs-number">0</span>;<br>  st[++z] = y; <br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">nroot</span>(y)) st[++z] = y = f[y];<br>  <span class="hljs-keyword">while</span> (z) <span class="hljs-built_in">pushdown</span>(st[z--]);<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">nroot</span>(x)) &#123;<br>    y = f[x]; z = f[y];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">nroot</span>(y)) <span class="hljs-built_in">rotate</span>((c[y][<span class="hljs-number">0</span>] == x) ^ (c[z][<span class="hljs-number">0</span>] == y) ? x : y);<br>    <span class="hljs-built_in">rotate</span>(x);<br>  &#125;<br>  <span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">access</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = <span class="hljs-number">0</span>; x; x = f[y = x])<br>    <span class="hljs-built_in">splay</span>(x), rc = y, <span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">makeroot</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-built_in">access</span>(x); <span class="hljs-built_in">splay</span>(x); <span class="hljs-built_in">pushr</span>(x); &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">findroot</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-built_in">access</span>(x); <span class="hljs-built_in">splay</span>(x);<br>  <span class="hljs-keyword">while</span> (lc) <span class="hljs-built_in">pushdown</span>(x), x = lc;<br>  <span class="hljs-built_in">splay</span>(x);<br>  <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123; <span class="hljs-built_in">makeroot</span>(x); <span class="hljs-built_in">access</span>(y); <span class="hljs-built_in">splay</span>(y); &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">link</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-built_in">makeroot</span>(x);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">findroot</span>(y) != x)f[x] = y;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">cut</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-built_in">makeroot</span>(x);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">findroot</span>(y) == x &amp;&amp; f[y] == x &amp;&amp; !c[y][<span class="hljs-number">0</span>]) &#123;<br>    f[y] = c[x][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">pushup</span>(x);<br>  &#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></details><h2 id="fhq-treap">fhq treap</h2><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">namespace</span> Fhq_Treap &#123;<br><br><span class="hljs-type">int</span> ch[N][<span class="hljs-number">3</span>], siz[N], val[N], cnt, rnd[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">newnode</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">Kth</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> k)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> &amp;x, <span class="hljs-type">int</span> &amp;y)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> A, <span class="hljs-type">int</span> B)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_rank</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_Kth</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_pre</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_nxt</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br>&#125;<br><br><br><span class="hljs-keyword">namespace</span> Fhq_Treap &#123;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; siz[x] = <span class="hljs-number">1</span> + siz[ch[x][<span class="hljs-number">0</span>]] + siz[ch[x][<span class="hljs-number">1</span>]]; &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">newnode</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  val[++cnt] = x; siz[cnt] = <span class="hljs-number">1</span>;<br>  rnd[cnt] = <span class="hljs-built_in">rand</span>();<br>  <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">Kth</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">if</span> (k &lt;= siz[ch[now][<span class="hljs-number">0</span>]])now = ch[now][<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == siz[ch[now][<span class="hljs-number">0</span>]] + <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> now;<br>    <span class="hljs-keyword">else</span> k -= siz[ch[now][<span class="hljs-number">0</span>]] + <span class="hljs-number">1</span>, now = ch[now][<span class="hljs-number">1</span>];<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> &amp;x, <span class="hljs-type">int</span> &amp;y)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (now == <span class="hljs-number">0</span>) &#123;<br>    x = y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> ;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (val[now] &lt;= k) &#123;<br>    x = now; <span class="hljs-built_in">split</span>(ch[now][<span class="hljs-number">1</span>], k, ch[now][<span class="hljs-number">1</span>], y);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    y = now; <span class="hljs-built_in">split</span>(ch[now][<span class="hljs-number">0</span>], k, x, ch[now][<span class="hljs-number">0</span>]);<br>  &#125;<br>  <span class="hljs-built_in">update</span>(now);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> A, <span class="hljs-type">int</span> B)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (!A || !B)<span class="hljs-keyword">return</span> A + B;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rnd[A] &lt; rnd[B]) &#123;<br>    ch[A][<span class="hljs-number">1</span>] = <span class="hljs-built_in">merge</span>(ch[A][<span class="hljs-number">1</span>], B);<br>    <span class="hljs-built_in">update</span>(A); <span class="hljs-keyword">return</span> A;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    ch[B][<span class="hljs-number">0</span>] = <span class="hljs-built_in">merge</span>(A, ch[B][<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">update</span>(B); <span class="hljs-keyword">return</span> B;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>  <span class="hljs-built_in">split</span>(root, a, x, y);<br>  root = <span class="hljs-built_in">merge</span>(<span class="hljs-built_in">merge</span>(x, <span class="hljs-built_in">newnode</span>(a)), y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>  <span class="hljs-built_in">split</span>(root, a, x, z);<br>  <span class="hljs-built_in">split</span>(x, a - <span class="hljs-number">1</span>, x, y);<br>  y = <span class="hljs-built_in">merge</span>(ch[y][<span class="hljs-number">0</span>], ch[y][<span class="hljs-number">1</span>]);<br>  root = <span class="hljs-built_in">merge</span>(<span class="hljs-built_in">merge</span>(x, y), z);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_rank</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>  <span class="hljs-built_in">split</span>(root, a - <span class="hljs-number">1</span>, x, y);<br>  <span class="hljs-type">int</span> ret = siz[x] + <span class="hljs-number">1</span>;<br>  root = <span class="hljs-built_in">merge</span>(x, y);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_Kth</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123; <span class="hljs-keyword">return</span> val[<span class="hljs-built_in">Kth</span>(root, a)]; &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_pre</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>  <span class="hljs-built_in">split</span>(root, a - <span class="hljs-number">1</span>, x, y);<br>  <span class="hljs-type">int</span> ret = val[<span class="hljs-built_in">Kth</span>(x, siz[x])];<br>  root = <span class="hljs-built_in">merge</span>(x, y);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_nxt</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>  <span class="hljs-built_in">split</span>(root, a, x, y);<br>  <span class="hljs-type">int</span> ret = val[<span class="hljs-built_in">Kth</span>(y, <span class="hljs-number">1</span>)];<br>  root = <span class="hljs-built_in">merge</span>(x, y);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></details><h2 id="拉格朗日插值法">拉格朗日插值法</h2><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y, <span class="hljs-type">int</span> xi)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>  s1[<span class="hljs-number">0</span>] = (xi - x[<span class="hljs-number">0</span>]) % mod, s2[n + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <br>    s1[i] = <span class="hljs-number">1ll</span> * s1[i - <span class="hljs-number">1</span>] * (xi - x[i]) % mod;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">0</span>; i--) <br>    s2[i] = <span class="hljs-number">1ll</span> * s2[i + <span class="hljs-number">1</span>] * (xi - x[i]) % mod;<br>  ifac[<span class="hljs-number">0</span>] = ifac[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) <br>    ifac[i] = <span class="hljs-number">-1ll</span> * mod / i * ifac[mod % i] % mod;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) <br>    ifac[i] = <span class="hljs-number">1ll</span> * ifac[i] * ifac[i - <span class="hljs-number">1</span>] % mod;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>    (ans += <span class="hljs-number">1ll</span> * y[i] * (i == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : s1[i - <span class="hljs-number">1</span>]) % mod * s2[i + <span class="hljs-number">1</span>] % mod<br>            * ifac[i] % mod * (((n - i) &amp; <span class="hljs-number">1</span>) ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>) * ifac[n - i] % mod) %= mod;<br>  &#125;<br>  <span class="hljs-keyword">return</span> (ans + mod) % mod;<br>&#125;<br><br></code></pre></td></tr></table></figure></details><h2 id="mt19937-随机数">mt19937 随机数</h2></details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">std::mt19937 <span class="hljs-title">seed</span><span class="hljs-params">(<span class="hljs-number">114514</span>)</span></span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function">T <span class="hljs-title">rand</span><span class="hljs-params">(T l, T r)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">uniform_int_distribution</span>&lt;<span class="hljs-type">int</span>&gt;(l, r)(seed);<br>&#125;<br></code></pre></td></tr></table></figure></details><h2 id="最新-ccf-各类赛事-latex-模板">最新 CCF 各类赛事 <spanclass="math inline">\(LaTex\)</span> 模板</h2><details><summary>点击查看代码</summary><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-keyword">\documentclass</span>[UTF8,a4paper]&#123;ctexart&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;geometry&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;multicol&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;multirow&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;tabu&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;xeCJK&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;CJK&#125;     <br><span class="hljs-keyword">\usepackage</span>&#123;xeCJKfntef&#125;                     <br><span class="hljs-keyword">\usepackage</span>&#123;fancyhdr&#125;               <br><span class="hljs-keyword">\usepackage</span>&#123;graphicx&#125;                 <br><span class="hljs-keyword">\usepackage</span>&#123;lastpage&#125;    <br><span class="hljs-keyword">\usepackage</span>&#123;listings&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;xcolor&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;fontspec&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;layout&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;titletoc&#125;<br><span class="hljs-keyword">\usepackage</span>[colorlinks,linkcolor=blue]&#123;hyperref&#125; <br><span class="hljs-keyword">\newcommand</span><span class="hljs-keyword">\filename</span>[1]&#123;<span class="hljs-keyword">\emph</span>&#123;<span class="hljs-keyword">\textbf</span>&#123;<span class="hljs-params">#1</span>&#125;&#125;&#125;<br><span class="hljs-keyword">\newcommand</span><span class="hljs-keyword">\udot</span>[1]&#123;<span class="hljs-keyword">\textbf</span>&#123;<span class="hljs-keyword">\color</span>&#123;black&#125;<span class="hljs-keyword">\CJKunderdot</span>&#123;<span class="hljs-keyword">\color</span>&#123;black&#125;<span class="hljs-params">#1</span>&#125;&#125;&#125; <span class="hljs-comment">% 第一个 color 调整加粗字体下着重号的颜色</span><br><span class="hljs-keyword">\newcommand</span><span class="hljs-keyword">\newprob</span>[2]&#123;<br>    <span class="hljs-keyword">\newpage</span><br>    <span class="hljs-keyword">\pagestyle</span>&#123;fancy&#125;<br>    <span class="hljs-keyword">\lhead</span>&#123;ChineseContestName&#125; <span class="hljs-keyword">\rhead</span>&#123;<span class="hljs-params">#1</span>（<span class="hljs-params">#2</span>）&#125;<br>    <span class="hljs-keyword">\cfoot</span>&#123;第 <span class="hljs-keyword">\thepage</span> 页 <span class="hljs-keyword">\qquad</span> 共 <span class="hljs-keyword">\pageref</span>&#123;LastPage&#125; 页&#125;<br>    <span class="hljs-keyword">\phantomsection</span><br>    <span class="hljs-keyword">\addcontentsline</span>&#123;toc&#125;&#123;section&#125;&#123;<span class="hljs-params">#1</span>（<span class="hljs-params">#2</span>）&#125;<br>    <span class="hljs-keyword">\begin</span>&#123;center&#125;<br>        <span class="hljs-keyword">\LARGE</span><br>        <span class="hljs-keyword">\textbf</span>&#123;<span class="hljs-params">#1</span>&#125;（<span class="hljs-params">#2</span>）<br>    <span class="hljs-keyword">\end</span>&#123;center&#125;<br>    <span class="hljs-keyword">\large</span><br>    <span class="hljs-comment">%</span><br>    <span class="hljs-keyword">\textbf</span>&#123;【题目描述】&#125;<br>    <span class="hljs-keyword">\phantomsection</span><br>    <span class="hljs-keyword">\addcontentsline</span>&#123;toc&#125;&#123;subsection&#125;&#123;【题目描述】&#125;<br>&#125;<br><span class="hljs-keyword">\newcommand</span><span class="hljs-keyword">\para</span>[1]&#123;<br>    <span class="hljs-built_in">$</span> <span class="hljs-built_in">$</span> <span class="hljs-keyword">\\</span> <br>    <span class="hljs-keyword">\textbf</span>&#123;【<span class="hljs-params">#1</span>】&#125;<br>    <span class="hljs-keyword">\phantomsection</span><br>    <span class="hljs-keyword">\addcontentsline</span>&#123;toc&#125;&#123;subsection&#125;&#123;【<span class="hljs-params">#1</span>】&#125;<br>&#125;<br><span class="hljs-keyword">\newcommand</span><span class="hljs-keyword">\sample</span>[2]&#123;<br>    <span class="hljs-built_in">$</span> <span class="hljs-built_in">$</span> <span class="hljs-keyword">\\</span> <br>    <span class="hljs-keyword">\textbf</span>&#123;【样例&#125; <span class="hljs-params">#1</span><span class="hljs-keyword">\textbf</span>&#123;<span class="hljs-params">#2</span>】&#125;<br>    <span class="hljs-keyword">\phantomsection</span><br>    <span class="hljs-keyword">\addcontentsline</span>&#123;toc&#125;&#123;subsection&#125;&#123;【样例 <span class="hljs-params">#1</span> <span class="hljs-params">#2</span>】&#125;<br>&#125;<br><span class="hljs-keyword">\lstset</span>&#123;<br>    basicstyle=&#123;      <br>        <span class="hljs-keyword">\color</span>&#123;black&#125;<br>        <span class="hljs-keyword">\fontspec</span>&#123;Consolas&#125;<br>    &#125;,<br>    keywordstyle=&#123;<br>        <span class="hljs-keyword">\color</span>&#123;blue&#125;<br>        <span class="hljs-keyword">\fontspec</span>&#123;Consolas&#125;<br>    &#125;,<br>    numberstyle=&#123;<br>        <span class="hljs-keyword">\color</span>&#123;black&#125;<br>        <span class="hljs-keyword">\textbf</span><br>    &#125;,<br>    rulecolor=<span class="hljs-keyword">\color</span>&#123;blue&#125;,<br>    numbers=left,                               <br>    frame=single,                            <br>    frameround=tttt,<br>    morekeywords=&#123;Sample, Input, Output&#125;,   <span class="hljs-comment">% 可以手动添加关键字</span><br>&#125;<br><span class="hljs-keyword">\setmonofont</span>&#123;Consolas&#125;<br><span class="hljs-keyword">\geometry</span>&#123;left=2.52cm,right=2.52cm,top=2.5cm,bottom=2.5cm&#125;<br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br>    <span class="hljs-keyword">\pagestyle</span>&#123;fancy&#125;<br>    <span class="hljs-keyword">\lhead</span>&#123;ChineseContestName&#125; <span class="hljs-keyword">\rhead</span>&#123;&#125;<br>    <span class="hljs-keyword">\cfoot</span>&#123;第 <span class="hljs-keyword">\thepage</span> 页 <span class="hljs-keyword">\qquad</span> 共 <span class="hljs-keyword">\pageref</span>&#123;LastPage&#125; <span class="hljs-keyword">\color</span>&#123;black&#125; 页&#125;<br>    <span class="hljs-keyword">\thispagestyle</span>&#123;empty&#125;<br>    <span class="hljs-keyword">\addcontentsline</span>&#123;toc&#125;&#123;section&#125;&#123;注意事项&#125;<br>    <span class="hljs-keyword">\begin</span>&#123;center&#125;<br>        <span class="hljs-keyword">\Huge</span><br>        <span class="hljs-keyword">\textbf</span>&#123;ChineseContestName&#125;<br>        <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\Huge</span> <br>        EnglishContestName<br>        <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\huge</span><br>        <span class="hljs-keyword">\textit</span>&#123;SecondTitle&#125;<br>        <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\Large</span><br>        <span class="hljs-keyword">\textbf</span>&#123;时间：&#125;2021<span class="hljs-keyword">\textbf</span>&#123;年&#125;1<span class="hljs-keyword">\textbf</span>&#123;月&#125;1<span class="hljs-keyword">\textbf</span>&#123;日&#125; 08:30 <span class="hljs-built_in">$</span><span class="hljs-keyword">\sim</span><span class="hljs-built_in">$</span> 1:00<br>        <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\end</span>&#123;center&#125;<br>    <span class="hljs-keyword">\large</span><br>    <span class="hljs-keyword">\begin</span>&#123;center&#125;<br>        <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|p&#123;3.1cm&#125;|p&#123;2.5cm&#125;|p&#123;2.5cm&#125;|p&#123;2.5cm&#125;|p&#123;2.5cm&#125;|&#125;<br>        <span class="hljs-keyword">\hline</span><br>        题目名称 <span class="hljs-built_in">&amp;</span> First <span class="hljs-built_in">&amp;</span> Second <span class="hljs-built_in">&amp;</span> Third <span class="hljs-built_in">&amp;</span> Forth <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        题目类型 <span class="hljs-built_in">&amp;</span> 传统型 <span class="hljs-built_in">&amp;</span> 传统型 <span class="hljs-built_in">&amp;</span> 传统型 <span class="hljs-built_in">&amp;</span> 传统型 <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        目录 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;first&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;second&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;third&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;fourth&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        可执行文件名 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;first&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;second&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;third&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;fourth&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        输入文件名 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;first.in&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;second.in&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;third.in&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;fourth.in&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        输出文件名 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;first.out&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;second.out&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;third.out&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;fourth.out&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        每个测试点时限 <span class="hljs-built_in">&amp;</span> 1.0 秒 <span class="hljs-built_in">&amp;</span> 1.0 秒 <span class="hljs-built_in">&amp;</span> 1.0 秒 <span class="hljs-built_in">&amp;</span> 1.0 秒 <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        内存限制 <span class="hljs-built_in">&amp;</span> 256 MB <span class="hljs-built_in">&amp;</span> 256 MB <span class="hljs-built_in">&amp;</span> 256 MB <span class="hljs-built_in">&amp;</span> 256 MB <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        测试点数目 <span class="hljs-built_in">&amp;</span> 5 <span class="hljs-built_in">&amp;</span> 5 <span class="hljs-built_in">&amp;</span> 5 <span class="hljs-built_in">&amp;</span> 5 <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        测试点是否等分 <span class="hljs-built_in">&amp;</span> 是 <span class="hljs-built_in">&amp;</span> 是 <span class="hljs-built_in">&amp;</span> 是 <span class="hljs-built_in">&amp;</span> 是 <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>    <span class="hljs-keyword">\end</span>&#123;center&#125;<br>提交源程序文件名<br>    <span class="hljs-keyword">\begin</span>&#123;center&#125;<br>        <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|p&#123;3.1cm&#125;|p&#123;2.5cm&#125;|p&#123;2.5cm&#125;|p&#123;2.5cm&#125;|p&#123;2.5cm&#125;|&#125;<br>        <span class="hljs-keyword">\hline</span><br>        对于 C++ <span class="hljs-keyword">\ </span> 语言 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;first.cpp&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;second.cpp&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;third.cpp&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;fourth.cpp&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        对于 C <span class="hljs-keyword">\qquad</span> 语言 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;first.c&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;second.c&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;third.c&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;fourth.c&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        对于 Pascal 语言 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;first.pas&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;second.pas&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;third.pas&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;fourth.pas&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>    <span class="hljs-keyword">\end</span>&#123;center&#125;<br>编译选项<br>    <span class="hljs-keyword">\begin</span>&#123;center&#125;<br>        <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|p&#123;3.1cm&#125;|p&#123;11.2cm&#125;&lt;<span class="hljs-keyword">\centering</span>|&#125;<br>        <span class="hljs-keyword">\hline</span><br>        对于 C++ <span class="hljs-keyword">\ </span>语言 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;-lm&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        对于 C <span class="hljs-keyword">\qquad</span> 语言 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;-lm&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        对于 Pascal 语言 <span class="hljs-built_in">&amp;</span>  <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>    <span class="hljs-keyword">\end</span>&#123;center&#125;<br>    <span class="hljs-keyword">\textbf</span>&#123;注意事项与提醒（请选手务必仔细阅读）&#125; <br>    <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\indent</span><br>    1. 文件名（程序名和输入输出文件名）必须使用英文小写。<span class="hljs-keyword">\par</span><br>    2. C/C++ 中函数 main() 的返回值类型必须是 int，程序正常结束时的返回值必须是 0。<span class="hljs-keyword">\par</span><br>    3. 提交的程序代码文件的放置位置请参照具体要求。<span class="hljs-keyword">\par</span><br>    4. 因违反以上三点而出现的错误或问题，申诉时一律不予受理。<span class="hljs-keyword">\par</span><br>    5. 若无特殊说明，结果的比较方式为全文比较（过滤行末空格及文末回车）。<span class="hljs-keyword">\par</span><br>    6. 程序可使用的栈内存空间限制与题目的内存限制一致。<span class="hljs-keyword">\par</span><br>    7. 只提供 Windows 格式附加样例文件。<span class="hljs-keyword">\par</span><br>    8. 评测在 Windows 下进行，各语言的编译器版本以其为准。<br>    <span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-keyword">\newprob</span>&#123;First&#125;&#123;first&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Description. <span class="hljs-keyword">\par</span><br>求出<span class="hljs-keyword">\udot</span>&#123;至少&#125;有多少个数满足条件。<br><br><span class="hljs-keyword">\para</span>&#123;输入格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>从文件 <span class="hljs-keyword">\filename</span>&#123;first.in&#125; 中读入数据。 <span class="hljs-keyword">\par</span><br>包含一个正整数 <span class="hljs-built_in">$</span>n<span class="hljs-built_in">$</span>。<br><br><span class="hljs-keyword">\para</span>&#123;输出格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>输出到文件 <span class="hljs-keyword">\filename</span>&#123;first.out&#125; 中。 <span class="hljs-keyword">\par</span><br>Output. <br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输入&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Input.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输出&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Output.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;解释&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Note.<br><br><span class="hljs-keyword">\sample</span>&#123;2&#125;&#123;&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>见选手目录下的 <span class="hljs-keyword">\filename</span>&#123;first/first2.in&#125; 与 <span class="hljs-keyword">\filename</span>&#123;first/first2.ans&#125;。<br><br><span class="hljs-keyword">\para</span>&#123;数据范围&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br><span class="hljs-keyword">\begin</span>&#123;center&#125;<br>    <span class="hljs-keyword">\begin</span>&#123;tabu&#125;&#123;c|c|c|c&#125;<br>        <span class="hljs-keyword">\tabucline</span>[2pt]&#123;-&#125;<br>        测试点编号 <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>n <span class="hljs-keyword">\le</span><span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>m <span class="hljs-keyword">\le</span><span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> 特殊限制 <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\tabucline</span>[1.2pt]&#123;-&#125;<br>        <span class="hljs-built_in">$</span>1 <span class="hljs-keyword">\sim</span> 4<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>15<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>2000<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multirow</span>&#123;2&#125;&#123;*&#125;&#123;无&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\cline</span>&#123;1-3&#125;<br>        <span class="hljs-built_in">$</span>5 <span class="hljs-keyword">\sim</span> 8<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>2000<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>15<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span>  <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br>        <span class="hljs-built_in">$</span>9 <span class="hljs-keyword">\sim</span> 12<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;2&#125;&#123;c|&#125;&#123;<span class="hljs-built_in">$</span>100<span class="hljs-built_in">$</span>&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>c<span class="hljs-built_in">_</span>i = C<span class="hljs-built_in">_</span>j = 1<span class="hljs-built_in">$</span> <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br>        <span class="hljs-built_in">$</span>13 <span class="hljs-keyword">\sim</span> 16<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;2&#125;&#123;c|&#125;&#123;<span class="hljs-keyword">\multirow</span>&#123;3&#125;&#123;*&#125;&#123;<span class="hljs-built_in">$</span>2000<span class="hljs-built_in">$</span>&#125;&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>w<span class="hljs-built_in">_</span>i = W<span class="hljs-built_in">_</span>j = 1<span class="hljs-built_in">$</span> <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\cline</span>&#123;1-1&#125; <span class="hljs-keyword">\cline</span>&#123;4-4&#125;<br>        <span class="hljs-built_in">$</span>17 <span class="hljs-keyword">\sim</span> 20<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;2&#125;&#123;c|&#125;&#123;&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>v<span class="hljs-built_in">_</span>i = V<span class="hljs-built_in">_</span>j = 1<span class="hljs-built_in">$</span> <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\cline</span>&#123;1-1&#125; <span class="hljs-keyword">\cline</span>&#123;4-4&#125;<br>        <span class="hljs-built_in">$</span>21 <span class="hljs-keyword">\sim</span> 25<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;2&#125;&#123;c|&#125;&#123;&#125; <span class="hljs-built_in">&amp;</span> 无 <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\tabucline</span>[2pt]&#123;-&#125;<br>    <span class="hljs-keyword">\end</span>&#123;tabu&#125;<br><span class="hljs-keyword">\end</span>&#123;center&#125;<br>    <span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-keyword">\newprob</span>&#123;Second&#125;&#123;second&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Description. <br><br><span class="hljs-keyword">\para</span>&#123;输入格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>从文件 <span class="hljs-keyword">\filename</span>&#123;second.in&#125; 中读入数据。 <span class="hljs-keyword">\par</span><br><br><span class="hljs-keyword">\para</span>&#123;输出格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>输出到文件 <span class="hljs-keyword">\filename</span>&#123;second.out&#125; 中。 <span class="hljs-keyword">\par</span><br>Output. <br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输入&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Input.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输出&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Output.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;解释&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Note.<br><br><span class="hljs-keyword">\sample</span>&#123;2&#125;&#123;&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>见选手目录下的 <span class="hljs-keyword">\filename</span>&#123;second/second2.in&#125; 与 <span class="hljs-keyword">\filename</span>&#123;second/second2.ans&#125;。<br><br><span class="hljs-keyword">\para</span>&#123;数据范围&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Constraint.<br>    <span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-keyword">\newprob</span>&#123;Third&#125;&#123;third&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Description. <br><br><span class="hljs-keyword">\para</span>&#123;输入格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>从文件 <span class="hljs-keyword">\filename</span>&#123;third.in&#125; 中读入数据。 <span class="hljs-keyword">\par</span><br><br><span class="hljs-keyword">\para</span>&#123;输出格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>输出到文件 <span class="hljs-keyword">\filename</span>&#123;third.out&#125; 中。 <span class="hljs-keyword">\par</span><br>Output. <br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输入&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Input.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输出&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Output.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;解释&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Note.<br><br><span class="hljs-keyword">\sample</span>&#123;2&#125;&#123;&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>见选手目录下的 <span class="hljs-keyword">\filename</span>&#123;third/third2.in&#125; 与 <span class="hljs-keyword">\filename</span>&#123;third/third2.ans&#125;。<br><br><span class="hljs-keyword">\para</span>&#123;数据范围&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Constraint.<br>    <span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-keyword">\newprob</span>&#123;Fourth&#125;&#123;fourth&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Description. <br><br><span class="hljs-keyword">\para</span>&#123;输入格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>从文件 <span class="hljs-keyword">\filename</span>&#123;fourth.in&#125; 中读入数据。 <span class="hljs-keyword">\par</span><br><br><span class="hljs-keyword">\para</span>&#123;输出格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>输出到文件 <span class="hljs-keyword">\filename</span>&#123;fourth.out&#125; 中。 <span class="hljs-keyword">\par</span><br>Output. <br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输入&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Input.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输出&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Output.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;解释&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Note.<br><br><span class="hljs-keyword">\sample</span>&#123;2&#125;&#123;&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>见选手目录下的 <span class="hljs-keyword">\filename</span>&#123;fourth/fourth2.in&#125; 与 <span class="hljs-keyword">\filename</span>&#123;fourth/fourth2.ans&#125;。<br><br><span class="hljs-keyword">\para</span>&#123;数据范围&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Constraint.<br><span class="hljs-keyword">\end</span>&#123;document&#125;<br><br><br></code></pre></td></tr></table></figure></details>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
