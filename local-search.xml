<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Fibonacci 数列前 n 项的 k 次方和</title>
    <link href="/2022/11/12/11_12_1/"/>
    <url>/2022/11/12/11_12_1/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>求： <span class="math display">\[Ans = \sum_{i=1}^n \text{Fib}_i ^ k \bmod (10^9+9)\]</span></p><p><span class="math inline">\(n\leq 10^18, k\leq 10^5\)</span></p><h2 id="解题报告">解题报告</h2><p>一开始一直以为是构造矩阵这种神秘的做法。<br />结果发现正解更为神秘。。。</p><p>首先先来一波 Fibonacci 数列的通项公式： <span class="math display">\[F_i=\frac{1}{\sqrt{5}}\left[ \left( \frac{1+\sqrt{5}}{2}\right)^i-\left(\frac{\sqrt{5} - 1}{2}\right)^i \right]\]</span></p><p>为了方便，我们令 <spanclass="math inline">\(\alpha=\frac{1+\sqrt{5}}{2},\beta =\frac{1-\sqrt{5}}{2}\)</span> 。 那么式子就变成了这样： <spanclass="math display">\[F_i=\frac{1}{\sqrt{5}}(\alpha^n+\beta^n)\]</span> 根据题目要求进行变换： <span class="math display">\[\begin{split}Ans&amp;=\sum_{i=1}^n \text{Fib}_i ^ k\\&amp;=\sum_{i=1}^n \frac{1}{\sqrt{5}}(\alpha^i+\beta^i)\\&amp;= \frac{1}{(\sqrt{5})^k}\sum_{i=1}^n (\alpha^i+\beta^i)^k\end{split}\]</span></p><p>现在的问题就是求出 <spanclass="math inline">\((\alpha^i+\beta^i)^k\)</span> 。<br />考虑直接二项式定理，暴力展开 ： <span class="math display">\[\begin{split}&amp;(\alpha^i+\beta^i)^k\\=&amp;(-1)^0\binom{k}{0}\alpha^{ik}\beta^{0n}+(-1)^1\binom{k}{1}\alpha^{i(k- 1)}\beta^{n}+(-1)^2\binom{k}{2}\alpha^{i(k-2)}\beta^{2n}+\cdots\end{split}\]</span> 稍微计算一下，就可以发现其实对于每一个项数都满足等比数列。<span class="math display">\[\frac{(-1)^i\binom{k}{i}\alpha^{(k-i)(n+1)}\beta^{i(n+1)}}{(-1)^i\binom{k}{i}\alpha^{(k-i)n}\beta^{in}}=\alpha^{k-i}\beta^i\]</span></p><p>之后直接算就可以了。<br />对于 <span class="math inline">\(\sqrt{5}\)</span>的处理可以直接在网上找一下二次剩余，发现 <spanclass="math inline">\(383008016^2 \bmod 10^9+9=5\)</span> 。</p><p>代码难度也不大。</p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简单函数计算题（一）</title>
    <link href="/2022/11/11/11_11_1/"/>
    <url>/2022/11/11/11_11_1/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>你要求一个这样的东西，其中 <span class="math inline">\(f_i\)</span>是一个已知的序列。</p><p><span class="math display">\[Ans=\frac{1}{n}\sum_{i=1}^n f_{\gcd(i,n)}\]</span></p><p><span class="math inline">\(n\leq 10^6\)</span> 且询问次数不超过<span class="math inline">\(10^5\)</span> 。</p><h2 id="解题思路">解题思路</h2><p>看上去像是一个莫比乌斯反演，但是事实证明没有那么恐怖。</p><p>可以考虑对于一个最大公约数的贡献次数，不妨设 <spanclass="math inline">\(x=\gcd(i,n)\)</span> 。<br />那么一个非常显然的东西，对于 <span class="math inline">\(x\)</span>的贡献次数是 <span class="math inline">\(\varphi (\frac{n}{x})\)</span>。</p><p>所以现在要求的变成这样的东西： <span class="math display">\[Ans = \frac{1}{n}\sum_{i|n}\varphi (\frac{n}{i})\times f_i\]</span></p><p>然后显然要支持较小的复杂度求出一个数 <spanclass="math inline">\(x\)</span> 的 <spanclass="math inline">\(\varphi(x)\)</span> 。<br />可以尝试线性复杂度 <span class="math inline">\(O(n)\)</span> 求 <spanclass="math inline">\(\varphi(x)\)</span> 。<br />但是更容易的是直接调和级数 <span class="math inline">\(O(n\lnn)\)</span> 求出 <span class="math inline">\(\varphi(x)\)</span> 。</p><p>之后我又想到了整数分块，其实直接枚举约束就可以了。<br />由此可以看出，此题难度在于知道 <spanclass="math inline">\(\varphi(x)\)</span> 是什么东西。</p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022.11.9 闲话</title>
    <link href="/2022/11/09/xian_hua_1/"/>
    <url>/2022/11/09/xian_hua_1/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="348dadadd6dc68948b4a97439f94c77fe6651a0623aa885163bb720d0fec2058">42ee34116d8c35b46747bfaea3ea3bdd7ae5ce15309f9f348549596dc4446ab9045329c2471bf634d6b013787aa76cf9096e180ec9aacd76f578cd0d09b1686902b4628f39b0dea3ec38c86e032fccbe6328359647443cd00662327a664f58d60d91e675c1f834eec492163574a8485c8b3b28c768ef11ee19c7a1af8961724a43a431d2c04470fbe4603da241cfadd7c4333ed1392ede03097266ec6b303b80effbe3026b277d3de909f9b7dbf56a1ad55f1b69d46d6c4d4144a71c2e0521eb3a582b42647675629100da0e43807f4bd9b3ff051acd0c2ba4664494655ed051f1f89b9ab04fceaab268749228adf3e533720b36604d5a0f7dae7a49eb744b9845cc92cd10149246c339db02a2c9c1f858ed97957fec450e67f4ec2ccc502f9ae651e0107ff26cc20fda9a02abb3b45748ceb7446a159327525c1e820d96cd096c0472aa9dc6f3896be8393dea2264df569df424f5afa99e5d92d34004bc2affdb82f227c4d35c40bf221ad0d9868324339e9a5aa51206461e9d474850525ed78baa5e5e7c14f39e558814811627bbadba0c7c046b9d2a4ae8a501fc2fd471291d9962419f703e6c94ba77ae31a4cb408a9b5945c8afef29a4cc1f6ba3d7a227ab9f53d0fd73f9dc6bb73af36431330724358ad6797bba9d590cd081b241cc7ea3cd34c46be4fb25ab3e4e60ab4d0019c32783b5ff8ce2948c895275275adb43f841de4e61dbae32b212443742c279b0cecd64c54f6c0e3db8b28d21014b68dadc23064142dc9f37509586db244008fbd208af5ea6bef45fa452b6205c5bf91881bf9d619ef8fecf0e98ae2dad6d469bc44caa2b6a0f346431d395d85e29e26170c4f7fb61ac4b96b23855ff2332e8b595310dd9fbca08e593d42848b1db4d943a5bc2898e43f451647df07df5ab2bcbf6a3541c01ab6856155b9845ce0b93221891637ed0b86ff3bd7996f0e688d71d0c32bed95493a45833a3bc41fdafb6635d712774ac09fbbcbbfda5e93259cb055bc87c7f0a5a4df30a159ff0d7d329dd003eaee0aa95dd3f4e364fb48546567bf0090caa279b23a71671398dcc5aa129b3279417129921667944b4c42742601c5353418b1b6bf31aa2d71b68819ce08a2150717b0097bc2474a57e4197ef177c0ba33eff88ec079887a76713a2ae044cb73de6b2a6b820fb6dfc38819cbe5053627e1f76906e6fe85ff36073eed3f531d3d81ad8011aed3aae7e08aaeb544710c0ebcb907d1d303de984e21e402bc4680ff26847b7fea7ef6597ddea41787755c21957f2713a252a2d7b15fa49ce4cf7ffcaa1a53a7e623bbde21140e30df3aef436266ff7ffcd88ff8fb63bf7d7cfc562eaf96b3f7e45d2f351f361d40eabfd38ce25e3b333b981cfafc9c31a8e00c1862d1df81c51233342bb1df40a7b49e62cfbd9e1dfd3aa2177ad9fed98c10ccfc3ac598293dee46bfac978b13bcb1a98c8f02160192a3ff13d7911c6661d15072f9ab6eb84daa9875da99079fa31051fe42fad74fc3f21944c5815bf786cc83929e96b040783c1eeb8ac0c48974d0428cd9feaa29f426d069b78c8d9f9bf69a34661fa0f550aad2500d1acc8778907d706d7e045a963e043cf29339bb2081b3180be2b53628d8ca51439212cfd71ed2bf244710c33cdbd707c3d1c6a191c289b3659918be7ccfa9294a787195582df81857dbf771f127d05e0661c7588055a869f81f9b58bcd2a31cc271cb2a94a2cc504cc4431c97cd53fbd96e9682cf218842ca46f77ebd244e909cd2f8b4f68adb579e06a84bcde54d907b3d6a70953d1077099ae1ef40ff408584606d6c69a774df9c5f867ecdf919897b259821f20201df9a2a454d7fb72882c7efd263ff752976dd19774047519ec5f80f6e1e5942bd508e4a78728deffbc7556b01034b5b517645a497fb44cfcbf0555e6f48bff56f80c4a2c9371beef2583cc23bee8bab389f279053e546370de698a75ec3427d7c7295d771a5c9aefed338fa25a4deb162026adddaa14f7b40426627a7a67395cae84d2a314e733062c6af0c95e7fe84355148f0f19fdb934f5e901f32f1061718e0d5021d9cb6588f104419ffeebe779f1651bff91bd8e19459596eeb6af3c141431ecb1b556ce8e2234d56caa57d77de5d59722ee762f230e83bce34a2be35b0d807430eadaf7b3f4bbc04bf2a85837a2717bcf758f2260be41a52db6c3120fddb9f31dfe024feeea6ad6273890f5ad5e84fa92ad504cee0c3b89ef1c58c9a1a96359d99ce82bab4adddea061056bac0b253152676f4e74ca09af4dcdcd5fdd22b4fe426a469e851fd35d6bd1328e9d3e57d3c208d7fecd71255e833a9e1cd7f43dc6ccabc31af62faebfd92ea33a96431f6fd2c1749f06d30d1c8c3b924bc480380a0fb7c3fa41ad901e4095c4b6f5bf23cbda235e1a5f30cce04e5a5a92a4b714d6633fe6dbadd59ee52b95412f77486bc7fad50929009a4ca75204b13798e3e4e22c2451745908d35c7968b9db076021d1899f57ef06f32bbf5d9fd4d82616fe3e41458301611058ab82c989598ba7e57b5f190c695f0384ad92734464816407906a45446e8d3d6b61c233a57c4cfcb4482f50c132adc16ad0e5bee73088d48a63cd98f7be7ed19219a63038379eba6f89abfa35e5ded17469ed97c5456a61a289733a996b7903966d68e27e496fb6c8960051cbb8b5f3084c0031388151760c0781808f2c4ac2904c163e9aa41c5599746385967c0a9b542868f6519bc562fd328ec0043b5bb3224c2c53154e6d15079d4aaba50c8deffe2d468806d3935dbedcb91125c544440533db7161263fdad58eff4feb5491cca7883850e43e41fc28a850cb3f36f30f9e67bbf607addf80d13211b0a4cecd789b7ac23f9af87ee555af67ff4867ac1e6407a09c6fba004c91d2364bc04120d82cd899082dcb3fc6d3153f853c72dcfb5cb659a1c57e4744e6cb7b995ad035787d8dbec446daec3aca96aab00d3f2c39121b2bd89ee60c80e57cf7e57352bb1d3e9ccee697c9041a6a7c342c019e15cce4064243a0a08c5c1093477a21e4b49256bd50f1d833e2e5ffa8a754c618ad479ec66af13d892328aebff08e881d5769529a0d43156cd00dbb71eb0c1209c50cdbf1884520786412f80257f1bc0a7e5d196691abfb1b1d2ae70a814ecb86e27ea64b758a31aac1da915c8019becfcc69db67658605da84ea1b26620aa1cc113d680c57e25b62469388c2d1571e5c61a487a23a1b7865be85fcfbf5d9aeb6974e876293bd16f1e5e0a5ce24679338955c27553001132fed9ba3b65e556316c44a585870233a1a495f08d0db76a08c0a4a856d6d871dc6785f9966ce040a2bf77072086c4747073ed2c7acb958518160423e22030e4db9cb170ae762d06ceb6594dae65960ca25403b42ef022954f33d368bd9417bec04c0830feb4cb937ccae2b86917ca5c1c12648d22ff15ce5f1a483989283b58e7890d1d7461b818b7b1056a04ea650f93564522797b51d39e6b5298ddd011019183e55ca5e478c32a754d091bc6305eced7267fee6b3e19f69a8e8e6ae3d4739279f147db8235f9f2001113c22479bf7e84d2fd54a836299d8e8100769016197449e7039151f4fdeb0d4bbe06164f2c885d227d25b83b0a084a832e68a41b22976d55d1b7dfab6d1d3edeba56d611470f010bd3fb26f9477ba1ca17dd2b56c27bc570d234e6311f78c6c465e01b449d9fcecf7fa6c3e8976993031a1cecb80ff98274c5a4ac308c862417f4b2829eb7696f7b772050e71c18a9ea59257480358af393aa15437aa95d8782c9b2825afecc462f069f5a8639ff6d3042d1b7a03a8623d0ae5f9835f09f5f14ea4009ccea3ea2a76f09f98575570bf748f2dd7daf75af2d684c0b9ffa8e277f8d6d2b95121ab10dc4b3c844b730b7c8dcc0b967f0c7105d861d72d344b78d817e260f14c8855105db584f094553c8442b71946903f9ea085dae5ff279654d4027311933d7d959287905e6e5ae0c3bde165aabcbf09933b1e2edfd8340d411294f7b7199b849e876c0423a6a76f3e2bd75effe0ea52bc50319565213fdb0f49c21e463da1476231a6e223b3a0f14a01954faa8d95d94e52bbb9e5eaa66b632d9872497b35eca682d2d600d9fb80dd3da61856b51e1976ee93995a691debb8e2504773af3819f6eeddad2d16af00c04f2789f474ef7a74a8d82dfc06f4d487804d719aa37940eb215931699b1b3dace0ccea505eb34de4cdd7271fe353c1928bb05de2e6e459ef95d87b9a6e339232ea229ba9d5b1dfac4aafe23f8144a399cf4a7c55462c9f487f69305ea388b3e414c33d95cd5d101a1b1c191eef259257b8a2c62a28de7ec87a578a35352edad2b7d14f1c8b808cee29399f091cde8b0a481c772eeb86f946ea380b2f6252de2dbaace7f69e0fa789b91588e695e0cf36e6a89f8ea4bcbca3f20eaae5e0bd9d76a597c6816451f3f6d654c666e3aba39520305c5e130598ecc9311ee14fd9c13818a766531d48e5aa9cc051905dcbcdc6035fc80b2c65d68672471462716d57fca9e3df6ba20dcf8fd7de2eb91b3ef6c6331785e3d8706e3cb2274dc777a1d48951787635e155def9f7d63fc8c6bad18424949ccc8707a7b4fe4ce48f0fcdbc2f8fe8968aed990748f3bd6dda60658e60768e5c54c952a70db77df72cacc410dfe390af57692641902f7482bb2fd459064a2ab31260fa6eac5959648944ee956cdb92976970119650ca13d97b7b26d98d29be063998d47fdac1d0edf8f4592cfafee4826a9ca80570657ab34f55f5b619537278e7e6c483639851a69c0a484e98fa5d775d6e4a05000d5d74032a77ce9dfe23a809513d267af23b043aa92cc28df42a454d373cb0f3363e20724e8035d1136f64c340591ff1d8adf842c28f621438df4e89c0cb2d19d41ed01fe24e7359004bac2adcc104d71994cd4a64a1d8c8acbe6540e03e505e201469a553c1929e5fbf88900079285f3ea2c2208765a9bcec4fcb2b448825f38b14d7c81b31fa002f504dc7d6381b7075d7adf40243715c284bc28b86d9db661aa5e6e136bd54d2dc6861b34e631275cfcab278d3121ac3ee0f76c79fdcba59865f3aabefeadf9338c213e9c96d01028c89ff2735792669d381b5352fa5ba87bd9aa9722e2ba866f8b79b8f19d48cc07a8684d50dcc5b2f0474abb09a25247bbb2e7c9e7874be71e4c3cb8343d4c42a8b1d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>闲话</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>联考 阵</title>
    <link href="/2022/11/08/gou_zao_zhen/"/>
    <url>/2022/11/08/gou_zao_zhen/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述">题目描述</h2><p>给定 <span class="math inline">\(n,m\)</span>要你构造出这样的一个矩阵 <span class="math inline">\(A\)</span> ：</p><ul><li><p><span class="math inline">\(1\sim n\times m\)</span>都恰好在矩阵中出现一次。</p></li><li><p><span class="math inline">\(\forall 1\leq x \leq n , 1 &lt; y&lt; m\)</span> 都有 <span class="math inline">\(A_{x,y} \perp A_{x,y-1}\lor A_{x,y} \perp A_{x,y+1}\)</span> 。</p></li><li><p><span class="math inline">\(\forall 1 &lt; x &lt; n , 1\leq y\leq m\)</span> 都有 <span class="math inline">\(A_{x,y} \perp A_{x-1,y}\lor A_{x,y} \perp A_{x+1,y}\)</span> 。</p></li></ul><p>有时候还会规定一个矩阵中的位置 <spanclass="math inline">\((x,y)=z\)</span> 。</p><h2 id="解题报告">解题报告</h2><p>考场上只会没有要求固定的部分分，晚上发现考试时被降智了。。。</p><h3 id="没有要求固定的点">没有要求固定的点</h3><p>可以想到一种类似阶梯的构造方式。<br />按照这样构造的话 <span class="math inline">\(n=3,m=3\)</span>的结果是这样的。 <figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">9</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">7 </span><span class="hljs-number">8</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure> 不难发现 <code>1 2 3 4 5</code>，<code>6 7 8</code> 构成了阶梯状的链。<br />考场上有同学就是这样写的，但是我码力不行，只能继续想其他的构造方式。</p><p>其实你发现可以这样构造，更直接也更好写 ： <figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span>  <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">17</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span> <span class="hljs-number">12</span> <span class="hljs-number">11</span> <span class="hljs-number">18</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">6</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">19</span><br><span class="hljs-symbol">8 </span><span class="hljs-number">7</span> <span class="hljs-number">16</span> <span class="hljs-number">15</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure></p><h3 id="要求固定的点">要求固定的点</h3><p>考场上竟然没有想出来。。。</p><p>直接数值上的平移即可，因为你再怎么平移相邻两个数的互质关系是不变的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a <span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a <span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><br><span class="hljs-comment">// using std::make_pair;</span><br><span class="hljs-comment">// using std::pair;</span><br><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">1e9</span>;<br><span class="hljs-type">const</span> ll infll = <span class="hljs-number">0ll</span> + <span class="hljs-number">1e18</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EL putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SP putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mp make_pair</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span></span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span></span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">505</span>;<br><br><span class="hljs-type">int</span> n, m, type, ans[N][N], x, y, z;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> tot = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; (i + <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> &lt;= m; i ++) &#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++) &#123;<br>      <span class="hljs-keyword">if</span> (j % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) ans[j][<span class="hljs-number">1</span> + i * <span class="hljs-number">2</span>] = ++tot, ans[j][<span class="hljs-number">2</span> + i * <span class="hljs-number">2</span>] = ++tot;<br>      <span class="hljs-keyword">else</span> ans[j][i * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>] = ++tot, ans[j][<span class="hljs-number">1</span> + i * <span class="hljs-number">2</span>] = ++tot;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (m % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>      ans[i][m] = ++tot;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-comment">// File(&quot;1&quot;);</span><br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;matrix.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>  <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;matrix.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>  <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(m), <span class="hljs-built_in">read</span>(type);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yes\n&quot;</span>);<br>  <span class="hljs-keyword">if</span> (type == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++, EL)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) <span class="hljs-built_in">write</span>(ans[i][j]), SP;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">read</span>(x), <span class="hljs-built_in">read</span>(y), <span class="hljs-built_in">read</span>(z);<br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) ans[i][j] --;<br>    z --;<br>    <span class="hljs-type">int</span> delt = z - ans[x][y];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) ans[i][j] += delt;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++)<br>        ans[i][j] = (ans[i][j] % (n * m) + (n * m)) % (n * m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++, EL)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) <span class="hljs-built_in">write</span>(ans[i][j] + <span class="hljs-number">1</span>), SP;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span> </span>&#123;<br>  T s = <span class="hljs-number">0</span>, t = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>    t = (c == <span class="hljs-string">&#x27;-&#x27;</span>) ? <span class="hljs-number">-1</span> : t;<br>    c = <span class="hljs-built_in">getchar</span>();<br>  &#125;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c))<br>    s = s * <span class="hljs-number">10</span> + c - <span class="hljs-number">48</span>, c = <span class="hljs-built_in">getchar</span>();<br>  a = s * t;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>  <span class="hljs-type">int</span> top = <span class="hljs-number">0</span>, sta[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-keyword">while</span> (x)<br>    sta[++top] = x % <span class="hljs-number">10</span>, x /= <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">while</span> (top)<br>    <span class="hljs-built_in">putchar</span>(sta[top] + <span class="hljs-string">&#x27;0&#x27;</span>), top--;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 位运算 __builtin_</title>
    <link href="/2022/11/07/builtin/"/>
    <url>/2022/11/07/builtin/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>听同学说这个东西是 <span class="math inline">\(O(1)\)</span>的，速度会比手写的要快很多，赶快来学一下。</p><p>其实也不是很难，直接给出位运算的用法和功能，直接当成是 <spanclass="math inline">\(O(1)\)</span> 的就好了。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">__builtin_popcount(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n) -&gt; 该函数时判断n的二进制中有多少个<span class="hljs-number">1</span><br>__builtin_parity(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n) -&gt; 该函数是判断n的二进制中<span class="hljs-number">1</span>的个数的奇偶性<br>__builtin_ffs(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n) -&gt; 该函数判断n的二进制末尾最后一个<span class="hljs-number">1</span>的位置，从一开始<br>__builtin_ctz(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> n) -&gt; 该函数判断n的二进制末尾后面<span class="hljs-number">0</span>的个数，当n为<span class="hljs-number">0</span>时，和n的类型有关<br>__builtin_clz (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> x) -&gt; 返回前导的<span class="hljs-number">0</span>的个数。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础 NPC 练习题</title>
    <link href="/2022/11/07/tiao_zheng_npc/"/>
    <url>/2022/11/07/tiao_zheng_npc/</url>
    
    <content type="html"><![CDATA[<h2 id="简要题意">简要题意</h2><p>构造一个点数尽量多的无向完全图，并给其中的每一条边染色，颜色数不超过<span class="math inline">\(k\)</span> ，使得没有同色三元环。<br />对于不同的 <span class="math inline">\(k\)</span> 题目给出了目标答案<span class="math inline">\(n_0\)</span> 。</p><h2 id="解题报告">解题报告</h2><p>非常神秘的一道题目，考场上只会 <spanclass="math inline">\(16\)</span> pts 的手玩部分。</p><h3 id="k1n2"><span class="math inline">\(k=1,n=2\)</span></h3><p>非常简单，没有任何悬念，直接连一个 <spanclass="math inline">\(1\rightarrow 2\)</span> 的边即可。</p><h3 id="k2n5"><span class="math inline">\(k=2,n=5\)</span></h3><p>手玩一下，本人考场上 <span class="math inline">\(10\)</span>分钟内玩出，大概幼儿园都会。</p><h3 id="k3n16"><span class="math inline">\(k=3,n=16\)</span></h3><p>直接爆搜可以做到 <span class="math inline">\(13\)</span> ，如果把<span class="math inline">\(13\)</span> 的答案记录下来作为 <spanclass="math inline">\(n=14\)</span> 的前提可以把 <spanclass="math inline">\(14\)</span> 搞定。<br />但是之后就没有任何可以优化的空间了。</p><p>考虑调整法，进行若干次调整，每次找到此时所有的边改成其他颜色后最优的方案进行更新。<br />为了防止进入局部最优解，没进行 <span class="math inline">\(B\)</span>次调整后直接重构，<span class="math inline">\(n=16\)</span> 可以在 <spanclass="math inline">\(40s\)</span> 左右跑出来。</p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">namespace</span> SubTask3 &#123;<br><span class="hljs-type">int</span> col[<span class="hljs-number">50</span>][<span class="hljs-number">50</span>], edge[N][<span class="hljs-number">5</span>], wait[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">no_circle</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a = <span class="hljs-number">1</span>; a &lt;= m; a ++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b = a + <span class="hljs-number">1</span>; b &lt;= m; b ++)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c = b + <span class="hljs-number">1</span>; c &lt;= m; c ++) <br>        <span class="hljs-keyword">if</span> (col[a][b] == col[b][c] &amp;&amp; col[a][b] == col[a][c]) res ++;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> step = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= m; j ++)<br>        col[i][j] = col[j][i] = <span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> test = <span class="hljs-number">1</span>; test &lt;= <span class="hljs-number">1000</span>; test ++) &#123;<br>      <span class="hljs-type">int</span> num = <span class="hljs-built_in">no_circle</span>();<br>      <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">write</span>(m), EL;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++, EL)<br>          <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= m; j ++) <span class="hljs-built_in">write</span>(col[i][j]), SP;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      &#125;<br>      <span class="hljs-type">int</span> chu = <span class="hljs-number">0</span>, chv = <span class="hljs-number">0</span>, chc = <span class="hljs-number">0</span>, minn = <span class="hljs-number">0x3f3f3f3f</span>;<br>      <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> u = <span class="hljs-number">1</span>; u &lt;= m; u ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = u + <span class="hljs-number">1</span>; v &lt;= m; v ++)<br>          <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c = <span class="hljs-number">0</span>; c &lt; n; c ++) &#123;<br>            <span class="hljs-keyword">if</span> (c == col[u][v]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> last = col[u][v];<br>            col[u][v] = col[v][u] = c;<br>            <span class="hljs-type">int</span> ss = <span class="hljs-built_in">no_circle</span>();<br>            minn = std::<span class="hljs-built_in">min</span>(minn, ss);<br>            edge[++cnt][<span class="hljs-number">0</span>] = u, edge[cnt][<span class="hljs-number">1</span>] = v; edge[cnt][<span class="hljs-number">2</span>] = c, edge[cnt][<span class="hljs-number">3</span>] = ss;<br>            col[u][v] = col[v][u] = last;<br>          &#125;<br>      wait[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i ++)<br>        <span class="hljs-keyword">if</span> (edge[i][<span class="hljs-number">3</span>] == minn) wait[++wait[<span class="hljs-number">0</span>]] = i;<br>      <span class="hljs-type">int</span> id = <span class="hljs-built_in">rand</span>(<span class="hljs-number">1</span>, wait[<span class="hljs-number">0</span>]);<br>      chu = edge[wait[id]][<span class="hljs-number">0</span>], chv = edge[wait[id]][<span class="hljs-number">1</span>], chc = edge[wait[id]][<span class="hljs-number">2</span>]; <br>      <span class="hljs-keyword">if</span> (minn &lt;= num) col[chu][chv] = col[chv][chu] = chc;<br>    &#125;<br>  &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></details><h3 id="k4n45"><span class="math inline">\(k=4,n=45\)</span></h3><p>观察数据 <del>（其实是看下发的答案文件）</del> 发现当 <spanclass="math inline">\(n\)</span> 较大是时候具有一定的奇妙性质。<br /></p><blockquote><p>对于任意两个点 <span class="math inline">\(i\)</span> 和 <spanclass="math inline">\(j\)</span> ，当所有的 <spanclass="math inline">\(col_{|i-j|}\)</span>都相同的时候，会产生较优秀的解。</p></blockquote><p>当然，这个结论在 <span class="math inline">\(k=3\)</span>的时候是不成立的，所以我是看答案文件发现的。<br />所以这一档分也就不那么困难了，直接暴力搜索每一个 <spanclass="math inline">\(col_i\)</span> 的值然后判断即可。</p><p><strong>注意：判断是否可行的时候应采取 <spanclass="math inline">\(O(n^2)\)</span> 的判断方法。</strong></p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">namespace</span> SubTask4 &#123;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">Col</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> col[x];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; k; i ++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; k &amp;&amp; i + j &lt; k; j ++)<br>      <span class="hljs-keyword">if</span> (col[i] == col[j] &amp;&amp; col[i] == col[i + j]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(k) == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> ;<br>  <span class="hljs-keyword">if</span> (k &gt;= m) &#123;<br>    <span class="hljs-built_in">write</span>(m), EL;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++, EL)<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= m; j ++) <span class="hljs-built_in">write</span>(<span class="hljs-built_in">Col</span>(j - i) - <span class="hljs-number">1</span>), SP;<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>    col[k] = i;<br>    <span class="hljs-built_in">dfs</span>(k + <span class="hljs-number">1</span>);<br>    col[k] = <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></details><h3 id="k5n-139"><span class="math inline">\(k=5,n = 139\)</span></h3><p>在上一个档的基础上我们又可以发现一个性质，就是说 <spanclass="math inline">\(col_i=col_{n-i}\)</span> 。<br />同样的，我不会证明，是直接看答案文件的。。。。</p><p>原来准备写上一个档的暴力搜索，结果发现根本跑不出来，所以还是要运用到调整法。<br />至于调整法的思路，和第三档的思路是类似的。</p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">namespace</span> SubTask5 &#123;<br><span class="hljs-type">int</span> col[N], edge[N][<span class="hljs-number">5</span>], cnt = <span class="hljs-number">0</span>, ch[N], tot = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">no_circle</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i ++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; m &amp;&amp; i + j &lt; m; j ++)<br>      <span class="hljs-keyword">if</span> (col[i] == col[j] &amp;&amp; col[i] == col[i + j]) res ++;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    col[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= (m + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; i ++)<br>      col[i] = <span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = (m + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; i &lt; m; i ++)<br>      col[i] = col[m - i];<br>    <span class="hljs-type">int</span> step = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> test = <span class="hljs-number">1</span>; test &lt;= <span class="hljs-number">100000</span>; test ++) &#123;<br>      <span class="hljs-type">int</span> num = <span class="hljs-built_in">no_circle</span>();<br>      std::cerr &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>      <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">write</span>(m); EL;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++, EL)<br>          <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= m; j ++) <span class="hljs-built_in">write</span>(col[j - i]), SP;<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      &#125;<br>      <span class="hljs-type">int</span> minn = <span class="hljs-number">0x3f3f3f3f</span>;<br>      cnt = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= (m + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; i ++)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c = <span class="hljs-number">0</span>; c &lt; n; c ++) &#123;<br>          <span class="hljs-keyword">if</span> (c == col[i]) <span class="hljs-keyword">continue</span>;<br>          <span class="hljs-type">int</span> last = col[i];<br>          col[i] = c; <br>          <span class="hljs-keyword">if</span> (m % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> || i &lt; (m + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>) col[m - i] = c;<br>          <span class="hljs-type">int</span> ss = <span class="hljs-built_in">no_circle</span>();<br>          minn = std::<span class="hljs-built_in">min</span>(minn, ss);<br>          edge[++cnt][<span class="hljs-number">0</span>] = i, edge[cnt][<span class="hljs-number">1</span>] = c, edge[cnt][<span class="hljs-number">2</span>] = ss;<br>          col[i] = last; <br>          <span class="hljs-keyword">if</span> (m % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> || i &lt; (m + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>) col[m - i] = last;<br>        &#125;<br>      tot = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= cnt; i ++)<br>        <span class="hljs-keyword">if</span> (edge[i][<span class="hljs-number">2</span>] == minn) ch[++tot] = i;<br>      <span class="hljs-type">int</span> id = <span class="hljs-built_in">rand</span>(<span class="hljs-number">1</span>, tot), pos = edge[ch[id]][<span class="hljs-number">0</span>], cc = edge[ch[id]][<span class="hljs-number">1</span>];<br>      <span class="hljs-keyword">if</span> (minn &lt;= num) &#123;<br>        col[pos] = cc;<br>        <span class="hljs-keyword">if</span> (m % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> || pos &lt; (m + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>) col[m - pos] = cc;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (minn == num) step ++;<br>      <span class="hljs-keyword">if</span> (minn &gt; num) <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">if</span> (step == <span class="hljs-number">200</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></details><h3 id="k6"><span class="math inline">\(k=6\)</span></h3><p>最后一个包是在是太逆天了，反正我没看懂神秘的结论。</p><p>还是先把结论放一下把，主要思想是根据 <spanclass="math inline">\(k=5\)</span> 的部分直接推到 <spanclass="math inline">\(k=6\)</span> 的部分。<br />感性理解一下发现按照下面的这个方法构造是正确的：<br />我们令 <span class="math inline">\(c_i\)</span> 表示 <spanclass="math inline">\(k=5\)</span> 时的差的颜色，<spanclass="math inline">\(cc_i\)</span> 表示 <spanclass="math inline">\(k=6\)</span> 时的差的颜色。</p><p><span class="math display">\[cc_i=\begin{cases}c_i \quad (1\leq i &lt; n)\\5\quad (n\leq i &lt; 2n)\\c_{i-(2n-1)}\quad (2n\leq i &lt; 3n-2)\end{cases}\]</span></p><p>代码非常简单，就不放了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高斯约旦消元法学习笔记</title>
    <link href="/2022/11/06/16155981/"/>
    <url>/2022/11/06/16155981/</url>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>没有什么意外，发现学过的东西又忘了。<br />我真的是 AH 第一没脑子选手。</p><h3 id="正题">正题</h3><blockquote><p>相对于传统的高斯消元，约旦消元法的精度更好、代码更简单，没有回带的过程。——某洛谷博客</p></blockquote><h4 id="算法流程">算法流程</h4><p>约旦消元法大致思路如下：<br />1.选择一个尚未被选过的未知数作为主元，选择一个包含这个主元的方程。<br />2. 将这个方程主元的系数化为1。<br />3. 通过加减消元，消掉其它方程中的这个未知数。<br />4. 重复以上步骤，直到把每一行都变成只有一项有系数。<br /></p><h4 id="算法验证">算法验证</h4><p>先随便列一个方程组： <span class="math display">\[\begin{cases}3x+y+3z=6\\-2x+7y+8z=17\\9x-7y+2z=20\\\end{cases}\]</span> 用 <strong>高斯-约旦消元</strong>的方法接触当前方程的解。<br /></p><ul><li>先把方程组转化成为矩阵的形式。</li></ul><p>以上文的方程组为例，我们列出这样的一个矩阵： <spanclass="math display">\[\begin{bmatrix}3 &amp; 1 &amp; 3 &amp; 6\\-2&amp; 7 &amp; 8 &amp; 17\\9 &amp;-7 &amp; 2 &amp; 20\\\end{bmatrix}\]</span> * 看第一列，从上到下扫描，发现绝对值更大的就直接交换。 <spanclass="math display">\[\begin{bmatrix}3 &amp; 1 &amp; 3 &amp; 6\\-2&amp; 7 &amp; 8 &amp; 17\\9 &amp;-7 &amp; 2 &amp; 20\\\end{bmatrix}\rightarrow\begin{bmatrix}9 &amp;-7 &amp; 2 &amp; 20\\-2&amp; 7 &amp; 8 &amp; 17\\3 &amp; 1 &amp; 3 &amp; 6\\\end{bmatrix}\]</span> *然后运用消元的办法消元就可以了捏。（太懒了不想再算这种申必的系数）<br />* 之后的直接重复上面的两步就可以了。</p><p>最后会变成一个类似这样的东西： <span class="math display">\[\begin{bmatrix}a_{1,1} &amp;0 &amp; 0 &amp; a\\0&amp; a_{2,2} &amp; 0 &amp; b\\0 &amp; 1 &amp; a_{3,3} &amp; c\\\end{bmatrix}\]</span> 直接算就好了。</p><p><strong>注意：当出现有一列全部为零时，说明无解。</strong></p><h4 id="code">Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> file(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> quad putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 1005</span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">double</span> a[N][N];<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-comment">// file(&quot;P3389&quot;);</span><br>  std::cin &gt;&gt; n;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n + <span class="hljs-number">1</span>; j++)<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>, &amp;a[i][j]);<br>  <br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-type">int</span> maxn = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; j++)<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[j][i]) &gt; <span class="hljs-built_in">fabs</span>(a[maxn][i])) maxn = j;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n + <span class="hljs-number">1</span>; j++)<br>      std::<span class="hljs-built_in">swap</span>(a[i][j], a[maxn][j]);<br>    <span class="hljs-keyword">if</span> (!a[i][i]) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No Solution\n&quot;</span>); <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>      <span class="hljs-keyword">if</span> (j == i) <span class="hljs-keyword">continue</span>;<br>      <span class="hljs-type">double</span> tmp = a[j][i] / a[i][i];<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k= i + <span class="hljs-number">1</span>; k &lt;= n + <span class="hljs-number">1</span>; k++)<br>        a[j][k] -= a[i][k] * tmp;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf\n&quot;</span>, a[i][n + <span class="hljs-number">1</span>] / a[i][i]);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FFT 学习笔记</title>
    <link href="/2022/11/06/16325376/"/>
    <url>/2022/11/06/16325376/</url>
    
    <content type="html"><![CDATA[<h1 id="引入">引入</h1><p>什么是 <span class="math inline">\(\text{FFT}\)</span> ？<br />反正我看到 <span class="math inline">\(\text{wiki}\)</span>上是一堆奇怪的东西。<br /></p><blockquote><p>快速傅里叶变换（英语：Fast Fourier Transform,FFT），是快速计算序列的离散傅里叶变换（DFT）或其逆变换的方法。傅里叶分析将信号从原始域（通常是时间或空间）转换到频域的表示或者逆过来转换。FFT会通过把DFT矩阵分解为稀疏（大多为零）因子之积来快速计算此类变换。——<span class="math inline">\(\text{wikipedia}\)</span></p></blockquote><p>反正我没脑子我看不懂。<br />对我来说，<span class="math inline">\(\text{FFT}\)</span>就是能把多项式乘法从 <span class="math inline">\(O(n^2)\)</span> 变成<span class="math inline">\(O(n\log n)\)</span> 的神仙玩意。 # 正文</p><h2 id="系数表示法和点值表示法">系数表示法和点值表示法</h2><p>对于系数表示法，就是用多项式的系数来表示这个多项式。<br />比如说： <span class="math display">\[f(x)=a_1x^3+a_2x^2+a_3x+a_4\Leftrightarrow f(x)=\{a_1,a_2,a_3,a_4\}\]</span>那么对于点值表示法，相对应的就是用该函数上的若干个点表示多项式。<br />学过小学数学的同学们一定知道：<span class="math inline">\(n+1\)</span>个点确定一个 <span class="math inline">\(n\)</span> 次多项式。<br /><del>证明的话可以考虑数学归纳法。/xyx</del><br />同样举一个例子，点值表示法是这样的： <span class="math display">\[f(x)=a_0+a_1x+a_2x^2+\cdots+a_nx^n⇔f(x)=\{(x_0,y_0),(x_1,y_1),(x_2,y_2),\cdots,(x_n,y_n)\}\\\]</span>上面讲到要把系数表示法转换成点值表示法。那么这是为什么呢？<br />下面就先来展示一下点值表示法的多项式乘法： <span class="math display">\[f(x)=\{(x_0,f(x_0)),(x_1,f(x_1)),(x_2,f(x_2)),\cdots,(x_n,f(x_n))\}\]</span> <span class="math display">\[g(x)=\{(x_0,g(x_0)),(x_1,g(x_1)),(x_2,g(x_2)),\cdots,(x_n,g(x_n))\} \\\]</span> <span class="math display">\[F(x) = f(x)\times g(x)\\\]</span> <span class="math display">\[F(x)=\{(x_0,g(x_0)\times f(x_0)),(x_1,g(x_1)\timesf(x_1)),\cdots,(x_n,g(x_n)\times f(x_n))\}\]</span></p><h2 id="复数">复数</h2><p><span class="math inline">\(\text{复数 = 实数 + 虚数}\)</span><br />实在一点吧，直接上干货，我们定义 :<br /><span class="math display">\[i=\sqrt{-1}\]</span>这样我们就可以表示我们在实数范围内不能表示的数了。<br />那么如何表示一个复数呢：<br /><span class="math display">\[Num=a+bi\ \ (a,b \in\mathbb{R})\]</span><br />接着我们把 <span class="math inline">\(Num=a+bi\)</span>看成一个函数，把 <span class="math inline">\(a\)</span> 和 <spanclass="math inline">\(b\)</span> 分别对应 <spanclass="math inline">\(x\)</span> 轴和 <spanclass="math inline">\(y\)</span> 轴。<br />其中横坐标是实数轴，纵坐标是虚数轴，这样就可以把每个虚数看为一个向量了。<br />对应的，虚数可以用普通坐标和极坐标表示：<br /><span class="math display">\[(x,y)\quad和\quad (r,\theta)\]</span>下面给出两个复数相乘的意义： <span class="math display">\[\begin{split}&amp;\quad(a+bi)\times(c+di)\\&amp;=ac+adi+bci+bdi^2\\&amp;=(ac+bd)+(ad+bc)i\end{split} \\\quad \\\]</span> <span class="math display">\[(r_1,\theta_1)\times(r_2,\theta_2)=(r_1\times r_2,\theta_1+\theta_2)\]</span></p><h2 id="tt-dft-离散傅里叶变换"><span class="math inline">\(\ttDFT\)</span> （离散傅里叶变换）</h2><p>现在已经介绍完了<strong>点值表示法</strong>和<strong>复数</strong>的相关知识，接下来就是干货部分了。</p><p>上面我们已经通过这样的例子说明了点值表示法算多项式乘法的方便。<br />接下来我们来看怎么先把多项式从系数表示法转换为点值表示法，这种过程叫<span class="math inline">\(\text{DFT}\)</span> 。</p><p>所谓的点值表示法，也就是在 <span class="math inline">\(n\)</span>多项式上取 <span class="math inline">\(n+1\)</span>个点，来进行表示。<br />形式化的，可以表示成这样： <span class="math display">\[F(x)=a_0+a_1x+a_2x^2+\cdots+a_{n-1}x^{n-1}+a_nx^n\\\]</span> <span class="math display">\[\rightarrowF(x)=\{(x_0,F(x_0)),(x_1,F(x_1)),(x_2,F(x_2)),\cdots,(x_n,F(x_n))\}\]</span> 然后可以惊喜的发现，随便带几个 <spanclass="math inline">\(x_i\)</span> 进去在算算 <spanclass="math inline">\(F(x_i)\)</span> 就好了。<br />但是如果你小学毕业了，你就可以发现这样的话不如直接 <spanclass="math inline">\(O(n^2)\)</span> 暴力。</p><p>所以该怎么办？<br />我们猜想是否存在一些 <span class="math inline">\(x\)</span> 使得 <spanclass="math inline">\(x^n\ (n\in \tt Z^+)\)</span> 的结果都是 <spanclass="math inline">\(1\)</span> 。<br />这看上去是一个非常好的思路，但是这样的数有多少个呢？<br /><del>我能脱口说出两个 <span class="math inline">\(1\)</span> 和 <spanclass="math inline">\(-1\)</span> ，想一想可以发现其实 <spanclass="math inline">\(i\)</span> 和 <spanclass="math inline">\(-i\)</span> 也都可以。</del></p><p>但是经过认真思考（看题解）可以发现下图的单位圆上所有的点都满足条件。</p><p>为了方便，我们在取这 <span class="math inline">\(n\)</span>个点时会把这个单位圆平分。</p><p>我们从 <span class="math inline">\((1, 0)\)</span>这个点开始，按照逆时针的方向从 <span class="math inline">\(0\)</span>开始进行编号，形如 <span class="math inline">\(\omega_n^k\)</span>。<br />其中 <span class="math inline">\(n\)</span> 表示一共选择了 <spanclass="math inline">\(n\)</span> 个点，<spanclass="math inline">\(k\)</span> 表示当前点的编号。</p><p>由我们之前介绍的复数乘法的 <strong>模长相乘，度数相加</strong>：<span class="math display">\[(r_1,\theta_1)\times(r_2,\theta_2)=(r_1\times r_2,\theta_1+\theta_2)\]</span> 并且结合单位圆的性质（所有的点到原点的距离为 <spanclass="math inline">\(1\)</span>）。<br />可以得到由 <span class="math inline">\(\omega_n^1\)</span> 转换到 <spanclass="math inline">\(\omega_n^k\)</span> 的公式： <spanclass="math display">\[(\omega_n^1)^k=\omega_n^k\]</span> 我们称 <span class="math inline">\(\omega_n^1\)</span> 为<span class="math inline">\(n\)</span> 次单位根。<br />所以可以发现，我们直接带入 <spanclass="math inline">\(\omega_n^i\)</span> 就可以了。</p><h3 id="单位根的一些有用的性质">单位根的一些有用的性质</h3><p>在了解一切的性质之前，我们要先知道单位根 <spanclass="math inline">\(\omega_n^i\)</span> 如何表示： <spanclass="math display">\[\omega_n^k=\cos\frac{k}{n}2\pi+i\times\sin\frac{k}{n}2\pi\]</span>这东西的证明你直接照着单位圆上画一个点然后三角函数入门知识即可。</p><h4 id="性质一">性质一</h4><p><span class="math display">\[\omega_n^k=\omega_{2n}^{2k}\]</span> 证明的话直接照着上面给出的式子套即可，然后发现可以约分。<br />那我认为进一步的可以得到： <span class="math display">\[\omega_n^k=\omega_{Pn}^{Pk} \quad (p\in \tt Z^+)\]</span> 很显然不过好像没有什么大用。</p><h4 id="性质二">性质二</h4><p><span class="math display">\[\omega_n^{k+\frac{n}{2}}=-\omega_n^k\]</span> 证明的话稍微写一下吧： <span class="math display">\[\omega_n^k=\cos\frac{k}{n}2\pi+i\times\sin\frac{k}{n}2\pi\\\]</span> <span class="math display">\[\begin{split}\omega_n^{k+\frac{n}{2}}&amp;=\cos\frac{k+\frac{n}{2}}{n}2\pi+i\times\sin\frac{k+\frac{n}{2}}{n}2\pi\\&amp;=\cos(\frac{k}{n}2\pi+\pi)+i\times\sin(\frac{k}{n}2\pi+\pi)\end{split}\]</span>都化成这一步了就不在进行下一步证明，还看不懂的建议重修初中数学。</p><h4 id="性质三">性质三</h4><p><span class="math display">\[\omega_n^0=\omega_n^n\]</span> 比较憨，我就不讲为什么了。</p><h3 id="tt-fft-快速傅里叶变换"><span class="math inline">\(\ttFFT\)</span> （快速傅里叶变换）</h3><p><del>他来了，他来了，等到现在他终于来了。。。。</del></p><p>之前讲到我们直接带入 <span class="math inline">\(\omega_n^i\)</span>来计算点值。<br />是的，我认为这种方法高效，巧妙，逼格高，体现了人类智慧。<br />但是等等，虽然算系数的过程免掉了，但是对于每一个 <spanclass="math inline">\(\omega_n^i\)</span> 我们还是要 <spanclass="math inline">\(O(n)\)</span> 算结果啊。<br />然后我搬来搬手指算了一下，发现一共有 <spanclass="math inline">\(n\)</span> 个 <spanclass="math inline">\(\omega_n^i\)</span> 的值，然后就又 <spanclass="math inline">\(O(n^2)\)</span> 了。<br />所以我们该怎么办？</p><p>认真地看看题解，发现可以从分治的角度入手。<br /><strong>注意：以下的内容保证 <span class="math inline">\(n\)</span> 为<span class="math inline">\(2\)</span> 的整数次方。</strong><br />我们设一个多项式： <span class="math display">\[\begin{split}F(x)&amp;=\sum_{i=0}^{n-1}a_ix^i\\&amp;=a_0 + a_1x + a_2x^2 + \cdots + a_{n-1}x^{n-1}\end{split}\]</span> 然后想办法把 <span class="math inline">\(F(x)\)</span>分成两个部分。<br />这里采用的方法是按照 <span class="math inline">\(F(x)\)</span>下标的奇偶性分成两个部分。 <span class="math display">\[\begin{split}F(x)&amp;=a_0 + a_1x + a_2x^2 + \cdots + a_{n-1}x^{n-1}\\&amp;=(a_0+a_2x^2+\cdots+a_{n-2}x^{n-2})+x(a_1+a_3x^2+\cdots+a_{n-1}x^{n-2})\end{split}\]</span> 接下来我们发现拆出来的这两个多项式的结构是一模一样的。<br />我们再分别设这两个多项式为 <span class="math inline">\(F_1(x)\)</span>和 <span class="math inline">\(F_2(x)\)</span> 。 <spanclass="math display">\[F_1(x)=a_0+a_2x^2+\cdots+a_{n-2}x^{n-2}\\\]</span> <span class="math display">\[F_2(x)=a_1+a_3x^2+\cdots+a_{n-1}x^{n-2}\\\]</span> <span class="math display">\[F(x)=F_1(x)+xF_2(x)\]</span> 发现这样的系数不连续，没有那么完美，于是我们再变化一下。 <spanclass="math display">\[F_1(x)=a_0+a_2x^1+\cdots+a_{n-2}x^{\frac{n}{2}-1}\\\]</span> <span class="math display">\[F_2(x)=a_1+a_3x^1+\cdots+a_{n-1}x^{\frac{n}{2}-1}\\\]</span> <span class="math display">\[F(x) = F_1(x^2)+xF_2(x^2)\]</span> 此时看可以发现这样的形式非常的优美。<br />接下来就是直接带入 <span class="math inline">\(\omega_n^i\)</span>的操作了。<br />我们接着设 <span class="math inline">\(k&lt;\frac{n}{2}\)</span> 然后把<span class="math inline">\(\omega_n^k\)</span> 直接带入。 <spanclass="math display">\[\begin{split}F(\omega_n^k) &amp;= F_1((\omega_n^k)^2)+\omega_n^kF_2((\omega_n^k)^2)\\&amp;=F_1(\omega_{n}^{2k})+\omega_n^kF_2(\omega_{n}^{2k})\\&amp;=F_1(\omega_{\frac{n}{2}}^{k})+\omega_n^kF_2(\omega_{\frac{n}{2}}^{k})\end{split}\]</span> 第一步直接带入，有问题的话小学建议重修。<br />第二步的话我之前写过，公式是这样的： <span class="math display">\[(\omega_n^1)^k=\omega_n^k\]</span> 当然，在这里运用是具有普遍性的，有问题的话直接推一下。<br />至于第三步，直接算比例我认为会更加快速一些。 对于 <spanclass="math inline">\(F(\omega_n^{k+\frac{n}{2}})\)</span> 直接带入：<span class="math display">\[\begin{split}F(\omega_n^{k+\frac{n}{2}}) &amp;=F_1((\omega_n^{k+\frac{n}{2}})^2)+\omega_n^{k+\frac{n}{2}}F_2((\omega_n^{k+\frac{n}{2}})^2)\\&amp;=F_1(\omega_n^{2k+n})+\omega_n^{k+\frac{n}{2}}F_2(\omega_n^{2k+n})\\&amp;=F_1(\omega_n^{2k}\omega_n^n)-\omega_n^{k}F_2(\omega_n^{2k}\omega_n^n)\\&amp;=F_1(\omega_n^{2k})-\omega_n^{k}F_2(\omega_n^{2k})\\&amp;=F_1(\omega_{\frac{n}{2}}^{k})-\omega_{n}^{k}F_2(\omega_{\frac{n}{2}}^{k})\\\end{split}\]</span>每一步一一介绍比较麻烦，大家直接手头一下或者翻翻前面的公式。<br />观察第一个式子和第二个式子，发现唯一不一样的地方就是符号了。<br />然后直接分治求解即可，时间复杂度 <span class="math inline">\(O(n\logn)\)</span> 。</p><h3 id="tt-iff-快速傅里叶逆变换"><span class="math inline">\(\ttIFF\)</span> (快速傅里叶逆变换)</h3><p>就是把点值表示法转换成为我们要的系数表示法。<br />这里给出结论，证明的话属实比较恶心，所以我就不证明了。<br /></p><blockquote><p>一个多项式在分治的过程中乘上单位根的共轭复数，分治完的每一项除以<span class="math inline">\(n\)</span> 即为原多项式的每一项系数</p></blockquote><p>也就是再做一遍 <span class="math inline">\(\tt FFT\)</span>输出时每一位除以 <span class="math inline">\(n\)</span> 就可以了。</p><h3 id="代码实现及其优化">代码实现及其优化</h3><h4 id="code-复数类型封装">Code 复数类型封装</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">cp</span> &#123;<br>  <span class="hljs-type">double</span> x, y;<br>  <span class="hljs-built_in">cp</span> (<span class="hljs-type">double</span> xx = <span class="hljs-number">0</span>, <span class="hljs-type">double</span> yy = <span class="hljs-number">0</span>) &#123;x = xx; y = yy;&#125;;<br><br>  <span class="hljs-keyword">friend</span> cp <span class="hljs-keyword">operator</span> +(cp p, cp q) &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">cp</span>(p.x + q.x, p.y + q.y);&#125;<br>  <span class="hljs-keyword">friend</span> cp <span class="hljs-keyword">operator</span> -(cp p, cp q) &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">cp</span>(p.x - q.x, p.y - q.y);&#125;<br>  <span class="hljs-keyword">friend</span> cp <span class="hljs-keyword">operator</span> *(cp p, cp q) &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">cp</span>(p.x * q.x - p.y * q.y, p.y * q.x + p.x * q.y);&#125;<br>&#125;a[N], b[N];<br></code></pre></td></tr></table></figure><h4 id="code-无优化">Code 无优化</h4><p>不是我写的代码，反正就是照着之前的公式模拟，看看就好了。</p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;complex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> cp complex<span class="hljs-string">&lt;double&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fft</span><span class="hljs-params">(cp *a, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> inv)</span> <span class="hljs-comment">//inv是取共轭复数的符号</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span>;<br>  <span class="hljs-type">int</span> mid = n / <span class="hljs-number">2</span>;<br>  <span class="hljs-type">static</span> cp b[MAXN];<br>  <span class="hljs-built_in">fo</span>(i, <span class="hljs-number">0</span>, mid - <span class="hljs-number">1</span>)b[i] = a[i * <span class="hljs-number">2</span>], b[i + mid] = a[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>];<br>  <span class="hljs-built_in">fo</span>(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)a[i] = b[i];<br>  <span class="hljs-built_in">fft</span>(a, mid, inv), <span class="hljs-built_in">fft</span>(a + mid, mid, inv); <span class="hljs-comment">//分治</span><br>  <span class="hljs-built_in">fo</span>(i, <span class="hljs-number">0</span>, mid - <span class="hljs-number">1</span>)<br>  &#123;<br>    <span class="hljs-function">cp <span class="hljs-title">x</span><span class="hljs-params">(cos(<span class="hljs-number">2</span> * pi * i / n), inv * sin(<span class="hljs-number">2</span> * pi * i / n))</span></span>; <span class="hljs-comment">//inv取决是否取共轭复数</span><br>    b[i] = a[i] + x * a[i + mid], b[i + mid] = a[i] - x * a[i + mid];<br>  &#125;<br>  <span class="hljs-built_in">fo</span>(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)a[i] = b[i];<br>&#125;<br><br>cp a[MAXN], b[MAXN];<br><span class="hljs-type">int</span> c[MAXN];<br><span class="hljs-built_in">fft</span>(a, n, <span class="hljs-number">1</span>), <span class="hljs-built_in">fft</span>(b, n, <span class="hljs-number">1</span>); <span class="hljs-comment">//1系数转点值</span><br><span class="hljs-built_in">fo</span>(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)a[i] *= b[i];<br><span class="hljs-built_in">fft</span>(a, n, <span class="hljs-number">-1</span>); <span class="hljs-comment">//-1点值转系数</span><br><span class="hljs-built_in">fo</span>(i, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)c[i] = (<span class="hljs-type">int</span>)(a[i].<span class="hljs-built_in">real</span>() / n + <span class="hljs-number">0.5</span>); <span class="hljs-comment">//注意精度</span><br><br></code></pre></td></tr></table></figure></details><p>注意：<span class="math inline">\(\tt FFT\)</span> 之前要先把 <spanclass="math inline">\(n\)</span> 调成 <spanclass="math inline">\(2\)</span> 的整数次幂。<br />很显然上面的那个是连模板题都过不了的。<br />所以在这里我们才需要去考虑怎么去优化 <span class="math inline">\(\ttFFT\)</span> 。</p><blockquote><p>观察一下原序列和反转后的序列，需要求的序列实际是原序列下标的二进制反转！因此我们对序列按照下标的奇偶性分类的过程其实是没有必要的。 这样我们可以<span class="math inline">\(O(n)\)</span>的利用某种操作得到我们要求的序列，然后不断向上合并就好了。 —— <spanclass="math inline">\(\tt luogu\)</span> 某题解</p></blockquote><h3 id="code-有优化可过">Code 有优化，可过</h3><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> file(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> quad putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 3000005</span><br><br><span class="hljs-keyword">namespace</span> IO &#123;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span></span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a, rest &amp;...x)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span></span>;<br><br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">cp</span> &#123;<br>  <span class="hljs-type">double</span> x, y;<br>  <span class="hljs-built_in">cp</span> (<span class="hljs-type">double</span> xx = <span class="hljs-number">0</span>, <span class="hljs-type">double</span> yy = <span class="hljs-number">0</span>) &#123;x = xx; y = yy;&#125;;<br><br>  <span class="hljs-keyword">friend</span> cp <span class="hljs-keyword">operator</span> +(cp p, cp q) &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">cp</span>(p.x + q.x, p.y + q.y);&#125;<br>  <span class="hljs-keyword">friend</span> cp <span class="hljs-keyword">operator</span> -(cp p, cp q) &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">cp</span>(p.x - q.x, p.y - q.y);&#125;<br>  <span class="hljs-keyword">friend</span> cp <span class="hljs-keyword">operator</span> *(cp p, cp q) &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">cp</span>(p.x * q.x - p.y * q.y, p.y * q.x + p.x * q.y);&#125;<br>&#125;a[N], b[N];<br><br><span class="hljs-type">const</span> <span class="hljs-type">double</span> pi = <span class="hljs-built_in">acos</span>(<span class="hljs-number">-1.0</span>);<br><br><span class="hljs-type">int</span> n1, n2, n, rev[N], c[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">FFT</span><span class="hljs-params">(cp *a, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> inv)</span> </span>&#123;<br>  <span class="hljs-type">int</span> bit = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ((<span class="hljs-number">1</span> &lt;&lt; bit) &lt; n) bit++;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; ++i) &#123;<br>    rev[i] = (rev[i &gt;&gt; <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">1</span>) | ((i &amp; <span class="hljs-number">1</span>) &lt;&lt; (bit - <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">if</span> (i &lt; rev[i])<br>      std::<span class="hljs-built_in">swap</span>(a[rev[i]], a[i]);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> mid = <span class="hljs-number">1</span>; mid &lt; n; mid &lt;&lt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-function">cp <span class="hljs-title">temp</span><span class="hljs-params">(cos(pi / mid), inv * sin(pi / mid))</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i += mid * <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-function">cp <span class="hljs-title">omega</span><span class="hljs-params">(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; mid; ++j, omega = omega * temp) &#123;<br>        cp x = a[i + j], y = omega * a[i + j + mid];<br>        a[i + j] = x + y;<br>        a[i + j + mid] = x - y;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-comment">// file(&quot;P3803&quot;);</span><br>  IO::<span class="hljs-built_in">read</span>(n1, n2);<br>  n = std::<span class="hljs-built_in">max</span>(n1, n2);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, num; i &lt;= n1; ++i) IO::<span class="hljs-built_in">read</span>(num), a[i].x = num;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, num; i &lt;= n2; ++i) IO::<span class="hljs-built_in">read</span>(num), b[i].x = num;<br>  n = n1 + n2;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">30</span>; ++i)<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-number">1</span> &lt;&lt; i) &gt; n) &#123;<br>      n = (<span class="hljs-number">1</span> &lt;&lt; i);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>  <span class="hljs-built_in">FFT</span>(a, n, <span class="hljs-number">1</span>); <span class="hljs-built_in">FFT</span>(b, n, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) a[i] = a[i] * b[i];<br>  <span class="hljs-built_in">FFT</span>(a, n, <span class="hljs-number">-1</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n1 + n2; ++i)<br>    c[i] = (<span class="hljs-type">int</span>)(a[i].x / n + <span class="hljs-number">0.5</span>);<br>  <br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n1 + n2; ++i)<br>    IO::<span class="hljs-built_in">write</span>(c[i]), quad;<br>  Enter;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> IO &#123;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span> </span>&#123;<br>  T s = <span class="hljs-number">0</span>, t = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">while</span> ((c &lt; <span class="hljs-string">&#x27;0&#x27;</span> || c &gt; <span class="hljs-string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="hljs-string">&#x27;-&#x27;</span>)<br>    c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>)<br>    c = <span class="hljs-built_in">getchar</span>(), t = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">while</span> (c &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br>    s = (s &lt;&lt; <span class="hljs-number">1</span>) + (s &lt;&lt; <span class="hljs-number">3</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br>  a = s * t;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a, rest &amp;...x)</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(a);<br>  <span class="hljs-built_in">read</span>(x...);<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>  <span class="hljs-type">int</span> top = <span class="hljs-number">0</span>, sta[<span class="hljs-number">55</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-keyword">while</span> (x) <br>    sta[++top] = x % <span class="hljs-number">10</span>, x /= <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">while</span> (top)<br>    <span class="hljs-built_in">putchar</span>(sta[top] + <span class="hljs-string">&#x27;0&#x27;</span>), top--;<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></details><p>在这里推荐 <ahref="https://zhuanlan.zhihu.com/p/347514286">某知乎专栏</a> ，把 <spanclass="math inline">\(\tt FFT\)</span> 优化讲的很清楚。</p><p><span class="math inline">\(\tt NTT\)</span> 还是会看的，但是 <spanclass="math inline">\(\tt FFT\)</span> 把我给些虚脱了。。。</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ARC087D 补题记录</title>
    <link href="/2022/11/06/16348650/"/>
    <url>/2022/11/06/16348650/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><ahref="https://www.luogu.com.cn/problem/AT3728">题目链接</a></h3><p>简要题意：<br />给你一个<span class="math inline">\(N\)</span>个节点的树，求一个<spanclass="math inline">\(1\cdots N\)</span>的排列<spanclass="math inline">\((p_1,p_2,\cdots p_N)\)</span> ，使得<spanclass="math inline">\(\sum dist(i,p_i)\)</span>最大。</p><p>求这样的排列的个数。答案对<spanclass="math inline">\(10^9+7\)</span>取模。</p><h3 id="分析">分析</h3><p>先考虑怎么构造出 <span class="math inline">\(\sumdist(i,p_i)\)</span> 最大的 <span class="math inline">\(p\)</span>。</p><p>先取出一条边，把它断开，使得原树分成两个部分 <spanclass="math inline">\(S_1\)</span> 和 <spanclass="math inline">\(S_2\)</span> 。<br />在最多的情况下，每一个都会走到另一个集合，所以路过切断边的次数是 <spanclass="math inline">\(2\times\min\{|S_1|,|S_2|\}\)</span> 。</p><p>现在取出当前树的重心，至于为什么是重心：<br />考虑对于每一条边的贡献，及是之前讲的 <spanclass="math inline">\(2\times\min\{|S_1|,|S_2|\}\)</span>，我们要让贡献最大，显然要让 <span class="math inline">\(|S_1|\)</span>和 <span class="math inline">\(|S_2|\)</span> 尽可能平衡。<br />自然而然就可以想到重心。</p><p>我们设当前子树为 <span class="math inline">\(S\)</span>，对于子树内的节点 <span class="math inline">\(u\)</span>可以得到最大的构造方案是： <span class="math display">\[\forall u\in S,p_u\notin S\]</span></p><p>接下来考虑容斥求方案数。<br />我们设 <span class="math inline">\(f_i\)</span> 表示有 <spanclass="math inline">\(i\)</span>个数不满足条件，其他随便选的方案数。<br />那么： <span class="math display">\[Ans = \sum_{i=0}^n(-1)^if_i(n-i)!\]</span> 至于为什么有 <span class="math inline">\((n-i)!\)</span>是因为剩下的随便排列都是可以的。<br /></p><p>我们考虑每一个与 <span class="math inline">\(\text{root}\)</span>连边的子树，设其大小为 <span class="math inline">\(\text{size}\)</span>。<br />可以得到这个子树中<br /><spanclass="math display">\[f_i=C_{\text{size}}^i\prod_{j=size-i+1}^jj\]</span>也是比较好理解的，小学乘法原理即可。</p><p>最后背包一下，具体可看代码。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> file(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> quad putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long </span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5005</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-type">int</span> n, siz[N], w[N], root, fac[N], f[N], ans, inv[N];<br>std::vector &lt;<span class="hljs-type">int</span>&gt; dis[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> n)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">get_root</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> father)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> father)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-comment">// file(&quot;AT3728&quot;);</span><br>  f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; fac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; inv[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  std::cin &gt;&gt; n;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod;<br>  inv[n] = <span class="hljs-built_in">power</span>(fac[n], mod - <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i--)<br>    inv[i] = inv[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % mod;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt; n; i++) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld %lld&quot;</span>, &amp;x, &amp;y);<br>    dis[x].<span class="hljs-built_in">emplace_back</span>(y);<br>    dis[y].<span class="hljs-built_in">emplace_back</span>(x);<br>  &#125;<br>  <span class="hljs-built_in">get_root</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">memset</span>(siz, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(siz));<br>  <span class="hljs-built_in">dfs</span>(root, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : dis[root]) &#123;<br>    <span class="hljs-type">int</span> x = siz[t];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= std::<span class="hljs-built_in">min</span>(j, x); k++) &#123;<br>        <span class="hljs-type">int</span> mul = <span class="hljs-built_in">C</span>(x, k) * fac[x] % mod * inv[x - k] % mod;<br>        f[j] = (f[j] + f[j - k] * mul % mod) % mod;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>, num;<br>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) flag = <span class="hljs-number">-1</span>;<br>    num = f[i] * fac[n - i] % mod;<br>    ans = ans + flag * num;<br>    ans = (ans % mod + mod) % mod;<br>  &#125;<br>  std::cout &lt;&lt; ans &lt;&lt; std::endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ret = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (n) &#123;<br>    <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>) ret = ret * a % mod;<br>    a = a * a % mod;<br>    n /= <span class="hljs-number">2</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (n &lt; m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-type">int</span> ret = fac[n];<br>  ret = ret * inv[m] % mod;<br>  ret = ret * inv[n - m] % mod;<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">get_root</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> father)</span> </span>&#123;<br>  siz[now] = <span class="hljs-number">1</span>; w[now] = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : dis[now]) &#123;<br>    <span class="hljs-keyword">if</span> (t == father) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">get_root</span>(t, now);<br>    siz[now] += siz[t];<br>    w[now] = std::<span class="hljs-built_in">max</span>(w[now], siz[t]);<br>  &#125;<br>  w[now] = std::<span class="hljs-built_in">max</span>(w[now], n - siz[now]);<br>  <span class="hljs-keyword">if</span> (w[now] &lt;= n / <span class="hljs-number">2</span>) root = now;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> father)</span> </span>&#123;<br>  siz[now] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : dis[now]) &#123;<br>    <span class="hljs-keyword">if</span> (t == father) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfs</span>(t, now);<br>    siz[now] += siz[t];<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>素数个数的证明</title>
    <link href="/2022/11/06/16172438/"/>
    <url>/2022/11/06/16172438/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>颓废的时候发现了这个非常有趣的问题，在这里分享一下。<br />当然，原题给出了 <span class="math inline">\(7\)</span>种证明，没脑子选手冥思苦想一年只看懂两种。</p><h2 id="正文">正文</h2><h3 id="第一种证明">第一种证明</h3><p>我们考虑假设素数的个数是有限个。<br />那么我们运用一个集合 <span class="math inline">\(\mathbb{P} =\{p_1,p_2,p_3,\cdots ,p_{m-1},p_m \}\)</span> 来表示。<br />现在考虑构造一个数 <span class="math inline">\(n\)</span> ，使得： <spanclass="math display">\[\begin{split}n&amp;=\prod_{i=1}^{m}p_i + 1\\&amp;=p_1\times p_2\times p_3\times \cdots \times p_{m-1}\times p_m + 1\end{split}\]</span></p><p>因为所有的素数都在上述的集合中，所以 <spanclass="math inline">\(n\)</span> 是合数。<br />即 <span class="math inline">\(n\)</span> 存在质数因子 <spanclass="math inline">\(pr\)</span> 且 <span class="math inline">\(pr \in\mathbb{P}\)</span>。</p><p>现在我们假设以上所有的都是成立的。<br /><span class="math inline">\(\because\)</span> <spanclass="math inline">\(n\)</span> 存在质数因子 <spanclass="math inline">\(pr\)</span> 且 <span class="math inline">\(pr \in\mathbb{P}\)</span><br /><span class="math inline">\(\therefore\)</span> <spanclass="math inline">\(pr|n\)</span> 且 <spanclass="math inline">\(pr|(p_1\times p_2\times p_3\times \cdots \timesp_{m-1}\times p_m)\)</span><br />我们设 <span class="math inline">\(n = pr\times k_1 \ \ (k_1 \in\mathbb{N}^+)\)</span>。<br />设 <span class="math inline">\(Mul_P = (p_1\times p_2\times \cdots\times p_{m-1}\times p_m) = pr\times k_2\ \ (k_2 \in\mathbb{N}^+)\)</span><br /><span class="math inline">\(\therefore\)</span> <spanclass="math inline">\(n - Mul_P = pr\times (k_1-k_2) = 1\)</span><br /><span class="math inline">\(\therefore\)</span> <spanclass="math inline">\(pr \in \mathbb{P}\)</span> 且 <spanclass="math inline">\(pr = 1\)</span><br /></p><p>非常显然，这是矛盾的。<br />由此得出，一定有无穷多个素数。</p><hr /><h3 id="第二种证明">第二种证明</h3><p>先确定方向，我们从 <span class="math inline">\(\gcd\)</span>的角度来解析这个问题。<br />很显然的是，如果两个数 <span class="math inline">\(a\)</span> 和 <spanclass="math inline">\(b\)</span> ，<spanclass="math inline">\(\gcd(a,b)=1\)</span> 即 <spanclass="math inline">\(a\)</span> 和 <spanclass="math inline">\(b\)</span> 互质。<br />那么我们一定可以推出 <span class="math inline">\(a\)</span> 和 <spanclass="math inline">\(b\)</span> 拥有的质因数互不相同。<br />所以，我们如果能够找到一个无穷的序列使得序列中的数两两互质即可。</p><p>在证明中，采用了一个名字叫做 <spanclass="math inline">\(Fermat\)</span> 的序列，序列的公式为 <spanclass="math inline">\(F_i=2^{2^n}+1\)</span><br />首先，这个序列一定是无穷无尽的。<br />所以我们需要做的事只有证明： <span class="math display">\[\forall a,b\in \{F_i\},a \neq b\ \rightarrow \gcd(a,b)=1\]</span></p><p>不过这好像并不是一个非常好证明的东西。<br />所以证明中吧其转化成了验证下面的这个式子。 <span class="math display">\[F_{n-2}=\prod_{k=0}^{n-1} F_k\]</span></p><p>等式子列数来后在理解我们会发现非常巧妙：<br />同样采取反证法，我们假设存在相同的质因数 <spanclass="math inline">\(pr\)</span>。 <span class="math display">\[\begin{split}F_n- 2&amp;=\prod_{k=0}^{n-1} F_k\\F_n-\prod_{k=0}^{n-1} F_k&amp;=2\\pr\times k_1-pr\times k_2&amp;=2\\pr\times (k_1-k_2)&amp;=2\\\end{split}\]</span></p><p>由此我们可以得出：<span class="math inline">\(pr|2\)</span><br />所以，<span class="math inline">\(pr\)</span> 只可能是 <spanclass="math inline">\(1\)</span> 或 <spanclass="math inline">\(2\)</span>。<br />又因为所有的 <span class="math inline">\(Fermat\)</span>数都是奇数。<br />所以上述的假设是不成立的。</p><p>现在考虑我们如何来验证上面的这个式子。 <span class="math display">\[\begin{split}\prod_{k=0}^nF_k&amp;=(\prod_{k=0}^{n-1}F_k)\times F_n\\&amp;=(F_n-2)F_n\\&amp;=(2^{2^n}-1)(2^{2^n}+1)\\&amp;=2^{2^{n+1}}-1=F_{n+1}-2\end{split}\]</span> 由此得证，素数有无穷多个。</p>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AGC002F 做题体验</title>
    <link href="/2022/11/06/16534076/"/>
    <url>/2022/11/06/16534076/</url>
    
    <content type="html"><![CDATA[<p>没脑子选手认为是个有意思的题目。<br />当然，这种神仙题对我来说不看题解做出来是完全不可能的。</p><p>看到题目的要求和限制，不难发现一个合法的序列满足<strong>它的前缀颜色个数小于等于白球的个数</strong>。<br />这个东西显然不难理解，如果初始前缀中一种颜色的球只出现了一次，那么它就是白球。<br />出现多次时，才对颜色个数造成贡献。</p><p>发现某种颜色第一个球为白色的设定非常难搞，考虑把白球和其他球分开讨论。<br />为了避免出现重复情况以及其他不可描述的奇怪错误，我们<strong>考虑从左到右第一个空着的位置</strong>。</p><p>接着我们定义这样的 <span class="math inline">\(\tt dp\)</span> 状态：</p><blockquote><p><span class="math inline">\(\tt f[i][j]\)</span> 表示此时已经放了<span class="math inline">\(i\)</span> 个白球和 <spanclass="math inline">\(j\)</span> 种颜色所有的球的方案数。</p></blockquote><p>很显然现在可以从两种状态进行转移：<span class="math inline">\(\ttf[i-1][j]\)</span> 和 <span class="math inline">\(\tt f[i][j-1]\)</span>。<br />先看第一种情况，这种情况是很简单的，因为只考虑第一个空着的位置所以方案已经固定。</p><p>再来看第二种情况，还是比较有意思的：</p><ul><li>首先第一步，我需要从剩下的 <spanclass="math inline">\(n-j+1\)</span>个颜色中选择一个颜色进行摆放，所以这个少不了。<br /></li><li>接下来就是看有多少种不同的摆放方式：首先因为我们当前第一个空位必须要填，而且一种颜色能显色说明之前一定有一个白球，所以我们只需要考虑<span class="math inline">\(k-2\)</span> 个球的摆放方式。<br /></li><li>至于有多少个空可以填这 <span class="math inline">\(k-2\)</span>个球，首先一共有 <span class="math inline">\(nk\)</span>个格子，放白球用了 <span class="math inline">\(i\)</span> 个，放 <spanclass="math inline">\(j-1\)</span> 种颜色的球用了 <spanclass="math inline">\((j-1)\times(k-1)\)</span>个球，然后还有你固定的球要减一。<br /></li></ul><p>所以状态转移方就出来了： <span class="math display">\[f_{i,j}=f_{i-1,j}+f_{i,j-1}\times(n-j+1)\dbinom{nk-i-(j-1)(k-1)-1}{k-2}\]</span> 代码也就很好写了： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> quad putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2005</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><br><span class="hljs-type">int</span> n, k, fac[N * N], ifac[N * N], f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  std::cin &gt;&gt; n &gt;&gt; k;<br>  <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<br>    std::cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  fac[<span class="hljs-number">0</span>] = ifac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n * k; i++) fac[i] = fac[i - <span class="hljs-number">1</span>] * i % mod;<br>  ifac[n * k] = <span class="hljs-built_in">power</span>(fac[n * k], mod - <span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n * k - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i--) <br>    ifac[i] = ifac[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % mod;<br>  f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= i; j++) &#123;<br>      f[i][j] = f[i - <span class="hljs-number">1</span>][j];<br>      <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>      <span class="hljs-type">int</span> cc = <span class="hljs-built_in">C</span>(n * k - i - (j - <span class="hljs-number">1</span>) * (k - <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>, k - <span class="hljs-number">2</span>);<br>      f[i][j] = (f[i][j] + f[i][j - <span class="hljs-number">1</span>] * (n - j + <span class="hljs-number">1</span>) % mod * cc) % mod;<br>    &#125;<br>  &#125;<br>  std::cout &lt;&lt; f[n][n] &lt;&lt; std::endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> n &lt; m ? <span class="hljs-number">0</span> : fac[n] * ifac[n - m] % mod * ifac[m] % mod;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ret = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (n) &#123;<br>    <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>) ret = ret * a % mod;<br>    a = a * a % mod; n /= <span class="hljs-number">2</span>;<br>  &#125; <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF1137E 做题报告</title>
    <link href="/2022/11/06/16489040/"/>
    <url>/2022/11/06/16489040/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="https://www.luogu.com.cn/problem/CF1137E"title="题目链接">题目链接</a></h3><p>紧跟 zyf 的步伐，发现人间高质量好题。</p><p>开始看上去像是一道数据结构题，但是发现 <spanclass="math inline">\(k\leq 10^9\)</span> 后果断放弃任何数据结构。</p><p>先来看操作一，这种操作的答案可以说是非常简单的，就是 <spanclass="math inline">\((1,0)\)</span> 这个二元组。<br />再来看操作二，操作三可以发现并不是非常显然或者是有简单的做法。</p><p>这时我们去考虑每一次操作三对于 <spanclass="math inline">\(a_i\)</span> 所需要加上的数： <spanclass="math display">\[s\times(i-1)+b \quad(1 \leq s,b \leq 10^9)\]</span>可以发现这是系数和截距都是整数的一次函数，也就是说函数单调上升且所有的都大于一。<br />既然这样，我们就考虑从几何的角度去考虑这个问题。（其实我是看题解的）</p><p>其实这种东西包含了 单调性，最值，直线等关键的词语，很显然会想到凸包上。<br />随便蒙一个结论：不在当前凸包上的点永远不会是最小值。<br />换一句话说就是：不论进行多少次操作三，一开始不在下凸包上的点都不是最小值。</p><p>来证明一下这个随便猜的结论：<br />为了方便起见，我们对于每个点进行一次平移： <span class="math display">\[(x,y)\leftarrow(x-1,y)\]</span> 这样的话每一次操作三的相加的数就变成了 <spanclass="math inline">\(si+b\)</span> 。<br />我们假设平面上有三个点 <span class="math inline">\(A(x_1,y_1)\)</span>，<span class="math inline">\(B(x_2,y_2)\)</span> 和 <spanclass="math inline">\(C(x_3,y_3)\)</span> 。<br />满足 <span class="math inline">\(x_1&lt; x_2&lt; x_3\)</span> 且 <spanclass="math inline">\(y_1&gt;y_2&gt;y_3\)</span> ，同时还满足 <spanclass="math inline">\(B\)</span> 在 <spanclass="math inline">\(AC\)</span> 连线的上方。<br />很显然，此时 <span class="math inline">\(B\)</span>不在三个点组成的点集的下凸包上。<br />初始时很显然，画个图就可以发现 <span class="math inline">\(B\)</span>不可能是最小的值。<br />进行一次操作三之后会得到这样的是哪个点。 <span class="math display">\[A(x_1,y_1+x_1k+b)\\B(x_2,y_2+x_2k+b)\\C(x_3,y_3+x_3k+b)\\\]</span> 由之前的 <span class="math inline">\(A\)</span> ，<spanclass="math inline">\(B\)</span> 和 <spanclass="math inline">\(C\)</span> 三个点的位置可以知道。 <spanclass="math display">\[\frac{y_3-y_2}{x_3-x_2}&lt;\frac{y_2-y_1}{x_2-x_1}\\\frac{y_2-y_3}{x_3-x_2}&gt;\frac{y_1-y_2}{x_2-x_1}\]</span> 假设此时 <span class="math inline">\(B\)</span>可以是最小值，那么 <span class="math inline">\(B\)</span> 的值一定要小于<span class="math inline">\(C\)</span> 的值，也就是说 <spanclass="math display">\[\begin{split}y_2+x_2k+b&amp;&lt; y_3+x_3k+b\\y_2+x_2k&amp;&lt; y_3+x_3k\\(x_3-x_2)k&amp;&gt;y_2-y_3\\k&amp;&gt;\frac{y_2-y_3}{x_3-x_2}\end{split}\]</span> 结合上述等式可以得到 <span class="math display">\[k&gt;\frac{y_2-y_3}{x_3-x_2}&gt;\frac{y_1-y_2}{x_2-x_1}\]</span> 所以此时 <span class="math inline">\(y_2\)</span> 都已经大于<span class="math inline">\(y_1\)</span> 了，也就是说 <spanclass="math inline">\(B\)</span> 在 <spanclass="math inline">\(A\)</span> 的上面，显然假设不成立。</p><p>所以我们只要维护一个凸包就可以了。<br />对于操作一，没有什么好讲的，直接把单调栈清空就可以了。<br />对于操作二，从后端不断弹出，直到斜率满足下凸包的要求，然后把最后一个点加入。<br />对于操作三，可以直接记录全局的 <span class="math inline">\(K\)</span> 和<span class="math inline">\(B\)</span> 方便计算。</p><p><strong>注意：对于操作二要考虑 <span class="math inline">\(K\)</span>和 <span class="math inline">\(B\)</span> 的影响</strong></p><p>具体的细节可以看代码。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> quad putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><br><span class="hljs-keyword">using</span> std::abs;<br><span class="hljs-keyword">using</span> std::pair;<br><span class="hljs-keyword">using</span> std::string;<br><span class="hljs-keyword">using</span> std::make_pair;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span></span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a, rest &amp;...x)</span></span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x, rest ...a)</span></span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000005</span>;<br><br><span class="hljs-type">int</span> n, m, top = <span class="hljs-number">0</span>, K, B;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-type">int</span> x, y;<br>  <span class="hljs-built_in">Point</span>(<span class="hljs-type">int</span> _x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _y = <span class="hljs-number">0</span>) &#123;x = _x; y = _y;&#125;<br>  <span class="hljs-keyword">friend</span> Point <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Point &amp;p, <span class="hljs-type">const</span> Point &amp;q) &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(p.x + q.x, p.y + q.y);&#125;<br>  <span class="hljs-keyword">friend</span> Point <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Point &amp;p, <span class="hljs-type">const</span> Point &amp;q) &#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(p.x - q.x, p.y - q.y);&#125;<br>  <span class="hljs-keyword">friend</span> <span class="hljs-type">double</span> <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Point &amp;p, <span class="hljs-type">const</span> Point &amp;q) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span> * p.x * q.y - <span class="hljs-number">1.0</span> * p.y * q.x;&#125;<br>&#125; sta[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">Num</span><span class="hljs-params">(Point now)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> now.y + K * now.x + B;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-comment">// File(&quot;1&quot;);</span><br>  <span class="hljs-built_in">read</span>(n, m);<br>  top = <span class="hljs-number">1</span>; sta[top] = <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> test = <span class="hljs-number">1</span>, op, k, b, s; test &lt;= m; test++) &#123;<br>    <span class="hljs-built_in">read</span>(op);<br>    <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-built_in">read</span>(k);<br>      top = <span class="hljs-number">1</span>; sta[top] = <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>      n += k; K = B = <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123;<br>      Point now = <span class="hljs-built_in">Point</span>(n, -(n * K + B));<br>      <span class="hljs-built_in">read</span>(k); n += k;<br>      <span class="hljs-keyword">while</span> (top &gt; <span class="hljs-number">1</span> &amp;&amp; (now - sta[top - <span class="hljs-number">1</span>]) * (sta[top] - sta[top - <span class="hljs-number">1</span>]) &gt; <span class="hljs-number">0.000000001</span>) top --;<br>      sta[++top] = now;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>) &#123;<br>      <span class="hljs-built_in">read</span>(b, s);<br>      K += s; B += b;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (top &gt; <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-built_in">Num</span>(sta[top]) &gt;= <span class="hljs-built_in">Num</span>(sta[top - <span class="hljs-number">1</span>])) top --;<br>    <span class="hljs-built_in">write</span>(sta[top].x + <span class="hljs-number">1</span>, <span class="hljs-built_in">Num</span>(sta[top])); Enter;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span> </span>&#123;<br>  <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, t = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c) &amp;&amp; c != <span class="hljs-string">&#x27;-&#x27;</span>) c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) c = <span class="hljs-built_in">getchar</span>(), t = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) s = s * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>  a = s * t;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>  <span class="hljs-type">int</span> top = <span class="hljs-number">0</span>, sta[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-keyword">while</span> (x) sta[++top] = x % <span class="hljs-number">10</span>, x /= <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">while</span> (top) <span class="hljs-built_in">putchar</span>(sta[top] + <span class="hljs-string">&#x27;0&#x27;</span>), top --;;;<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a, rest &amp;...x)</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(a); <span class="hljs-built_in">read</span>(x...);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x, rest ...a)</span> </span>&#123;<br>  <span class="hljs-built_in">write</span>(x); quad; <span class="hljs-built_in">write</span>(a...);<br>&#125;<br><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF850D 做题感想</title>
    <link href="/2022/11/06/16491716/"/>
    <url>/2022/11/06/16491716/</url>
    
    <content type="html"><![CDATA[<h3 id="题目链接"><a href="https://www.luogu.com.cn/problem/CF850D"title="题目链接">题目链接</a></h3><p><del>关注 zyf ，顿顿解馋。</del></p><p>这道题目一看就一脸不可做的样子。。。<br />当然，如果你不知道竞赛图的性质，确实是非常不可做的。</p><p>竞赛图：任意两个点之间都有一条有向边连接，也就是把完全图的每一条边都赋予一个方向。<br />现在来看一下给你一个有关 <span class="math inline">\(n\)</span>个点的出度 <span class="math inline">\(deg_i\)</span>判断是否构成竞赛图。<br /><strong>兰道定理：对 <span class="math inline">\(deg_i\)</span>升序排好后, 若满足 <spanclass="math inline">\(\sum\limits_{i=1}^kdeg_i\geq C_k^2\)</span> 且<span class="math inline">\(\sum deg_i=C_n^2\)</span> ,定能构造出一种竞赛图 。</strong></p><p>现在考虑先构造出来一个序列 <span class="math inline">\(deg_i\)</span>，再由 <span class="math inline">\(deg_i\)</span>直接构造初始的竞赛图。<br />假设一共有 <span class="math inline">\(n\)</span> 个点，容易发现 <spanclass="math inline">\(n\leq 61\)</span> 。<br />因为有题目可以发现 <span class="math inline">\(m\leq 31\)</span>，然后可以列出方程： <span class="math display">\[\begin{split}\frac{n\times(n+1)}{2}&amp;\leq 31n\\n&amp;\leq31\end{split}\]</span> 接着我们用 <span class="math inline">\(F(i,j,k)\)</span>表示当前排到了第 <span class="math inline">\(i\)</span>个点，当前点度数为 <span class="math inline">\(a_j\)</span> ，度数总和为<span class="math inline">\(k\)</span> 是否可行。<br />边界情况是 <span class="math inline">\(F(1,1,a_1)=1\)</span>证明显然。<br />转移也是非常简单 <spanclass="math inline">\(F(i,j,k)=\min\{1,F(i-1,j,k-a_j)+F(i-1,j-1-a_{j-1})\}\)</span>。<br />本人为了方便 <span class="math inline">\(\tt dp\)</span>采用的是顺推法求解 <span class="math inline">\(F(i,j,k)\)</span>。<br />然后枚举每一个 <span class="math inline">\(i\in[1,61]\)</span> 找到<span class="math inline">\(F(i,m,\frac{i\times(i-1)}{2})=1\)</span>的最小的 <span class="math inline">\(i\)</span> 。<br />自此我们就找到了能够成竞赛图的 <span class="math inline">\(n\)</span>的最小值。</p><p>至于还原原来的序列，直接记录一下是由哪一个状态递推过来的，倒推就可以还原原序列。<br />现在的问题是：给定一个出度的序列 <spanclass="math inline">\(deg_i\)</span> 怎么去构造一个竞赛图。</p><p>这个还是非常简单的了，每一次连边按照出度 <spanclass="math inline">\(deg_i\)</span>升序排序，然后直接向后连边即可。<br />像是这样： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span> <span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> deg[a] &lt; deg[b];&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>  std::<span class="hljs-built_in">sort</span>(pos + i, pos + <span class="hljs-number">1</span> + n, cmp);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= i + deg[pos[i]]; j++) ok[pos[i]][pos[j]] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + deg[pos[i]] + <span class="hljs-number">1</span>; j &lt;= n; j++) ok[pos[j]][pos[i]] = <span class="hljs-number">1</span>, deg[pos[j]] --;<br>&#125;<br></code></pre></td></tr></table></figure> 所以细节的话可以直接看代码。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> quad putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><br><span class="hljs-keyword">using</span> std::abs;<br><span class="hljs-keyword">using</span> std::pair;<br><span class="hljs-keyword">using</span> std::string;<br><span class="hljs-keyword">using</span> std::make_pair;<br><br><span class="hljs-comment">// #define int long long</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span></span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a, rest &amp;...x)</span></span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x, rest ...a)</span></span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">105</span>;<br><br><span class="hljs-type">int</span> m, a[N], limit[N], n, top, deg[N], tot, ok[N][N], pos[N];<br><span class="hljs-type">int</span> f[<span class="hljs-number">65</span>][<span class="hljs-number">35</span>][<span class="hljs-number">1905</span>], sta[N], g[<span class="hljs-number">65</span>][<span class="hljs-number">35</span>][<span class="hljs-number">1905</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Get_degree</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> ii, jj, kk;<br>  ii = n; jj = m; kk = n * (n - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    sta[++top] = a[jj];<br>    <span class="hljs-keyword">if</span> (g[ii][jj][kk] == <span class="hljs-number">1</span>) &#123;<br>      ii --; kk -= a[jj]; jj --;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (g[ii][jj][kk] == <span class="hljs-number">2</span>)&#123;<br>      ii --; kk -= a[jj];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>  &#125;<br>  <span class="hljs-keyword">while</span> (top) deg[++tot] = sta[top], top --;<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<span class="hljs-keyword">return</span> deg[a] &lt; deg[b]; &#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(m);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) <span class="hljs-built_in">read</span>(a[i]);<br>  std::<span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + m);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">80</span>; i++) limit[i] = i * (i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>  f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][a[<span class="hljs-number">1</span>]] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">61</span>; i++) <span class="hljs-comment">// 当前的点数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) <span class="hljs-comment">// 当前度数可以使用 a[1]~a[j]</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = limit[i]; k &lt;= i * a[j]; k++) <span class="hljs-comment">// 当前的度数的总和</span><br>        <span class="hljs-keyword">if</span> (f[i][j][k] == <span class="hljs-number">1</span>) &#123;<br>          f[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>][k + a[j + <span class="hljs-number">1</span>]] = f[i + <span class="hljs-number">1</span>][j][k + a[j]] = <span class="hljs-number">1</span>;<br>          g[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>][k + a[j + <span class="hljs-number">1</span>]] = <span class="hljs-number">1</span>;<br>          g[i + <span class="hljs-number">1</span>][j][k + a[j]] = <span class="hljs-number">2</span>;<br>        &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">61</span>; i++)<br>    <span class="hljs-keyword">if</span> (f[i][m][i * (i - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>] == <span class="hljs-number">1</span>) &#123;n = i; <span class="hljs-keyword">break</span>;&#125;<br>  <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;std::cout &lt;&lt; <span class="hljs-string">&quot;=(&quot;</span> &lt;&lt; std::endl; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>  <span class="hljs-built_in">Get_degree</span>();<br>  <span class="hljs-comment">// for (int i = 1; i &lt;= n; i++) write(deg[i]), quad; Enter;</span><br>  <span class="hljs-built_in">write</span>(n); Enter;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) pos[i] = i;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    std::<span class="hljs-built_in">sort</span>(pos + i, pos + <span class="hljs-number">1</span> + n, cmp);<br>    <span class="hljs-comment">// for (int j = 1; j &lt;= n; j++) write(deg[pos[j]]), quad; Enter;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= i + deg[pos[i]]; j++) ok[pos[i]][pos[j]] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + deg[pos[i]] + <span class="hljs-number">1</span>; j &lt;= n; j++) ok[pos[j]][pos[i]] = <span class="hljs-number">1</span>, deg[pos[j]] --;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++, Enter)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) <span class="hljs-built_in">write</span>(ok[i][j]);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span> </span>&#123;<br>  <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, t = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c) &amp;&amp; c != <span class="hljs-string">&#x27;-&#x27;</span>) c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) c = <span class="hljs-built_in">getchar</span>(), t = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) s = s * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>  a = s * t;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>  <span class="hljs-type">int</span> top = <span class="hljs-number">0</span>, sta[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-keyword">while</span> (x) sta[++top] = x % <span class="hljs-number">10</span>, x /= <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">while</span> (top) <span class="hljs-built_in">putchar</span>(sta[top] + <span class="hljs-string">&#x27;0&#x27;</span>), top --;<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a, rest &amp;...x)</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(a); <span class="hljs-built_in">read</span>(x...);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x, rest ...a)</span> </span>&#123;<br>  <span class="hljs-built_in">write</span>(x); quad; <span class="hljs-built_in">write</span>(a...);<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AGC005D 做题体验</title>
    <link href="/2022/11/06/16536257/"/>
    <url>/2022/11/06/16536257/</url>
    
    <content type="html"><![CDATA[<p><ahref="https://www.luogu.com.cn/problem/AT2062"><strong>题目链接</strong></a>本人再次认为是一道不错的题目，可能是我菜。</p><h4 id="判定可行解">判定可行解</h4><p>首先假定我们已经得到了 <span class="math inline">\(a\)</span> 和<span class="math inline">\(b\)</span>这两个序列，我们如何判断是否是有解的。</p><p>从图论的角度去分解这个问题，我们设当前序列为 <spanclass="math inline">\(c\)</span> 。<br />当 <span class="math inline">\(c_i=c_j\)</span> 时，我们连一条 <spanclass="math inline">\((i,j)\)</span> 双向边，代表第 <spanclass="math inline">\(i\)</span> 位和第 <spanclass="math inline">\(j\)</span> 位的数字应是相同的。<br />很显然，这几条边把相同数字的点都连上了边，那么如果整张图中只有一个连通块时，说明都是一种数值。<br />那么该如何连边，在这道题中非常显然，对于回文串连边即可。<br />因为对于一个长度为 <span class="math inline">\(Len\)</span>的回文串，我们能够连 <spanclass="math inline">\(⌊\frac{Len}{2}⌋\)</span> 这样的边。<br />所以如果 <span class="math inline">\(Len\)</span>为奇数，就不能恰好连完所以的边，我们设奇数段的个数为 <spanclass="math inline">\(p\)</span> 。<br />那么很显然，一共会连出来 <spanclass="math inline">\(\frac{n-p}{2}\)</span>条边，因为要求只有一个连通块所以边数至少为 <spanclass="math inline">\(n-1\)</span> ，可以得出 <spanclass="math inline">\(p\leq 2\)</span> 的结论。</p><p>到现在为止，我们已经判断了是否有可行解的情况，现在考虑构造方案。</p><h4 id="p-0"><span class="math inline">\(p = 0\)</span></h4><p>先从 <span class="math inline">\(p=0\)</span> 也就是说 <spanclass="math inline">\(a\)</span> 中没有奇数元素的情况进行构造。<br />我们发现 <span class="math inline">\(a\)</span>可以保持不动，最主要的是要把相邻组的数字和同一组不同对的数组搞成一样。<br />这里直接给出结论： <span class="math display">\[B=\{A_1+1,A_2,A_3,\cdots,A_{m-1},A_m-1\}\]</span> <strong>注意，当 <span class="math inline">\(A_m-1 =0\)</span>的时候直接把最后一位省略即可。</strong></p><h4 id="p1-和-p2"><span class="math inline">\(p=1\)</span> 和 <spanclass="math inline">\(p=2\)</span></h4><p>其实我们只要构造出 <span class="math inline">\(A\)</span> 那么 <spanclass="math inline">\(B\)</span> 直接按照上述的情况构造即可。<br />当 <span class="math inline">\(p=1\)</span> 时，我们可以把奇数的元素<span class="math inline">\(A_{odd}\)</span> 放到 <spanclass="math inline">\(A\)</span> 的最后一个位置。<br />同样的，对于 <span class="math inline">\(p=2\)</span> 的情况，我们把<span class="math inline">\(A_{odd}\)</span>分别放到第一位和最后一位。<br /></p><p>上述的思路仔细思索还是不难理解的。<br />具体细节可以看一下代码: <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> quad putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">105</span>;<br><br><span class="hljs-type">int</span> n, m, a[N], s, b[N];<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  std::cin &gt;&gt; n &gt;&gt; m;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) std::cin &gt;&gt; a[i];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) s += (a[i] &amp; <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span> (s &gt; <span class="hljs-number">2</span>) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Impossible&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span>) &#123;<br>    std::cout &lt;&lt; a[<span class="hljs-number">1</span>] &lt;&lt; std::endl;<br>    <span class="hljs-keyword">if</span> (a[<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>) &#123;<br>      std::cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; std::endl &lt;&lt; <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    std::cout &lt;&lt; <span class="hljs-number">2</span> &lt;&lt; std::endl;<br>    std::cout &lt;&lt; <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; a[<span class="hljs-number">1</span>] - <span class="hljs-number">1</span> &lt;&lt; std::endl;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) std::cout &lt;&lt; a[i], quad; Enter;<br>    a[<span class="hljs-number">1</span>] ++; a[m] --;<br>    <span class="hljs-keyword">if</span> (a[m] == <span class="hljs-number">0</span>) m --;<br>    std::cout &lt;&lt; m &lt;&lt; std::endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) std::cout &lt;&lt; a[i], quad;<br>    Enter;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s == <span class="hljs-number">1</span>) &#123;<br>    std::<span class="hljs-built_in">stable_sort</span>(a + <span class="hljs-number">1</span>, a + <span class="hljs-number">1</span> + m, [](<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> q) &#123;<span class="hljs-keyword">return</span> p % <span class="hljs-number">2</span> &lt; q % <span class="hljs-number">2</span>;&#125;);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) std::cout &lt;&lt; a[i], quad; Enter;<br>    a[<span class="hljs-number">1</span>] ++; a[m] --;<br>    <span class="hljs-keyword">if</span> (a[m] == <span class="hljs-number">0</span>) m --;<br>    std::cout &lt;&lt; m &lt;&lt; std::endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) std::cout &lt;&lt; a[i], quad;<br>    Enter;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-type">int</span> first = <span class="hljs-number">-1</span>, last = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>      <span class="hljs-keyword">if</span> (a[i] % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span> (first == <span class="hljs-number">-1</span>) first = a[i];<br>      <span class="hljs-keyword">else</span> &#123;last = a[i]; <span class="hljs-keyword">break</span>;&#125;<br>    &#125; <br>    <span class="hljs-type">int</span> tot = <span class="hljs-number">1</span>;<br>    b[<span class="hljs-number">1</span>] = first;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) <br>      <span class="hljs-keyword">if</span> (a[i] % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) b[++tot] = a[i];<br>    b[++tot] = last;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) std::cout &lt;&lt; b[i], quad; Enter;<br>    b[<span class="hljs-number">1</span>] ++; b[m] --;<br>    <span class="hljs-keyword">if</span> (b[m] == <span class="hljs-number">0</span>) m --;<br>    std::cout &lt;&lt; m &lt;&lt; std::endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) std::cout &lt;&lt; b[i], quad;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>范德蒙德卷积 学习笔记</title>
    <link href="/2022/11/06/16526794/"/>
    <url>/2022/11/06/16526794/</url>
    
    <content type="html"><![CDATA[<p>直接放结论，反正我也不会证。</p><p><span class="math display">\[\sum_{i=0}^k\dbinom{n}{i}\dbinom{m}{k-i}=\dbinom{n+m}{k}\]</span></p><p>下面有几个推论，可以稍微不那么严谨的证明一下。</p><p>首先你要知道的是这个东西：</p><p><span class="math display">\[\dbinom{m}{i}=\dbinom{m}{m-i}\]</span></p><p>感性理解一下就是杨辉三角的对称性，其实直接拆式子也不是什么难事。<br />下面来看几个推论：</p><h3 id="推论一">推论一</h3><p><span class="math display">\[\sum_{i=1}^{n}\dbinom{n}{i}\dbinom{n}{i-1}=\dbinom{2n}{n+1}\]</span> 关于证明，我们可以把 <spanclass="math inline">\(\binom{n}{i-1}\)</span> 转化成为 <spanclass="math inline">\(\binom{n}{n-i+1}\)</span> 。<br />然后原式变成 <span class="math display">\[\sum_{i=1}^{n}\dbinom{n}{i}\dbinom{n}{n-i+1}\]</span> 直接套用公式就可以了。</p><h3 id="推论二">推论二</h3><p><span class="math display">\[\sum_{i=0}^n\dbinom{n}{i}^2=\dbinom{2n}{n}\]</span> 证明的话先把式子的平方拆开，变成这样 <spanclass="math display">\[\sum_{i=0}^n\dbinom{n}{i}\times\dbinom{n}{i}\]</span> 然后考虑这样的一个转换： <span class="math display">\[\dbinom{n}{i}=\dbinom{n}{n-i}\]</span> 带入原式可以发现，又变成了范德蒙德卷积的形式 <spanclass="math display">\[\sum_{i=0}^n\dbinom{n}{i}\dbinom{n}{n-i}\]</span></p><h3 id="推论三">推论三</h3><p><span class="math display">\[\sum_{i=0}^m\dbinom{n}{i}\dbinom{m}{i}=\dbinom{n+m}{m}\]</span> 证明也很简单，考虑这样的一个转换 <span class="math display">\[\dbinom{m}{i}=\dbinom{m}{m-i}\]</span> 带入以后成为范德蒙德卷积的形式： <span class="math display">\[\sum_{i=0}^m\dbinom{n}{i}\dbinom{m}{m-i}\]</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【题解】DZY Loves Math V</title>
    <link href="/2022/11/06/16727066/"/>
    <url>/2022/11/06/16727066/</url>
    
    <content type="html"><![CDATA[<h3 id="题目描述">题目描述</h3><p>给你 <span class="math inline">\(n\)</span> 个整数 <spanclass="math inline">\(a_i\)</span> 叫你求： <spanclass="math display">\[\sum_{i_1|a_1}\sum_{i_2|a_2}\sum_{i_3|a_3}\cdots\sum_{i_n|a_n}\varphi(i_1i_2i_3\cdotsi_n)\]</span></p><h3 id="简要思路">简要思路</h3><p>发现对于欧拉函数 <span class="math inline">\(\varphi(n)\)</span>为积性函数，所以不难想到对于每一个质数 <spanclass="math inline">\(p\)</span> 考虑贡献。</p><p>我们假设现在考虑到的质数为 <span class="math inline">\(p\)</span>，令对于每一个 <span class="math inline">\(a_i\)</span> 质数 <spanclass="math inline">\(p\)</span> 所对的最大指数为 <spanclass="math inline">\(b_i\)</span> 。<br />那么我们可以得到此时 <span class="math inline">\(p\)</span> 的贡献为：<span class="math display">\[\begin{split}S &amp;=\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}\varphi(p^{i_1}p^{i_2}p^{i_3}\cdots p^{i_n})\\&amp;=\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}\varphi(p^{i_1+i_2+i_3+\cdots+i_n})\end{split}\]</span> 考虑到对于 <span class="math inline">\(\varphi(p^n)\)</span>有这样的公式： <span class="math display">\[\varphi(p^n)=p^n\times\frac{p-1}{p}\]</span> 所以上式可以表示为： <span class="math display">\[\begin{split}S&amp;=\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}(p^{i_1+i_2+i_3+\cdots+i_n}\times\frac{p-1}{p})\\&amp;=\frac{p-1}{p}\times\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}p^{i_1+i_2+i_3+\cdots+i_n}\end{split}\]</span> 看上去没有任何问题，但是发现当 <spanclass="math inline">\(i_1=i_2=i_3=\cdots=i_n=0\)</span>时有一定的缺陷，所以改成： <span class="math display">\[\begin{split}S&amp;=\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}(p^{i_1+i_2+i_3+\cdots+i_n}\times\frac{p-1}{p})\\&amp;=\frac{p-1}{p}\times\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}p^{i_1+i_2+i_3+\cdots+i_n}\\&amp;=\left[\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}p^{i_1+i_2+i_3+\cdots+i_n}-1\right]\times\frac{p-1}{p}+1\end{split}\]</span> 现在发现后面的那一部分包括那个 <spanclass="math inline">\(-1\)</span>都是死的，所要计算的也就是下面这个式子： <span class="math display">\[\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}p^{i_1+i_2+i_3+\cdots+i_n}\]</span> 我们尝试着把这个式子拆开来看一下： <spanclass="math display">\[\begin{split}S&#39;&amp;=\sum_{i_1=0}^{b_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}p^{i_1+i_2+i_3+\cdots+i_n}\\&amp;=\sum_{i_1=0}^{b_1}p^{i_1}\sum_{i_2=0}^{b_2}\sum_{i_3=0}^{b_3}\cdots\sum_{i_n=0}^{b_n}p^{i_2+i_3+\cdots+i_n}\\&amp;=\sum_{i_1=0}^{b_1}p^{i_1}\sum_{i_2=0}^{b_2}p^{i_2}\sum_{i_3=0}^{b_3}p^{i_3}\cdots\sum_{i_n=0}^{b_n}p^{i_n}\\&amp;=\prod_{i=1}^n(1+p+p^2+\cdots +p^{b_i})\end{split}\]</span> 然后对所有的质数 <span class="math inline">\(p\)</span>去一个乘积就可以了，代码很简单。</p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(2)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> M = <span class="hljs-number">1e7</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> n, a[N], tag[M];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ret = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (n) &#123;<br>    <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>) ret = <span class="hljs-number">1ll</span> * ret * a % mod;<br>    a = <span class="hljs-number">1ll</span> * a * a % mod;<br>    n /= <span class="hljs-number">2</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  std::cin &gt;&gt; n;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= M - <span class="hljs-number">5</span>; i++) tag[i] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i]);<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-type">int</span> t = a[i], num = <span class="hljs-number">0</span>, mul = <span class="hljs-number">1</span>, ss = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">2</span>; j * j &lt;= t; j++) &#123;<br>      <span class="hljs-keyword">if</span> (t % j) <span class="hljs-keyword">continue</span>;<br>      num = <span class="hljs-number">0</span>; mul = <span class="hljs-number">1</span>; ss = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> (t % j == <span class="hljs-number">0</span>) t /= j, num ++;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= num; k ++) &#123;<br>        ss = (<span class="hljs-number">0ll</span> + ss + mul) % mod;<br>        mul = <span class="hljs-number">1ll</span> * mul * j % mod;<br>      &#125;<br>      tag[j] = <span class="hljs-number">1ll</span> * tag[j] * ss % mod;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (t &gt; <span class="hljs-number">1</span>) &#123;<br>      ss = <span class="hljs-number">1</span> + t;<br>      tag[t] = (<span class="hljs-number">1ll</span> * tag[t] * ss) % mod;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= M - <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (tag[i] == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-type">int</span> mul = <span class="hljs-number">1ll</span> * (tag[i] - <span class="hljs-number">1</span>) * (i - <span class="hljs-number">1</span>) % mod * <span class="hljs-built_in">power</span>(i, mod - <span class="hljs-number">2</span>) % mod + <span class="hljs-number">1</span>;<br>    mul = (<span class="hljs-number">1ll</span> * mul % mod + mod) % mod;<br>    ans = <span class="hljs-number">1ll</span> * ans * mul % mod;<br>  &#125;<br>  std::cout &lt;&lt; ans &lt;&lt; std::endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>交互入门题瞎做</title>
    <link href="/2022/11/06/16574484/"/>
    <url>/2022/11/06/16574484/</url>
    
    <content type="html"><![CDATA[<h2 id="luogu-p7045-mcoi-03金牌">luogu P7045 「MCOI-03」金牌</h2><p><ahref="https://www.luogu.com.cn/problem/P7045"><strong>题目链接</strong></a></p><p>看到题解中介绍了一种用于找出序列中出现次数大于 <spanclass="math inline">\(\left\lfloor\dfrac{n}{2}\right\rfloor\)</span>的摩尔投票法。<br />先来贺一波题解给出摩尔投票法的具体操作：<br /></p><ul><li>我们首先初始化变量 <spanclass="math inline">\(\text{ans=}a_1\)</span> , <spanclass="math inline">\(\text{cnt=}1\)</span> 。<br /></li><li>从此序列的第二个数开始扫描，直到第 <spanclass="math inline">\(n\)</span> 个数 <spanclass="math inline">\(a_n\)</span> ，我们假设现在扫描到了 <spanclass="math inline">\(a_i\)</span> 。<br /></li><li>如果此时 <span class="math inline">\(\text{ans=}a_i\)</span> 那么<span class="math inline">\(\text{cnt}\leftarrow \text{cnt}+ 1\)</span>否则 <span class="math inline">\(\text{cnt}\leftarrow \text{cnt}-1\)</span> 。<br /></li><li>如果此时 <span class="math inline">\(\text{cnt=}0\)</span>，那么我们更新 <span class="math inline">\(\text{ans=}a_i\)</span>。<br /></li><li>当我们全部扫完之后，<span class="math inline">\(\text{ans}\)</span>就是出现次数大于 <spanclass="math inline">\(\left\lfloor\dfrac{n}{2}\right\rfloor\)</span>的数 。</li></ul><p>我们现在着手来考虑这个东西和题目有什么联系。<br />经过简单的思考，我们可以发现当存在一个数出现次数大于 <spanclass="math inline">\(\left\lfloor\dfrac{n}{2}\right\rfloor\)</span>时，那么它就是无解的。<br />这个非常好理解，因为从鸽巢原理可以知道，此时一定会有两个相同的数它们是相邻的。<br /></p><p>如果我们要求出每两个奖牌的磁性的关系是不可能的，所以我们可以参照摩尔投票法。</p><ul><li>我们维护一个队列 <span class="math inline">\(\text{que}\)</span>，满足：队列中所有的元素的磁性都是一样的（对标 <spanclass="math inline">\(\text{ans}\)</span>）。<br /></li><li>同时最开始的时候把 <span class="math inline">\(0\)</span>号奖牌放在答案序列（对标初始化）。<br /></li><li>然后大致的含义和上述相同：相同磁场压入队列，不同磁场压入答案数组。<br /></li><li>一直这样模拟最后不难发现会得到一个答案序列和一个队列 <spanclass="math inline">\(\text{que}\)</span> 。<br /></li></ul><p>现在就是要解决那些多出来的出现次数最多的奖牌。<br />一种可以很好的放置多余的奖牌的方案就是在答案序列中插缝摆放，具体可以看代码。</p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> quad putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> T, n, q, flag, ans[N], tot;<br>std::queue &lt;<span class="hljs-type">int</span>&gt; que;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> id1, <span class="hljs-type">int</span> id2)</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, id1, id2);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ret);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  std::cin &gt;&gt; T;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> test = <span class="hljs-number">1</span>; test &lt;= T; test ++) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;q);<br>    flag = <span class="hljs-number">-1</span>; tot = <span class="hljs-number">0</span>; ans[++tot] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>()) que.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>      <span class="hljs-keyword">if</span> (que.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> tmp = <span class="hljs-built_in">ask</span>(i, ans[tot]);<br>        <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">1</span>) ans[++tot] = i;<br>        <span class="hljs-keyword">else</span> que.<span class="hljs-built_in">emplace</span>(i);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> tmp = <span class="hljs-built_in">ask</span>(i, que.<span class="hljs-built_in">front</span>());<br>        <span class="hljs-keyword">if</span> (tmp == <span class="hljs-number">1</span>) &#123;<br>          ans[++tot] = i, ans[++tot] = que.<span class="hljs-built_in">front</span>();<br>          que.<span class="hljs-built_in">pop</span>();<br>        &#125; <span class="hljs-keyword">else</span> que.<span class="hljs-built_in">emplace</span>(i);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span> * tot; i &gt;= <span class="hljs-number">1</span>; i -= <span class="hljs-number">2</span>)<br>      ans[i] = ans[i / <span class="hljs-number">2</span>], ans[i - <span class="hljs-number">1</span>] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (que.<span class="hljs-built_in">size</span>()) &#123;<br>      <span class="hljs-type">bool</span> last = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">2</span> * tot; i += <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-type">int</span> tmp = <span class="hljs-built_in">ask</span>(que.<span class="hljs-built_in">front</span>(), ans[i]);<br>        <span class="hljs-keyword">if</span> (tmp &amp;&amp; last) ans[i - <span class="hljs-number">1</span>] = que.<span class="hljs-built_in">front</span>(), que.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (!que.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">break</span>;<br>        last = tmp;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!que.<span class="hljs-built_in">empty</span>()) &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br>      <span class="hljs-built_in">fflush</span>(stdout);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * tot; i++)<br>        <span class="hljs-keyword">if</span> (ans[i] != <span class="hljs-number">-1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ans[i]);<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>      <span class="hljs-built_in">fflush</span>(stdout);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><hr /><h2 id="cf1033e-hidden-bipartite-graph">CF1033E Hidden BipartiteGraph</h2><p><a href="https://www.luogu.com.cn/problem/CF1033E"title="题目链接"><strong>题目链接</strong></a></p><p>这题看上去一脸不可做，对，我看什么题都不可做。。。<br />然后瞄一眼题解，发现一个小 <span class="math inline">\(\ttTrick\)</span> ：<br /><strong>判定二分图可以先拉出一个生成树，対生成树进行染色然后看相同颜色内有没有连边。</strong></p><p>所以现在的第一步是拉出一个生成树。<br />首先，我们先把题目中要求的交互函数写出来，我用一个 <spanclass="math inline">\(\tt vector\)</span> 记录查询的点集。<br />同时在我自己测试时发现可能会询问重复的点集，所以用一个 <spanclass="math inline">\(\tt map\)</span> 来记录已经查过的答案。<br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; chose)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (chose.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  std::<span class="hljs-built_in">sort</span>(chose.<span class="hljs-built_in">begin</span>(), chose.<span class="hljs-built_in">end</span>());<br>  <span class="hljs-keyword">if</span> (ma[chose]) <span class="hljs-keyword">return</span> ma[chose];<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;? &quot;</span>);<br>  <span class="hljs-built_in">write</span>(chose.<span class="hljs-built_in">size</span>()), Enter;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : chose) <span class="hljs-built_in">write</span>(t), quad; Enter;<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-type">int</span> ret; <span class="hljs-built_in">read</span>(ret); <br>  ma[chose] = ret; <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure> 接下来就按照生成树的角度进行思考。<br />首先我们需要并查集，这个非常简单不在累述，然后我们会发现要进行 <spanclass="math inline">\(n-1\)</span> 次连边操作。<br />对于每个连边操作，我们都要找到一个和根节点所在集合有边的点 <spanclass="math inline">\(p\)</span> 然后连边。<br />那么怎么找到这样的点 <span class="math inline">\(p\)</span>呢？这里有一个显然的结论：<br /></p><blockquote><p>对于点集 <span class="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> ，如果 <spanclass="math inline">\(A\)</span> 和 <spanclass="math inline">\(B\)</span> 中的点有边相连，那么满足 <spanclass="math inline">\(ask(A)+ask(B)&lt; ask(A\cup B)\)</span></p></blockquote><p>运用这个结论，我们就可以找到上文所讲的 <spanclass="math inline">\(p\)</span> 。</p><p>我们令根节点所在的点集为 <span class="math inline">\(A\)</span>，其他的点构成的点集为 <span class="math inline">\(B\)</span> 。<br />同时我们令上文结论中的查询方式为 <spanclass="math inline">\(check(A,B)\)</span> ，及调用 <spanclass="math inline">\(check(A,B)\)</span> 就可以知道是否有边。<br />因为询问次数控制较为严格，我们考虑 <span class="math inline">\(O(n\logn)\)</span> 的较大常数做法。<br />直接能够想到的是二分做法：（假设 <span class="math inline">\(B\)</span>集合的大小为 <span class="math inline">\(L\)</span>）<br /></p><ul><li>我们把 <span class="math inline">\(B\)</span>按照大小平均分成两个集合 <span class="math inline">\(B_1\)</span> 和<span class="math inline">\(B_2\)</span> 。<br /></li><li>分别查询 <span class="math inline">\(check(B_1,A)\)</span> 和 <spanclass="math inline">\(check(B_2,A)\)</span>，如果一个为真则取为真的，否则任意取一个。<br /></li><li>不难发现，最后集合 <span class="math inline">\(B\)</span>只会剩下一个节点，那个节点就是 <span class="math inline">\(p\)</span>。复杂度 <span class="math inline">\(O(\log n)\)</span> 。</li></ul><p>找到了 <span class="math inline">\(p\)</span> ，我们还要知道 <spanclass="math inline">\(p\)</span>和根节点集合中的哪一个点有边，按照相似的方法即可。<br />只不过此次查询的 <span class="math inline">\(check\)</span>操作更为简洁，复杂度还是 <span class="math inline">\(O(\log n)\)</span>。</p><p>重复 <span class="math inline">\(n-1\)</span>次上述的操作，我们就找到了一个生成树，接下来对树染色非常简单。<br />我们令染为白色和黑色的点集分别为 <spanclass="math inline">\(white\)</span> 和 <spanclass="math inline">\(black\)</span> ，进行一次 <spanclass="math inline">\(check(white,black)\)</span> 即可判断二分图。<br />如果是二分图，那么接下来非常简单，现在来讨论非二分图的情况。</p><p>我的做法是随机化，每一次对集合进行一次 <spanclass="math inline">\(\tt random_shuffle\)</span> ，然后取 <spanclass="math inline">\(\frac{L}{2}\)</span> 。<br />进行查询，如果可以的话让点集大小直接减半，<del>不知道对不对，反正我过了</del></p>所以这样下来，复杂度约为 <span class="math inline">\(O(n\log n)\)</span>带上 <span class="math inline">\(3\sim 5\)</span>倍常数，可以通过。<br />具体可以看代码：<details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> quad putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><br><span class="hljs-keyword">using</span> std::abs;<br><span class="hljs-keyword">using</span> std::pair;<br><span class="hljs-keyword">using</span> std::string;<br><span class="hljs-keyword">using</span> std::make_pair;<br><br><span class="hljs-comment">// #define int long long</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span></span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a, rest &amp;...x)</span></span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x, rest ...a)</span></span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1005</span>;<br><br><span class="hljs-type">int</span> n, root_edge, tot, ok[N], edgetot, col[N];<br><span class="hljs-type">int</span> deep[N], fa[N][<span class="hljs-number">15</span>], sta[N], top;<br>std::vector &lt;<span class="hljs-type">int</span>&gt; now, rt, white, black;<br>std::vector &lt;<span class="hljs-type">int</span>&gt; dis[N];<br><br>std::map &lt;std::vector&lt;<span class="hljs-type">int</span>&gt;, <span class="hljs-type">int</span>&gt; ma;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>  <span class="hljs-type">int</span> x, y;<br>  <span class="hljs-built_in">Edge</span> (<span class="hljs-type">int</span> _x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _y = <span class="hljs-number">0</span>) &#123;x = _x; y = _y;&#125;<br>&#125; edge[N * N];<br><span class="hljs-keyword">namespace</span> UFST &#123;<br><span class="hljs-type">int</span> fa[N], siz[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">rebuild</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; chose)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (chose.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  std::<span class="hljs-built_in">sort</span>(chose.<span class="hljs-built_in">begin</span>(), chose.<span class="hljs-built_in">end</span>());<br>  <span class="hljs-keyword">if</span> (ma[chose]) <span class="hljs-keyword">return</span> ma[chose];<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;? &quot;</span>);<br>  <span class="hljs-built_in">write</span>(chose.<span class="hljs-built_in">size</span>()), Enter;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : chose) <span class="hljs-built_in">write</span>(t), quad; Enter;<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-type">int</span> ret; <span class="hljs-built_in">read</span>(ret); <br>  ma[chose] = ret; <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>  now.<span class="hljs-built_in">clear</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++) now.<span class="hljs-built_in">emplace_back</span>(ok[i]);<br>  <span class="hljs-type">int</span> edge1 = <span class="hljs-built_in">ask</span>(now);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : rt) now.<span class="hljs-built_in">emplace_back</span>(t);<br>  <span class="hljs-type">int</span> edge2 = <span class="hljs-built_in">ask</span>(now);<br>  <span class="hljs-keyword">if</span> (edge1 + root_edge &lt; edge2) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">check2</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> p)</span> </span>&#123;<br>  now.<span class="hljs-built_in">clear</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l; i &lt;= r; i++) now.<span class="hljs-built_in">emplace_back</span>(ok[i]);<br>  <span class="hljs-type">int</span> edge1 = <span class="hljs-built_in">ask</span>(now);<br>  now.<span class="hljs-built_in">emplace_back</span>(p);<br>  <span class="hljs-type">int</span> edge2 = <span class="hljs-built_in">ask</span>(now);<br>  <span class="hljs-keyword">if</span> (edge1 &lt; edge2) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">LCA</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(n); UFST::<span class="hljs-built_in">rebuild</span>(n);<br>  <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Y 1 \n1&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  now.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-number">1</span>); <br>  root_edge = <span class="hljs-built_in">ask</span>(now);<br>  rt = now;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> edgenum = <span class="hljs-number">1</span>, rootteam; edgenum &lt; n; edgenum++) &#123;<br>    root_edge = <span class="hljs-built_in">ask</span>(rt);<br>    tot = <span class="hljs-number">0</span>, rootteam = UFST::<span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>      <span class="hljs-keyword">if</span> (UFST::<span class="hljs-built_in">find</span>(i) != rootteam) ok[++tot] = i;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">1</span>, right = tot, mid;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>      mid = (left + right) / <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(left, mid)) right = mid;<br>      <span class="hljs-keyword">else</span> left = mid + <span class="hljs-number">1</span>; <br>    &#125;<br>    <span class="hljs-type">int</span> point = ok[left];<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : rt) ok[++tot] = t;<br>    left = <span class="hljs-number">1</span>; right = tot;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>      mid = (left + right) / <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check2</span>(left, mid, point)) right = mid;<br>      <span class="hljs-keyword">else</span> left = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    UFST::<span class="hljs-built_in">merge</span>(ok[left], point);<br>    edge[++edgetot] = <span class="hljs-built_in">Edge</span>(ok[left], point);<br>    rt.<span class="hljs-built_in">emplace_back</span>(point);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= edgetot; i++) &#123;<br>    Edge p = edge[i];<br>    dis[p.x].<span class="hljs-built_in">emplace_back</span>(p.y);<br>    dis[p.y].<span class="hljs-built_in">emplace_back</span>(p.x);<br>  &#125;<br>  <span class="hljs-built_in">DFS</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (col[i] == <span class="hljs-number">0</span>) white.<span class="hljs-built_in">emplace_back</span>(i);<br>    <span class="hljs-keyword">else</span> black.<span class="hljs-built_in">emplace_back</span>(i);<br>  &#125;<br>  <span class="hljs-comment">// for (int num : white) write(num), quad; Enter;</span><br>  <span class="hljs-comment">// for (int num : black) write(num), quad; Enter;</span><br>  <span class="hljs-type">int</span> edge1 = <span class="hljs-built_in">ask</span>(white), edge2 = <span class="hljs-built_in">ask</span>(black);<br>  <span class="hljs-comment">// printf(&quot;!!!&quot;);write(white.size(), edge1);</span><br>  <span class="hljs-type">int</span> p1, p2;<br>  <span class="hljs-keyword">if</span> (edge1 == <span class="hljs-number">0</span> &amp;&amp; edge2 == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Y &quot;</span>); <span class="hljs-built_in">write</span>(white.<span class="hljs-built_in">size</span>()), Enter;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : white) <span class="hljs-built_in">write</span>(num), quad; Enter;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (edge1 != <span class="hljs-number">0</span>) &#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : white) ok[++tot] = num;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>      now.<span class="hljs-built_in">clear</span>();<br>      std::<span class="hljs-built_in">random_shuffle</span>(ok + <span class="hljs-number">1</span>, ok + <span class="hljs-number">1</span> + tot);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i * <span class="hljs-number">2</span> - <span class="hljs-number">1</span> &lt;= std::<span class="hljs-built_in">max</span>(tot, <span class="hljs-number">3</span>); i++) now.<span class="hljs-built_in">emplace_back</span>(ok[i]);<br>      <span class="hljs-comment">// for (int t : now) write(t), quad; Enter; write(ask(now)); Enter;</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ask</span>(now)) &#123; <br>        <span class="hljs-keyword">if</span> (now.<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>) &#123;p1 = ok[<span class="hljs-number">1</span>]; p2 = ok[<span class="hljs-number">2</span>]; <span class="hljs-keyword">break</span>;&#125;<br>        tot = (tot + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>      &#125;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (edge2 != <span class="hljs-number">0</span>) &#123;<br>    tot = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : black) ok[++tot] = num;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>      now.<span class="hljs-built_in">clear</span>();<br>      std::<span class="hljs-built_in">random_shuffle</span>(ok + <span class="hljs-number">1</span>, ok + <span class="hljs-number">1</span> + tot);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i * <span class="hljs-number">2</span> - <span class="hljs-number">1</span> &lt;= tot; i++) now.<span class="hljs-built_in">emplace_back</span>(ok[i]);<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ask</span>(now)) &#123; <br>        <span class="hljs-keyword">if</span> (now.<span class="hljs-built_in">size</span>() == <span class="hljs-number">2</span>) &#123;p1 = ok[<span class="hljs-number">1</span>]; p2 = ok[<span class="hljs-number">2</span>]; <span class="hljs-keyword">break</span>;&#125;<br>        tot = (tot + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;N &quot;</span>); <br>  <span class="hljs-type">int</span> lca = <span class="hljs-built_in">LCA</span>(p1, p2);<br>  <span class="hljs-built_in">write</span>(deep[p1] + deep[p2] - <span class="hljs-number">2</span> * deep[lca] + <span class="hljs-number">1</span>); Enter;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-built_in">write</span>(p1), quad;<br>    p1 = fa[p1][<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">if</span> (p1 == lca) <span class="hljs-keyword">break</span>;<br>  &#125; <br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    sta[++top] = p2;<br>    <span class="hljs-keyword">if</span> (p2 == lca) <span class="hljs-keyword">break</span>;<br>    p2 = fa[p2][<span class="hljs-number">0</span>];<br>  &#125;<br>  <span class="hljs-keyword">while</span> (top) <span class="hljs-built_in">write</span>(sta[top]), quad, top --; Enter;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> father)</span> </span>&#123;<br>  deep[now] = deep[father] + <span class="hljs-number">1</span>;<br>  col[now] = <span class="hljs-number">1</span> - col[father];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">12</span>; i++) fa[now][i + <span class="hljs-number">1</span>] = fa[fa[now][i]][i];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : dis[now]) &#123;<br>    <span class="hljs-keyword">if</span> (t == father) <span class="hljs-keyword">continue</span>;<br>    fa[t][<span class="hljs-number">0</span>] = now;<br>    <span class="hljs-built_in">DFS</span>(t, now);<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">LCA</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (deep[x] &lt; deep[y]) std::<span class="hljs-built_in">swap</span>(x, y);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">13</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    <span class="hljs-keyword">if</span> (deep[fa[x][i]] &gt;= deep[y]) x = fa[x][i];<br>  <span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">return</span> x;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">13</span>; i &gt;= <span class="hljs-number">0</span>; i--)<br>    <span class="hljs-keyword">if</span> (fa[x][i] != fa[y][i]) x = fa[x][i], y = fa[y][i];<br>  <span class="hljs-keyword">return</span> fa[x][<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-keyword">namespace</span> UFST &#123;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> x == fa[x] ? x : fa[x] = <span class="hljs-built_in">find</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">rebuild</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) fa[i] = i, siz[i] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  x = <span class="hljs-built_in">find</span>(x); y = <span class="hljs-built_in">find</span>(y);<br>  <span class="hljs-keyword">if</span> (x == y) <span class="hljs-keyword">return</span> ;<br>  <span class="hljs-keyword">if</span> (siz[x] &gt; siz[y]) std::<span class="hljs-built_in">swap</span>(x, y);<br>  fa[x] = y; siz[y] += siz[x];<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span> </span>&#123;<br>  <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>, t = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c) &amp;&amp; c != <span class="hljs-string">&#x27;-&#x27;</span>) c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>) c = <span class="hljs-built_in">getchar</span>(), t = <span class="hljs-number">-1</span>;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) s = s * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>  a = s * t;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>  <span class="hljs-type">int</span> top = <span class="hljs-number">0</span>, sta[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-keyword">while</span> (x) sta[++top] = x % <span class="hljs-number">10</span>, x /= <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">while</span> (top) <span class="hljs-built_in">putchar</span>(sta[top] + <span class="hljs-string">&#x27;0&#x27;</span>), top --;<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a, rest &amp;...x)</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(a); <span class="hljs-built_in">read</span>(x...);<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> ...rest&gt; <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x, rest ...a)</span> </span>&#123;<br>  <span class="hljs-built_in">write</span>(x); quad; <span class="hljs-built_in">write</span>(a...);<br>&#125;<br><br></code></pre></td></tr></table></figure></details><h2 id="cf1129e-legendary-tree">CF1129E Legendary Tree</h2><p><ahref="https://www.luogu.com.cn/problem/CF1129E"><strong>题目链接</strong></a></p><p>一道自认为很有意思的交互题。<br />题目给出的询问方式看上去非常申必，但是我们可以从树的性质下手进行分析。</p><p>我们假定这个树的根节点是 <span class="math inline">\(1\)</span>，那么很显然，我们可以进行 <span class="math inline">\(n-1\)</span>次询问。<br />对于第 <span class="math inline">\(i\)</span> 次询问，我们是这样的：<span class="math display">\[\{\{1\},\{2,3,\cdots ,n-1,n\},i\}\]</span> 这个表示从根节点出发，经过 <spanclass="math inline">\(i\)</span> 节点最后能到达树上的几个节点。<br />几乎不用想的，上述询问直接给出了第 <spanclass="math inline">\(i\)</span> 个节点的子树大小 <spanclass="math inline">\(siz\)</span> 。<br />现在每一个节点的子树大小都确定了，问题转化成为对于节点 <spanclass="math inline">\(i\)</span> 确定它的父亲节点是什么。</p><p>考虑到随着节点深度的不断增加，节点的子树大小一定不断减小。<br />所以我们按照 <span class="math inline">\(siz\)</span>从小到大排序，这样的话对于每一个节点 <spanclass="math inline">\(i\)</span> ，它的儿子一定是在它的左边。<br />现在问题就是在 <span class="math inline">\(i\)</span>左边所有没有被选择的节点中高效率地找到 <spanclass="math inline">\(i\)</span> 的儿子们。</p><p>在这里，我们可以用二分的方法来解决这个问题：<br />我们假定现在已经扫到了第 <span class="math inline">\(i\)</span>个节点，我们记 <span class="math inline">\(i\)</span>左边没有被选的节点集合为 <span class="math inline">\(S\)</span> 。<br />首先，二分的左边界 <span class="math inline">\(L\)</span> 一定是 <spanclass="math inline">\(1\)</span> ，有边界我们定为 <spanclass="math inline">\(|S|\)</span> ，及 <spanclass="math inline">\(S\)</span> 集合的大小。<br />我们记此时二分出的值为 <span class="math inline">\(mid\)</span>，那么我们进行如下的询问： <span class="math display">\[\{\{1\},\{S_1,S_2,\cdots ,S_{mid-1},S_{mid}\}, u\}\]</span> 其中 <span class="math inline">\(u\)</span>表示当前扫到的节点的编号。<br />当我们发现询问的值大于 <span class="math inline">\(0\)</span>时，我们就缩小范围，否则就增大范围。<br />最后我们要找的是满足上述询问大于 <span class="math inline">\(0\)</span>的最小的 <span class="math inline">\(pos\)</span> ，<spanclass="math inline">\(pos\)</span> 表示排完序后的节点编号。<br />容易发现，其实最后一个 <span class="math inline">\(pos\)</span>位置上的节点一定是 <span class="math inline">\(u\)</span> 的孩子，<spanclass="math inline">\(u\)</span> 的定义如上。</p>这样进行不断的询问，可以发现询问次数是 <spanclass="math inline">\(O(n^2\log n)\)</span> 级别的，显然可以通过。<details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">505</span>;<br><br><span class="hljs-type">int</span> n, root, siz[N], fa[N], st[N], tot;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>  <span class="hljs-type">int</span> id, siz;<br>  <span class="hljs-built_in">Node</span> (<span class="hljs-type">int</span> _id = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _siz = <span class="hljs-number">0</span>) &#123;<br>    id = _id; siz = _siz;<br>  &#125;<br>  <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Node &amp;p, <span class="hljs-type">const</span> Node &amp;q) &#123;<br>    <span class="hljs-keyword">return</span> p.siz &lt; q.siz;<br>  &#125;<br>&#125; node[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask_size</span><span class="hljs-params">(<span class="hljs-type">int</span> point)</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1\n1\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n - <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d\n&quot;</span>, point);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-type">int</span> ret; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ret);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> point, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1\n1\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, right);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= right; i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, st[i]);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, point);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-type">int</span> ret; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ret);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>  root = <span class="hljs-number">1</span>; siz[root] = n;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) siz[i] = <span class="hljs-built_in">ask_size</span>(i);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) node[i] = <span class="hljs-built_in">Node</span>(i, siz[i]);<br>  std::<span class="hljs-built_in">sort</span>(node + <span class="hljs-number">1</span>, node + <span class="hljs-number">1</span> + n);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>      tot = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; i; j++) <br>        <span class="hljs-keyword">if</span> (fa[node[j].id] == <span class="hljs-number">0</span>) st[++tot] = node[j].id;<br>      <span class="hljs-type">int</span> left = <span class="hljs-number">1</span>, right = tot, ans = n + <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>        <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ask</span>(node[i].id, mid)) &#123;<br>          right = mid - <span class="hljs-number">1</span>;<br>          ans = std::<span class="hljs-built_in">min</span>(ans, mid);<br>        &#125; <span class="hljs-keyword">else</span> left = mid + <span class="hljs-number">1</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (ans == n + <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;<br>      fa[st[ans]] = node[i].id;<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ANSWER\n&quot;</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, fa[i], i);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><h2 id="cf1705f-mark-and-the-online-exam">CF1705F Mark and the OnlineExam</h2><p><ahref="https://www.luogu.com.cn/problem/CF1705F"><strong>题目链接</strong></a></p><p>看上去像是经典交互问题，但是好像不太会……</p><p>这道题的一种非常直接的想法也是第一步就是先全部试一下 <spanclass="math inline">\(\text{T}\)</span> 然后你就能得到一共有多少个答案为<span class="math inline">\(\text{T}\)</span> 。</p><p>然后最暴力的方法就是每一次把其中一个选项变成 <spanclass="math inline">\(\text{F}\)</span> 然后查询结果。<br />正确性是没得讲，但是这样操作的询问次数是 <spanclass="math inline">\(O(n)\)</span> 的级别，会 <spanclass="math inline">\(\text{Wrong Answer on test 9}\)</span> 。</p><p>下面是一种看到的非常巧妙的构造询问的方法：<br />看到 <span class="math inline">\(n\)</span>和询问次数的数量级关系，容易判断出询问的次数要是 <spanclass="math inline">\(\frac{n}{3}\)</span> 级别才不会有问题。<br />我们考虑把这 <span class="math inline">\(n\)</span>个选择题平均地分成三个部分，同时为了方便，我们定义 <spanclass="math inline">\(m=\left\lfloor\dfrac{n}{3}\right\rfloor\)</span>。</p><p>令序列 <span class="math inline">\(S\)</span>为询问时我们的答案，<spanclass="math inline">\(\text{ret=ask(S)}\)</span>表示一次询问操作。<br />1. 最简单的一步令 <span class="math inline">\(S=\{T,T,\cdots,T\}\)</span> ，<span class="math inline">\(\text{num=ask(S)}\)</span>表示答案中有多少个 <span class="math inline">\(\text{T}\)</span>。<br />2. 对于每一个 <span class="math inline">\(i\ (i\leq m)\)</span> ，我们把<span class="math inline">\(i\)</span> 和 <spanclass="math inline">\(i+m\)</span> 这两位变成 <spanclass="math inline">\(\text{F}\)</span> 其他的位仍然是 <spanclass="math inline">\(\text{T}\)</span> ，进行询问 <spanclass="math inline">\(\text{ret=ask(S)}\)</span> ，然后对 <spanclass="math inline">\(\text{ret}\)</span> 进行分讨。</p><pre><code class="hljs">* $ret=num+2$ 说明这两个猜对了，所以 $i$ 和 $i + m$ 这两位都是 $\text&#123;F&#125;$ 。\</code></pre><ul><li><p><span class="math inline">\(ret=num-2\)</span>说明两个都猜错了，所以 <span class="math inline">\(i\)</span> 和 <spanclass="math inline">\(i + m\)</span> 这两位都是 <spanclass="math inline">\(\text{T}\)</span> 。<br /></p></li><li><p><span class="math inline">\(ret=num\)</span>说明一个猜对一个猜错了，我们先放一边，不进行考虑。<br /></p></li></ul><ol start="3" type="1"><li><p>令 <span class="math inline">\(S&#39;=m\times \text{F} +(n-m)\times \text{T}\)</span> ，进行询问 <spanclass="math inline">\(\text{q3=ask(S&#39;)}\)</span> 。<br /></p></li><li><p>对于每一个 <span class="math inline">\(i\ (i\leq m \text{且第}\  i\ \text{位还没有被确定})\)</span>，我们把 <spanclass="math inline">\(S&#39;\)</span> 的第 <spanclass="math inline">\(i\)</span> 变成 <spanclass="math inline">\(\text{T}\)</span>，第 <spanclass="math inline">\(i+m\)</span> 和 <spanclass="math inline">\(i+2m\)</span> 位变成 <spanclass="math inline">\(\text{T}\)</span> ，在对其进行询问 <spanclass="math inline">\(\text{ret=ask(S&#39;&#39;)}\)</span>。<br /></p><ul><li><p><span class="math inline">\(ret = q3+3\)</span>三个都猜对了，答案就是 <span class="math inline">\(\text{TFF}\)</span>。 </p></li><li><p><span class="math inline">\(ret = q3-3\)</span>三个都猜错了，答案是 <span class="math inline">\(\text{FTT}\)</span>。<br /></p></li><li><p><span class="math inline">\(ret = q3+1\)</span>对了两个错了一个，结合上述的分析以及 <strong>情况2</strong>的排查可以得出答案是 <span class="math inline">\(\text{TFT}\)</span>，在这里不再证明。<br /></p></li><li><p><span class="math inline">\(ret = q3-1\)</span>对了一个错了两个，同理，答案是 <spanclass="math inline">\(\text{FTF}\)</span> 。<br /></p></li></ul></li><li><p>对于所有还没有确定的，直接按照最暴力的方法去做就可以了。<br /></p></li></ol><p>容易发现询问次数是 <spanclass="math inline">\(O(\left\lfloor\dfrac{n}{3}\right\rfloor)\)</span>级别的，没有任何问题。</p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;random&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e3</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">int</span> n, ans[N], visit[N], num, out[N], ret, q3;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> *ans)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (ans[i] == <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;T&quot;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;F&quot;</span>);<br>  &#125; Enter;<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-type">int</span> ret; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ret);<br>  <span class="hljs-keyword">if</span> (ret == n) <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n); <br>  <span class="hljs-built_in">memset</span>(out, <span class="hljs-number">-1</span>, <span class="hljs-built_in">sizeof</span>(out));<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) ans[i] = <span class="hljs-number">1</span>;<br>  num = <span class="hljs-built_in">ask</span>(ans);<br>  <span class="hljs-type">int</span> m = n / <span class="hljs-number">3</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>    <span class="hljs-type">int</span> x = i, y = i + m;<br>    ans[x] = ans[y] = <span class="hljs-number">0</span>;<br>    ret = <span class="hljs-built_in">ask</span>(ans);<br>    <span class="hljs-keyword">if</span> (ret == num + <span class="hljs-number">2</span>) out[x] = out[y] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == num - <span class="hljs-number">2</span>) out[x] = out[y] = <span class="hljs-number">1</span>; <br>    ans[x] = ans[y] = <span class="hljs-number">1</span>; <br>  &#125;<br>  std::<span class="hljs-built_in">fill</span>(ans + <span class="hljs-number">1</span>, ans + <span class="hljs-number">1</span> + n, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) ans[i] = <span class="hljs-number">0</span>;<br>  q3 = <span class="hljs-built_in">ask</span>(ans);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>    <span class="hljs-keyword">if</span> (out[i] != <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br>    ans[i] = <span class="hljs-number">1</span>, ans[i + m] = <span class="hljs-number">0</span>, ans[i + <span class="hljs-number">2</span> * m] = <span class="hljs-number">0</span>;<br>    ret = <span class="hljs-built_in">ask</span>(ans);<br>    <span class="hljs-keyword">if</span> (ret == q3 - <span class="hljs-number">3</span>) &#123;<br>      out[i] = <span class="hljs-number">0</span>; out[i + m] = <span class="hljs-number">1</span>, out[i + <span class="hljs-number">2</span> * m] = <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == q3 + <span class="hljs-number">3</span>) &#123;<br>      out[i] = <span class="hljs-number">1</span>; out[i + m] = <span class="hljs-number">0</span>; out[i + <span class="hljs-number">2</span> * m] = <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == q3 + <span class="hljs-number">1</span>) &#123;<br>      out[i] = <span class="hljs-number">1</span>; out[i + m] = <span class="hljs-number">0</span>; out[i + <span class="hljs-number">2</span> * m] = <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == q3 - <span class="hljs-number">1</span>) &#123;<br>      out[i] = <span class="hljs-number">0</span>; out[i + m] = <span class="hljs-number">1</span>; out[i + <span class="hljs-number">2</span> * m] = <span class="hljs-number">0</span>;<br>    &#125;<br>    ans[i] = <span class="hljs-number">0</span>, ans[i + m] = <span class="hljs-number">1</span>, ans[i + <span class="hljs-number">2</span> * m] = <span class="hljs-number">1</span>;<br>  &#125;<br>  std::<span class="hljs-built_in">fill</span>(ans + <span class="hljs-number">1</span>, ans + <span class="hljs-number">1</span> + n, <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (out[i] != <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br>    ans[i] = <span class="hljs-number">0</span>;<br>    ret = <span class="hljs-built_in">ask</span>(ans);<br>    <span class="hljs-keyword">if</span> (ret &lt; num) out[i] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> out[i] = <span class="hljs-number">0</span>;<br>    ans[i] = <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>    <span class="hljs-built_in">printf</span>(out[i] == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;T&quot;</span> : <span class="hljs-string">&quot;F&quot;</span>);<br>  Enter;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><h2 id="cf1142e-pink-floyd">CF1142E Pink Floyd</h2><p><ahref="https://www.luogu.com.cn/problem/CF1142E"><strong>题目链接</strong></a></p><p>好申必的题，可能是因为我水平不够吧……</p><p>为了解决这道题，首先我们要解决没有粉色边全部是绿色边的情况。<br />因为询问的操作次数上限是 <span class="math inline">\(2n\)</span>再加上交互库有自适应功能，所以找 <span class="math inline">\(u\)</span>再验证显然是不可能的。<br />我没有证明，也就感性理解一下好像没有什么大的问题。</p><p>然后发现一种神奇的做法：可以逐步去筛选那些可能是 <spanclass="math inline">\(u\)</span> 的点，最后剩下的显然就是答案。<br />初始化时所有的点都在候选的集合里面，我们令这个集合为 <spanclass="math inline">\(S\)</span> 。<br />枚举 <span class="math inline">\(u,v\in S\)</span> 如果 <spanclass="math inline">\(u\rightarrow v\)</span> 我们就把 <spanclass="math inline">\(v\)</span> 从 <spanclass="math inline">\(S\)</span> 中删掉，否则把 <spanclass="math inline">\(u\)</span> 从 <spanclass="math inline">\(S\)</span> 中删掉。<br />这个东西是非常显然的，因为我们假设令 <spanclass="math inline">\(P(x)\)</span> 表示 <spanclass="math inline">\(x\)</span>点能到的所有点的集合，这个时候我们可以发现当 <spanclass="math inline">\(u\rightarrow v\)</span> 的时候可以直接把 <spanclass="math inline">\(v\)</span> 纳入到 <spanclass="math inline">\(P(u)\)</span> 里面去，所以在不在 <spanclass="math inline">\(S\)</span> 中就不那么必要了。<br />容易发现：每一次询问都会有一个点从 <spanclass="math inline">\(S\)</span> 集合中删去，我们一共进行 <spanclass="math inline">\(n-1\)</span>此操作就可以使集合只剩下一个元素，也就是答案。</p><p>现在来考虑完整的题目：由数据的范围可以看出，只走粉边到达所有的点是不可能的事情，所以考虑从绿边下手。<br />同样的，我们还是要先确定一个可能的答案集合 <spanclass="math inline">\(S\)</span> ，使得 <spanclass="math inline">\(S\)</span>中任意的两个点没有粉边相连，且满足集合内的点能通过一些构造的手段使得能和非集合中的点连边。<br />因为集合中是没有粉边的情况的，所以我们又回到了一开始 <spanclass="math inline">\(m=0\)</span>的问题上，可以直接调用构造的方法。</p><p>仔细分析上述筛选答案的方法，可以发现 <spanclass="math inline">\(S\)</span> 中点的入读度一定是 <spanclass="math inline">\(0\)</span> 所以我们可以维护一个拓扑排序。<br />每次弹出两个点，然后然后按照筛选的方法舍弃一个，另一个加入到队列中，最后剩下的就是<span class="math inline">\(u\)</span> 。<br />讲的不太明白，具体可以看一下代码。</p><p>询问的复杂度是 <span class="math inline">\(O(n+m)\)</span>级别的，没有压力。</p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> quad putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> n, m, ok[<span class="hljs-number">305</span>][<span class="hljs-number">305</span>], visit[N], in[N], deg[N];<br>std::vector &lt;<span class="hljs-type">int</span>&gt; dis1[N], dis2[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;? %d %d\n&quot;</span>, a, b);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-type">int</span> ret; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;ret);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(<span class="hljs-type">int</span> now)</span> </span>&#123;<br>  visit[now] = in[now] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : dis1[now]) &#123;<br>    <span class="hljs-keyword">if</span> (in[t] == <span class="hljs-number">0</span>) &#123;<br>      deg[t] ++;<br>      dis2[now].<span class="hljs-built_in">emplace_back</span>(t);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (visit[t] == <span class="hljs-number">0</span>) <span class="hljs-built_in">DFS</span>(t);<br>  &#125;<br>  in[now] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt;= m; i++) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);<br>    dis1[x].<span class="hljs-built_in">emplace_back</span>(y);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (visit[i]) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">DFS</span>(i);<br>  &#125;<br>  std::queue &lt;<span class="hljs-type">int</span>&gt; que;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <br>    <span class="hljs-keyword">if</span> (deg[i] == <span class="hljs-number">0</span>) que.<span class="hljs-built_in">emplace</span>(i);<br>  <span class="hljs-keyword">while</span> (que.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-type">int</span> u = que.<span class="hljs-built_in">front</span>(); que.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-type">int</span> v = que.<span class="hljs-built_in">front</span>(); que.<span class="hljs-built_in">pop</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">ask</span>(u, v) == <span class="hljs-number">0</span>) std::<span class="hljs-built_in">swap</span>(u, v);<br>    que.<span class="hljs-built_in">push</span>(u);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : dis2[v]) &#123;<br>      deg[t] --;<br>      <span class="hljs-keyword">if</span> (deg[t] == <span class="hljs-number">0</span>) que.<span class="hljs-built_in">emplace</span>(t);<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;! %d\n&quot;</span>, que.<span class="hljs-built_in">front</span>());<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></details><p><strong>给我点赞瞄，给我点赞谢谢喵。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组合计数入门题瞎做</title>
    <link href="/2022/11/06/16579490/"/>
    <url>/2022/11/06/16579490/</url>
    
    <content type="html"><![CDATA[<h2 id="luogu-p5135-painting">luogu P5135 painting</h2><p><ahref="https://www.luogu.com.cn/problem/P5135"><strong>题目链接</strong></a></p><p>很入门的一道题，没有什么难度。<br />显然的，按照 <span class="math inline">\(op\)</span> 进行分类讨论：</p><ul><li><p><span class="math inline">\(op=1\)</span> ，答案是 <spanclass="math inline">\(\dbinom{n}{m}\)</span>。原因很简单，先随机得到所在列然后排个序就可以了。</p></li><li><p><span class="math inline">\(op=0\)</span> ，答案是 <spanclass="math inline">\(\dbinom{n+m-1}{m}\)</span>。也不难，考虑上述情况的解法，这里不再累述。</p></li></ul><p>此时因为 <span class="math inline">\(T\)</span> 和 <spanclass="math inline">\(m\)</span>都很小，所以直接暴力算组合数就可以了。<br />所以代码难度是小学组的，复杂度 <spanclass="math inline">\(O(Tm)\)</span> ，代码不放了。</p><h2 id="hnoi2011-卡农">[HNOI2011] 卡农</h2><p><ahref="https://www.luogu.com.cn/problem/P3214"><strong>题目链接</strong></a></p><p>好牛逼的一道题…… 可能是因为我太菜了……<br />发现对于两个不同的曲子的定义没有什么用处，先求出总的结果然后除以 <spanclass="math inline">\(m!\)</span> 就可以了。</p><p>然后我就不会了，最后只能看一眼题解……<br />考虑现在把题目进行转化：我们把音阶看成一个集合<br /><span class="math display">\[S=\{1,2,3,\cdots ,n-1,n\}\]</span>然后我们从这个集合 <span class="math inline">\(S\)</span> 中抽取 <spanclass="math inline">\(m\)</span>个不为空的子集作为题目中提到的音乐段。<br />我们定义取出的音乐段的集合为 <span class="math inline">\(S_2\)</span>，那么根据题目的描述，有两个个非常显然的限制：</p><ul><li><p>对于任意 <span class="math inline">\(s_1,s_2\in S_2\)</span>，满足 <span class="math inline">\(s_1\neq s_2\)</span> 。<br /></p></li><li><p>所有集合 <span class="math inline">\(S_2\)</span>中的片段，不同音阶的出现次数应该为偶数。</p></li></ul><p>考虑用 <span class="math inline">\(\text{dp}\)</span>解决问题，设状态 <span class="math inline">\(F_i\)</span> 表示到了第<span class="math inline">\(i\)</span> 个子集的方案数。<br />对于 <span class="math inline">\(F_i\)</span>的转移，尝试用总共可以取到的方案数减去不满足上述性质的方案数，最后得到答案。</p><p>先来看总共可以取到的方案数：<br />我们可以把每一个音阶看成是二进制上的一个位置，用 <spanclass="math inline">\(0\)</span> 或 <spanclass="math inline">\(1\)</span> 表述它出现的次数。<br />这样的话我们可以发现，上文出现次数为偶数的限制可以转换成集合内每个片段所代表的的二进制异或和为<span class="math inline">\(0\)</span> 。<br />考虑到现在的第 <span class="math inline">\(i\)</span>位，它完全取决于之前 <span class="math inline">\(i-1\)</span>位所填的方法，对于每一种 <span class="math inline">\(i-1\)</span>的排列都有不同的异或和。<br />所以现在得出总的方案数是 <spanclass="math inline">\(A_{2^n-1}^{i-1}\)</span> 就不那么困难了。</p><p>接下来考虑怎么去掉方案中的空集 —— 空集显然是不合法的。<br />对于一个片段 <span class="math inline">\(i\)</span>，如果它是空集，那么前 <span class="math inline">\(i-1\)</span>个片段一定可以构成一个完整的曲子。<br />所以这一部分的答案就是 <span class="math inline">\(F_{i-1}\)</span>。</p><p>再来看任意两个集合不一样的限制：<br />我们假设第 <span class="math inline">\(i\)</span> 个和第 <spanclass="math inline">\(j\)</span> 个集合时一模一样的，那么我们把 <spanclass="math inline">\(i\)</span> 和 <spanclass="math inline">\(j\)</span>删掉一定可以构成一个合法的音乐，这个方案是 <spanclass="math inline">\(F_{i-2}\)</span> 。<br />其中对于所谓的 <span class="math inline">\(j\)</span> ，一共有 <spanclass="math inline">\(i-1\)</span> 种取值，所以一定有一项是 <spanclass="math inline">\(i-1\)</span> 。<br />最后，对于子集 <span class="math inline">\(i\)</span> ，一共有 <spanclass="math inline">\(2^n-1-(i-2)\)</span> 种取值，原因显然。<br />最后可以得到转移方程 ： <span class="math display">\[F_i=A_{2^n-1}^{i-1}-F_{i-1}-F_{i-2}\times(i-1)\times(2^n-i+1)\]</span></p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Enter putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> quad putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1e8</span> + <span class="hljs-number">7</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e6</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> n, m, F[N], two[N], mul, A[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  std::cin &gt;&gt; n &gt;&gt; m;<br>  two[<span class="hljs-number">0</span>] = A[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + m; i++) two[i] = two[i - <span class="hljs-number">1</span>] * <span class="hljs-number">2</span> % mod;<br>  <span class="hljs-type">int</span> maxn = two[n] - <span class="hljs-number">1</span> + mod;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) A[i] = A[i - <span class="hljs-number">1</span>] * (maxn - i + <span class="hljs-number">1</span> + mod) % mod; <br>  F[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">int</span> mul = <span class="hljs-number">1</span>, pmul = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= m; i++) &#123;<br>    mul = mul * i % mod;<br>    F[i] = A[i - <span class="hljs-number">1</span>] - F[i - <span class="hljs-number">1</span>] - F[i - <span class="hljs-number">2</span>] * (i - <span class="hljs-number">1</span>) % mod * (maxn - i + <span class="hljs-number">2</span> + mod) % mod;<br>    F[i] = (F[i] % mod + mod) % mod;<br>  &#125;<br>  <span class="hljs-comment">// std::cout &lt;&lt; F[m] &lt;&lt; std::endl;</span><br>  <span class="hljs-type">int</span> ans = F[m] * <span class="hljs-built_in">power</span>(mul, mod - <span class="hljs-number">2</span>) % mod;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, (ans % mod + mod) % mod);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">power</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ret = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span> (n) &#123;<br>    <span class="hljs-keyword">if</span> (n &amp; <span class="hljs-number">1</span>) ret = ret * a % mod;<br>    a = a * a % mod; n /= <span class="hljs-number">2</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ret;<br>&#125; <br></code></pre></td></tr></table></figure></details><h2 id="cf1437f-emotional-fishermen">CF1437F Emotional Fishermen</h2><p><ahref="https://www.luogu.com.cn/problem/CF1437F"><strong>题目链接</strong></a></p><p>发现自己组合计数的水平真的跟吃屎一样，还是做一点简单的题目吧……</p><p>发现最后的方案数和初始的 <span class="math inline">\(a_i\)</span>没有任何的关系，所以先按照 <span class="math inline">\(a_i\)</span>从小到大排序。</p><p>我们假设最后的合法排列是这样的： <span class="math display">\[P_1,P_2,P_3,\cdots ,P_{n-1},P_n\]</span> 那么一定满足 <span class="math inline">\(2P_j&lt; P_i\ (j\leqi)\)</span> ，同时 <span class="math inline">\(2a_j&lt; P_i\)</span>的数都可以放在 <span class="math inline">\(P_i\)</span> 的右边。<br />我们令 <span class="math inline">\(limit_i\)</span> 表示最大的 <spanclass="math inline">\(j\)</span> 满足 <spanclass="math inline">\(2a_j&lt; a_i\)</span> 。</p><p>考虑 <span class="math inline">\(\text{DP}\)</span>，想到一个很显然的状态： <span class="math inline">\(F_i\)</span>表示当前最大值是 <span class="math inline">\(a_i\)</span>时的方案数。<br />注意到此时一定选取了 <span class="math inline">\(limit_i+1\)</span>个数。<br />可以得到 ： <span class="math display">\[F_i=\sum_{j=1}^{limit_i}F_j\times A_{limit_i-limit_j-1}^{n-limit_j-2}\]</span>原因也很简单，考虑一共剩下多少个数以及有多少个位置可以填就可以了。<br />代码小学难度，不放了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AGC010F 题解</title>
    <link href="/2022/11/06/16653964/"/>
    <url>/2022/11/06/16653964/</url>
    
    <content type="html"><![CDATA[<p>现在也就会写一写代码长度不超过 <spanclass="math inline">\(1k\)</span> 的题目了。 /kk</p><p>看上去一脸不可做，看到 <strong>从必败状态逆推</strong>的提示后会了。</p><p>考虑什么算是必败状态，我们设此时棋子所在的位置为 <spanclass="math inline">\(now\)</span> 。<br />那么可以发现，当对于所有的 <span class="math inline">\(t\)</span> 存在<span class="math inline">\(now\rightarrow t\)</span> 这条边，都满足<span class="math inline">\(A_{now}\leq A_t\)</span> 时，在 <spanclass="math inline">\(t\)</span> 点一定是必败的。<br />原因显然，因为对于上述的情况，一但我把棋子从 <spanclass="math inline">\(now\)</span> 移走，对手就会把它移回到 <spanclass="math inline">\(now\)</span> 点，然后我就寄了。<br />我们考虑把眼光放低，着重去看一次移棋子的操作，容易发现当 <spanclass="math inline">\(A_{now}\leq A_t\)</span> 时我把棋子从 <spanclass="math inline">\(now\)</span> 移到 <spanclass="math inline">\(t\)</span> 是不能做的。<br />原因是一样的，因为对手仍然可以把我赶回 <spanclass="math inline">\(now\)</span> 。<br />所以可以看出你一条边是不可能从不同方向经过两次，也就是说在树中不能走回头路。</p><p>那我们直接令 <span class="math inline">\(i\)</span> 为根节点，跑<span class="math inline">\(n\)</span> 遍 <spanclass="math inline">\(\text{DFS}\)</span> ，复杂度 <spanclass="math inline">\(O(n^2)\)</span> 。<br />代码只有 800B ，小学生写不出来的话幼儿园都会写。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5005</span>;<br><br><span class="hljs-type">int</span> n, a[N], flag[N];<br>std::vector &lt;<span class="hljs-type">int</span>&gt; dis[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> father)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : dis[now]) &#123;<br>    <span class="hljs-keyword">if</span> (t == father) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfs</span>(t, now);<br>    <span class="hljs-keyword">if</span> (flag[t] == <span class="hljs-number">0</span> &amp;&amp; a[now] &gt; a[t]) <br>      flag[now] = <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  std::cin &gt;&gt; n;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) std::cin &gt;&gt; a[i];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt; n; i++) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;x, &amp;y);<br>    dis[x].<span class="hljs-built_in">emplace_back</span>(y);<br>    dis[y].<span class="hljs-built_in">emplace_back</span>(x);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    <span class="hljs-built_in">memset</span>(flag, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(flag));<br>    <span class="hljs-built_in">dfs</span>(i, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (flag[i] == <span class="hljs-number">1</span>)<br>      std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>  &#125;<br>  std::cout &lt;&lt; std::endl;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>luoguP7028 [NWRRC2017]Joker 题解</title>
    <link href="/2022/11/06/16749144/"/>
    <url>/2022/11/06/16749144/</url>
    
    <content type="html"><![CDATA[<p><ahref="https://www.luogu.com.cn/problem/P7028"><strong>题目链接</strong></a></p><p>一道牛逼的题目。</p><p>上来先来一波推式子： <span class="math display">\[\begin{split}S_n&amp;=\sum_{i=1}^n w_i\\&amp;=\sum_{i=1}^n\begin{cases}\dfrac{a_i}{P}&amp;a_i&gt;0\\\dfrac{a_i}{|N|}&amp;a_i&lt;0\end{cases}\\&amp;=\frac{1}{P}\sum_{i=1}^na_i\[a_i&gt;0]+\frac{1}{|N|}\sum_{i=1}^na_i\ [a_i&lt;0]\end{split}\]</span> 然后我们令 <span class="math display">\[\begin{split}P_i&amp;=\sum_{j=1}^ia_j\ [a_j&gt;0]\\N_i&amp;=-\sum_{j=1}^ia_j\ [a_j&lt;0]\end{split}\]</span> 直接代入上式，可以得到： <span class="math display">\[\begin{split}S_i&amp;=\frac{P_i}{P_n}-\frac{N_i}{N_n}\\&amp;=\frac{1}{P_nN_n}\times(P_iN_n-N_iP_n)\end{split}\]</span> 因为 <span class="math inline">\(\frac{1}{P_nN_n}\)</span>是固定的，所以现在的问题是最大化 <spanclass="math inline">\(P_iN_n-N_iP_n\)</span> 。 发现 <spanclass="math inline">\(P_iN_n-N_iP_n\)</span>的形式非常符合向量的叉积运算，所以上面的这个可以看成是 <spanclass="math inline">\((P_i,\ N_i)\times(P_n,\ N_n)\)</span> 。</p><p>认真思考后发现，对于 <span class="math inline">\(S_i\)</span>大小可能有贡献的点一定是在一个右下凸壳上，证明略。<br />那么现在的问题是：对于一个不断更新的点集，求这个点集的下凸壳。</p><p>本人太菜，不会 <span class="math inline">\(poly\)</span>的做法，所以退而求其次采用分块维护下凸壳。<br /></p><p>预处理的地方非常简单，就是对于每个块分别求出下凸壳。</p><p>对于修改的操作，我们发现所谓的区间修改也就是后缀的修改，散块直接重构，整块打标记。<br />同时还有一种不需要打标记的方法，发现向量叉积运算有分配律，所以可以直接维护一个类似前缀和的东西，这样可以不用打标记。<br />具体的方法是在查询的时候累计之前块最后一个点的答案。</p><p>查询操作对于每一个块找到最有可能成为答案的位置，然后所有的块进行比较。<br />对于一个块我们怎么找到一个最优秀的点，方法是这样的：<br />发现对于一个下凸壳，斜率是不断递增的，所以可以利用这样的性质直接二分即可。</p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><br><span class="hljs-keyword">using</span> std::pair;<br><span class="hljs-keyword">using</span> std::make_pair;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mp make_pair</span><br><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">1e9</span>;<br><span class="hljs-type">const</span> ll infll = <span class="hljs-number">0ll</span> + <span class="hljs-number">1e18</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e4</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> blen = <span class="hljs-number">250</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><br><span class="hljs-type">int</span> n, q, a[N], s1, s2;<br><span class="hljs-type">int</span> st[N], en[N], bel[N], bnum, sta[blen], tp;<br><span class="hljs-type">int</span> tu[blen][blen], top[blen];<br><span class="hljs-comment">//s1 -&gt; +  s2 -&gt; -</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>  <span class="hljs-type">int</span> x, y;<br>  <span class="hljs-built_in">Point</span> (<span class="hljs-type">int</span> _x = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _y = <span class="hljs-number">0</span>) &#123;x = _x; y = _y;&#125;<br>  <span class="hljs-keyword">friend</span> Point <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Point &amp;p, <span class="hljs-type">const</span> Point &amp;q) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(p.x + q.x, p.y + q.y);<br>  &#125;<br>  <span class="hljs-keyword">friend</span> Point <span class="hljs-keyword">operator</span>-(<span class="hljs-type">const</span> Point &amp;p, <span class="hljs-type">const</span> Point &amp;q) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Point</span>(p.x - q.x, p.y - q.y);<br>  &#125;<br>  <span class="hljs-keyword">friend</span> <span class="hljs-type">int</span> <span class="hljs-keyword">operator</span>*(<span class="hljs-type">const</span> Point &amp;p, <span class="hljs-type">const</span> Point &amp;q) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1ll</span> * p.x * q.y - <span class="hljs-number">1ll</span> * p.y * q.x;<br>  &#125;<br>&#125; p[N], A;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">cross</span><span class="hljs-params">(Point a, Point b, Point c)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> (a - b) * (c - b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Build</span><span class="hljs-params">()</span> </span>&#123;<br>  Point now = <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= bnum; i ++) &#123;<br>    tp = <span class="hljs-number">0</span>;<br>    now = <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = st[i]; j &lt;= en[i]; j ++) &#123;<br>      <span class="hljs-keyword">if</span> (a[j] &gt; <span class="hljs-number">0</span>) now = now + <span class="hljs-built_in">Point</span>(a[j], <span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">else</span> now = now + <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, -a[j]);<br>      p[j] = now;<br>      <span class="hljs-keyword">while</span> (tp &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">cross</span>(p[j], p[sta[tp - <span class="hljs-number">1</span>]], p[sta[tp]]) &gt;= <span class="hljs-number">0</span>) tp --;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>      &#125;<br>      sta[++tp] = j;<br>    &#125;<br>    top[i] = tp;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= tp; j ++)<br>      tu[i][j] = sta[j];<br>  &#125;<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">rebuild</span><span class="hljs-params">(<span class="hljs-type">int</span> bl)</span> </span>&#123;<br>  tp = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = st[bl]; i &lt;= en[bl]; i ++) &#123;<br>    <span class="hljs-keyword">while</span> (tp &gt; <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">cross</span>(p[i], p[sta[tp - <span class="hljs-number">1</span>]], p[sta[tp]]) &gt;= <span class="hljs-number">0</span>) tp --;<br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    sta[++tp] = i;<br>  &#125;<br>  top[bl] = tp;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= tp; i ++)<br>    tu[bl][i] = sta[i];<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> pii <span class="hljs-title">getans</span><span class="hljs-params">(<span class="hljs-type">int</span> bl)</span> </span>&#123;<br>  <span class="hljs-type">int</span> left = <span class="hljs-number">1</span>, right = top[bl], ret = right;<br>  <span class="hljs-type">int</span> *tt = tu[bl];<br>  <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>    <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> ((p[tt[mid]] - p[tt[mid + <span class="hljs-number">1</span>]]) * A &gt;= <span class="hljs-number">0</span>) &#123;<br>      right = mid - <span class="hljs-number">1</span>;<br>      ret = std::<span class="hljs-built_in">min</span>(ret, mid);<br>    &#125; <span class="hljs-keyword">else</span> left = mid + <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">mp</span>(tt[ret], p[tt[ret]] * A);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">int</span> ans = -inf, ansid = inf, ss = <span class="hljs-number">0</span>;<br>  A = <span class="hljs-built_in">Point</span>(s1, s2);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= bnum; i ++) &#123;<br>    pii chose = <span class="hljs-built_in">getans</span>(i);<br>    <span class="hljs-keyword">if</span> (ss + chose.second &gt; ans) &#123;<br>      ans = ss + chose.second;<br>      ansid = chose.first;<br>    &#125;<br>    ss = ss + p[en[i]] * A;<br>  &#125;<br>  <span class="hljs-keyword">return</span> ansid;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">modify</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>  Point now = <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = st[bel[id]]; i &lt;= en[bel[id]]; i ++) &#123;<br>    <span class="hljs-keyword">if</span> (a[i] &gt; <span class="hljs-number">0</span>) now = now + <span class="hljs-built_in">Point</span>(a[i], <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">else</span> now = now + <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, -a[i]);<br>    p[i] = now;<br>  &#125;<br>  <span class="hljs-built_in">rebuild</span>(bel[id]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-built_in">read</span>(n), <span class="hljs-built_in">read</span>(q);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <span class="hljs-built_in">read</span>(a[i]);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    s1 += (a[i] &gt; <span class="hljs-number">0</span>) ? a[i] : <span class="hljs-number">0</span>;<br>    s2 += (a[i] &lt; <span class="hljs-number">0</span>) ? -a[i] : <span class="hljs-number">0</span>;<br>  &#125;<br>  bnum = (n + blen - <span class="hljs-number">1</span>) / blen;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= bnum; i ++) &#123;<br>    st[i] = (i - <span class="hljs-number">1</span>) * blen + <span class="hljs-number">1</span>;<br>    en[i] = i * blen;<br>  &#125;<br>  en[bnum] = n;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= bnum; i ++)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = st[i]; j &lt;= en[i]; j ++) bel[j] = i;<br>  <span class="hljs-built_in">Build</span>(); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>());<br>  <span class="hljs-comment">// for (int i = 1; i &lt;= top[1]; i ++) printf(&quot;-&gt; %d&quot;, tu[1][i]);</span><br>  <span class="hljs-comment">// printf(&quot;\n&quot;);</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> test = <span class="hljs-number">1</span>, id, x; test &lt;= q; test ++) &#123;<br>    <span class="hljs-built_in">read</span>(id), <span class="hljs-built_in">read</span>(x);<br>    s1 -= (a[id] &gt; <span class="hljs-number">0</span>) ? a[id] : <span class="hljs-number">0</span>;<br>    s2 -= (a[id] &lt; <span class="hljs-number">0</span>) ? -a[id] : <span class="hljs-number">0</span>;<br>    s1 += (x &gt; <span class="hljs-number">0</span>) ? x : <span class="hljs-number">0</span>; s2 += (x &lt; <span class="hljs-number">0</span>) ? -x : <span class="hljs-number">0</span>;<br>    a[id] = x;<br>    <span class="hljs-built_in">modify</span>(id, x);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">query</span>());<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span> </span>&#123;<br>  T s = <span class="hljs-number">0</span>, t = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) &#123;t = (c == <span class="hljs-string">&#x27;-&#x27;</span>) ? <span class="hljs-number">-1</span> : t; c = <span class="hljs-built_in">getchar</span>();&#125;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) s = s * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>  a = s * t;<br>&#125;<br></code></pre></td></tr></table></figure></details>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>luoguP6965 [NEERC2016]Binary Code 题解</title>
    <link href="/2022/11/06/16749085/"/>
    <url>/2022/11/06/16749085/</url>
    
    <content type="html"><![CDATA[<p><ahref="https://www.luogu.com.cn/problem/P6936"><strong>题目链接</strong></a></p><p>这个题目的流程还是非常顺利的，难度在代码能力。</p><p>看到每个字符串最多只有一个不确定的地方，也就是说明每个字符串最多两种可能。<br />一个非常显然的想法就是 <span class="math inline">\(\text{2-SAT}\)</span> ，直接暴力枚举出所有不能同时存在的组合，这样是 <spanclass="math inline">\(O(n^2)\sim O(n^3)\)</span> 的。</p><p>考虑怎么优化这个 <span class="math inline">\(\text{2-SAT}\)</span>的连边过程。<br />对于每一个字符串，我们把不确定的地方分别放入 <spanclass="math inline">\(1\)</span> 或 <spanclass="math inline">\(0\)</span> 后塞到一个 <spanclass="math inline">\(\text{Trie}\)</span> 树里面。<br />特别的，对于没有不确定位置的字符串我们直接插入到 <spanclass="math inline">\(\text{Trie}\)</span> 具体实现可以看代码。</p><p>容易知道的是，对于一个标记点 <span class="math inline">\(p\)</span>，所有在它子树中的标记点都是不可行的状态，也就是说存在前缀的关系。<br />到这里可以想到直接去遍历它的子树，然后暴力建边，但是仍然不够优秀。<br />我们尝试着把 <span class="math inline">\(\text{Trie}\)</span> 树拉出<span class="math inline">\(\text{dfn}\)</span> 序，那么对于一个节点<span class="math inline">\(i\)</span> ，能够对它造成影响的是<code>dfn[i]~dfn[i+siz[i]-1]</code> 。</p><p>把所有的标记点按照 <span class="math inline">\(\text{dfn}\)</span>序排序，那么知道范围后就可以二分得出一段连边的区间 <spanclass="math inline">\([l,r]\)</span> 。<br />然后可以直接线段树优化建图，直接跑 <spanclass="math inline">\(\text{2-SAT}\)</span> 就可以了。</p><p>但是事实证明，已经做到上述的情况时，想把它卡掉还是比较困难的，直接写暴力连边可以过70+ 个点 。<br />因为不想写线段树优化建图，所以来点玄学的优化：记录每一个字符串出现的次数。<br />当其中的一个字符串出现次数大于 <span class="math inline">\(2\)</span>的时候，直接判断无解。</p><p>实测证明，开了 <span class="math inline">\(O_2\)</span>以后跑点得很快。</p><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a<span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a<span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><br><span class="hljs-keyword">using</span> std::pair;<br><span class="hljs-keyword">using</span> std::string;<br><span class="hljs-keyword">using</span> std::make_pair;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> pii pair<span class="hljs-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mp make_pair</span><br><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">1e9</span>;<br><span class="hljs-type">const</span> ll infll = <span class="hljs-number">0ll</span> + <span class="hljs-number">1e18</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">5e5</span> + <span class="hljs-number">5</span>;<br><br><span class="hljs-type">int</span> n, tot, dfn[<span class="hljs-number">2</span> * N], dfnnum, col[<span class="hljs-number">2</span> * N], sta[N * <span class="hljs-number">2</span>], top, low[N * <span class="hljs-number">2</span>], colnum;<br>string s[N], ss;<br>std::vector &lt;<span class="hljs-type">int</span>&gt; dis[N * <span class="hljs-number">2</span>];<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>  <span class="hljs-type">int</span> id, tag, dfn;<br>  <span class="hljs-built_in">Node</span> (<span class="hljs-type">int</span> _id = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _tag = <span class="hljs-number">0</span>, <span class="hljs-type">int</span> _dfn = <span class="hljs-number">0</span>) &#123;<br>    id = _id; tag = _tag; dfn = _dfn;<br>  &#125;<br>  <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Node &amp;p, <span class="hljs-type">const</span> Node &amp;q) &#123;<br>    <span class="hljs-keyword">return</span> p.dfn &lt; q.dfn;<br>  &#125;<br>&#125; node[N * <span class="hljs-number">2</span>];<br><br><span class="hljs-keyword">namespace</span> Trie &#123;<br><span class="hljs-type">int</span> son[N][<span class="hljs-number">2</span>], pnum = <span class="hljs-number">1</span>, siz[N], dfn[N], dfnnum;<br>std::vector &lt;pii&gt; mark[N];<br>std::map &lt;pii, <span class="hljs-type">int</span>&gt; point, p;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span>, string, <span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">changePtoDfn</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> tag)</span> </span>&#123;<span class="hljs-keyword">return</span> n * <span class="hljs-number">2</span> - tag;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve_addline</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Tarjan</span><span class="hljs-params">(<span class="hljs-type">int</span> now)</span> </span>&#123;<br>  dfn[now] = low[now] = ++dfnnum;<br>  sta[++top] = now;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> t : dis[now]) &#123;<br>    <span class="hljs-keyword">if</span> (dfn[t] == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-built_in">Tarjan</span>(t);<br>      low[now] = std::<span class="hljs-built_in">min</span>(low[now], low[t]);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (col[t] == <span class="hljs-number">0</span>) &#123;<br>      low[now] = std::<span class="hljs-built_in">min</span>(low[now], dfn[t]);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (low[now] == dfn[now]) &#123;<br>    col[now] = ++colnum;<br>    <span class="hljs-keyword">while</span> (sta[top] != now) &#123;<br>      col[sta[top]] = colnum;<br>      top --;<br>    &#125;<br>    top --;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-comment">// File(&quot;1&quot;);</span><br>  std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>  std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>), std::cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>  std::cin &gt;&gt; n;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, pos, len; i &lt;= n; i++) &#123;<br>    std::cin &gt;&gt; s[i];<br>    ss = s[i]; pos = <span class="hljs-number">-1</span>; len = ss.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len; j ++)<br>      <span class="hljs-keyword">if</span> (ss[j] == <span class="hljs-string">&#x27;?&#x27;</span>) &#123;pos = j; <span class="hljs-keyword">break</span>;&#125;<br>    <span class="hljs-keyword">if</span> (pos == <span class="hljs-number">-1</span>) &#123;<br>      Trie::<span class="hljs-built_in">insert</span>(i, ss, <span class="hljs-number">0</span>);<br>      Trie::<span class="hljs-built_in">insert</span>(i, ss, <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ss[pos] = <span class="hljs-string">&#x27;0&#x27;</span>; <br>      Trie::<span class="hljs-built_in">insert</span>(i, ss, <span class="hljs-number">0</span>);<br>      ss[pos] = <span class="hljs-string">&#x27;1&#x27;</span>; <br>      Trie::<span class="hljs-built_in">insert</span>(i, ss, <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br>  Trie::<span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  Trie::<span class="hljs-built_in">changePtoDfn</span>();<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    node[++tot] = <span class="hljs-built_in">Node</span>(i, <span class="hljs-number">0</span>, Trie::point[<span class="hljs-built_in">mp</span>(i, <span class="hljs-number">0</span>)]);<br>    node[++tot] = <span class="hljs-built_in">Node</span>(i, <span class="hljs-number">1</span>, Trie::point[<span class="hljs-built_in">mp</span>(i, <span class="hljs-number">1</span>)]);<br>  &#125;<br>  std::<span class="hljs-built_in">sort</span>(node + <span class="hljs-number">1</span>, node + <span class="hljs-number">1</span> + tot);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>    <span class="hljs-built_in">solve_addline</span>(i, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">solve_addline</span>(i, <span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n * <span class="hljs-number">2</span>; i ++)<br>    <span class="hljs-keyword">if</span> (dfn[i] == <span class="hljs-number">0</span>) <span class="hljs-built_in">Tarjan</span>(i);<br>  <span class="hljs-comment">// for (int i = 1; i &lt;= n; i++)</span><br>  <span class="hljs-comment">//   std::cout &lt;&lt; col[get(i, 0)] &lt;&lt; &quot; &quot; &lt;&lt; col[get(i, 1)] &lt;&lt; std::endl;</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <br>    <span class="hljs-keyword">if</span> (col[<span class="hljs-built_in">get</span>(i, <span class="hljs-number">0</span>)] == col[<span class="hljs-built_in">get</span>(i, <span class="hljs-number">1</span>)]) &#123;<br>      std::cout &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; std::endl;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>  std::cout &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; std::endl;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, len; i &lt;= n; i++) &#123;<br>    ss = s[i]; len = ss.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> num = col[<span class="hljs-built_in">get</span>(i, <span class="hljs-number">0</span>)] &lt; col[<span class="hljs-built_in">get</span>(i, <span class="hljs-number">1</span>)] ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; len; j ++)<br>      <span class="hljs-keyword">if</span> (ss[j] == <span class="hljs-string">&#x27;?&#x27;</span>) ss[j] = num + <span class="hljs-string">&#x27;0&#x27;</span>;<br>    std::cout &lt;&lt; ss &lt;&lt; std::endl;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">solve_addline</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> tag)</span> </span>&#123;<br>  <span class="hljs-type">int</span> dfn, size, rightnum, leftnum, l, r;<br>  <span class="hljs-type">int</span> L = inf, R = -inf;<br>  size = Trie::siz[Trie::p[<span class="hljs-built_in">mp</span>(id, tag)]];<br>  dfn = Trie::point[<span class="hljs-built_in">mp</span>(id, tag)];<br>  rightnum = dfn + size - <span class="hljs-number">1</span>;<br>  leftnum = dfn;<br>  l = <span class="hljs-number">1</span>, r = tot;<br>  <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>    <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (node[mid].dfn &gt;= leftnum) &#123;<br>      L = std::<span class="hljs-built_in">min</span>(L, mid);<br>      r = mid - <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>  &#125;<br>  l = <span class="hljs-number">1</span>, r = tot;<br>  <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>    <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (node[mid].dfn &lt;= rightnum) &#123;<br>      R = std::<span class="hljs-built_in">max</span>(R, mid);<br>      l = mid + <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-comment">// if (id % 10000 == 0) std::cerr &lt;&lt; id &lt;&lt; std::endl;</span><br>  <span class="hljs-comment">// std::cerr &lt;&lt; L &lt;&lt; &quot; &quot; &lt;&lt; R &lt;&lt; std::endl;</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = L, Id, Tag; i &lt;= R; i ++) &#123;<br>    Id = node[i].id; <br>    Tag = node[i].tag;<br>    <span class="hljs-keyword">if</span> (id == Id &amp;&amp; Tag == tag) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-comment">// std::cout &lt;&lt; id &lt;&lt; &quot; &quot; &lt;&lt; tag &lt;&lt; &quot; &quot; &lt;&lt; Id &lt;&lt; &quot; &quot; &lt;&lt; Tag &lt;&lt; std::endl;</span><br>    dis[<span class="hljs-built_in">get</span>(id, tag)].<span class="hljs-built_in">emplace_back</span>(<span class="hljs-built_in">get</span>(Id, <span class="hljs-number">1</span> - Tag));<br>  &#125;<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> Trie &#123;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> id, string s, <span class="hljs-type">int</span> tag)</span> </span>&#123;<br>  <span class="hljs-type">int</span> len = s.<span class="hljs-built_in">size</span>(), now = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    <span class="hljs-type">int</span> bit = s[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (son[now][bit] == <span class="hljs-number">0</span>) <br>      son[now][bit] = ++pnum;<br>    now = son[now][bit];<br>  &#125;<br>  mark[now].<span class="hljs-built_in">emplace_back</span>(<span class="hljs-built_in">mp</span>(id, tag));<br>  point[<span class="hljs-built_in">mp</span>(id, tag)] = now;<br>  p[<span class="hljs-built_in">mp</span>(id, tag)] = now;<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> father)</span> </span>&#123;<br>  dfn[now] = ++ dfnnum;<br>  siz[now] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">1</span>; i ++) &#123;<br>    <span class="hljs-keyword">if</span> (son[now][i] == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-built_in">dfs</span>(son[now][i], now);<br>    siz[now] += siz[son[now][i]];<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">changePtoDfn</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>    point[<span class="hljs-built_in">mp</span>(i, <span class="hljs-number">0</span>)] = dfn[point[<span class="hljs-built_in">mp</span>(i, <span class="hljs-number">0</span>)]];<br>    point[<span class="hljs-built_in">mp</span>(i, <span class="hljs-number">1</span>)] = dfn[point[<span class="hljs-built_in">mp</span>(i, <span class="hljs-number">1</span>)]];<br>  &#125;<br>  <span class="hljs-keyword">return</span> ;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></details>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基础组合数练习题</title>
    <link href="/2022/11/06/ji_chu_zu_he_lian_xi_ti/"/>
    <url>/2022/11/06/ji_chu_zu_he_lian_xi_ti/</url>
    
    <content type="html"><![CDATA[<p>题目很简单，求： <span class="math display">\[Ans=\frac{ \sum\limits_{ i=m }^n\binom{i-1} {m-1}\times i^k} {\binom{n}{m} }\]</span> 其中，给定 <span class="math inline">\(n\)</span> ，<spanclass="math inline">\(m\)</span> 和 <spanclass="math inline">\(k\)</span> 。<br />满足 <span class="math inline">\(m\leq n \leq 10^7 , k\leq 5000\)</span>，数据组数不超过 <span class="math inline">\(5000\)</span> 。</p><p>前置知识：<br /></p><ul><li><p><spanclass="math inline">\(i^k=\sum\limits_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\timesi^{\overline{j} }\)</span></p></li><li><p><ahref="https://www.cnblogs.com/black-swallow/p/16068322.html#5112039">组合数公式全家桶</a></p></li></ul><p>容易发现 <span class="math inline">\(\binom{n} {m}\)</span>是一个定值，所以只需要化简分子。</p><p><span class="math display">\[\begin{split}S&amp;=\sum\limits_{i=m}^n\binom{i-1} {m-1}\times i^k\\&amp;=\sum\limits_{i=m}^n\binom{i-1} {m-1}\times\sum\limits_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\timesi^{\overline{j} }\\&amp;=\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\sum_{i=m}^n\binom{i-1}{m-1}\times i^{\overline{j} }\\&amp;=\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\sum_{i=m}^n\frac{(i-1)!} {(m-1)!(i-m)!}\times\frac{(i + j - 1)!} {(i-1)!}\\&amp;=\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\sum_{i=m}^n\frac{(i + j - 1)!} {(m-1)!(i-m)!}\\\end{split}\]</span> 我们设 <span class="math inline">\(t= i - m\)</span> ，并用<span class="math inline">\(t\)</span> 代替式子中的 <spanclass="math inline">\(i\)</span> 。 <span class="math display">\[\begin{split}S &amp;=\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\sum_{i=m}^n\frac{(i + j - 1)!} {(m-1)!(i-m)!}\\&amp;=\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\sum_{i=0}^{n- m}\frac{(t + m + j - 1)!} {(m-1)!\times t!}\\&amp;=\frac{1}{(m-1)!}\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\sum_{i=0}^{n- m}\frac{(t + m + j - 1)!} {t!}\\&amp;=\frac{1}{(m-1)!}\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}\sum_{i=0}^{n- m}\frac{(t + m + j - 1)!} {t!\times (m+j-1)!}\times(m+j-1)!\\&amp;= \frac{1}{(m-1)!}\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}(m+j-1)!\sum_{i=0}^{n- m}\frac{(t + m + j - 1)!} {t!\times (m+j-1)!}\\&amp;=\frac{1}{(m-1)!}\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}(m+j-1)!\sum_{i=0}^{n- m}\binom{t+m+j-1} {m+j-1}\\&amp;=\frac{1}{(m-1)!}\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}(m+j-1)!\binom{m+j-1+n-m+1}{n-m}\\&amp;=\frac{1}{(m-1)!}\sum_{j=0}^k\begin{Bmatrix}k\\j\end{Bmatrix}(-1)^{k-j}(m+j-1)!\binom{n+ j} {n-m}\\\end{split}\]</span></p><p>发现只有一个和 <span class="math inline">\(i\)</span>有关的组合数，其他的可以直接预处理。<br />每次操作的复杂度是 <span class="math inline">\(O(k)\)</span> ，<spanclass="math inline">\(T\)</span> 组数据的话就是 <spanclass="math inline">\(O(Tk)\)</span> 。</p><p>代码小学难度。</p>]]></content>
    
    
    
    <tags>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>各种模板的集合</title>
    <link href="/2022/11/06/mu_ban/"/>
    <url>/2022/11/06/mu_ban/</url>
    
    <content type="html"><![CDATA[<h2 id="fastmod">Fastmod</h2><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ull;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__uint128_t</span> L;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">FastMod</span> &#123;<br>  ull b, m;<br>  <span class="hljs-built_in">FastMod</span>() &#123;&#125;<br>  <span class="hljs-built_in">FastMod</span>(ull b) : <span class="hljs-built_in">b</span>(b), <span class="hljs-built_in">m</span>(<span class="hljs-built_in">ull</span>((<span class="hljs-built_in">L</span>(<span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">64</span>) / b)) &#123;&#125;<br>  <span class="hljs-function">ull <span class="hljs-title">getmod</span><span class="hljs-params">(ull a)</span> </span>&#123;<br>    ull q = (ull)((<span class="hljs-built_in">L</span>(m) * a) &gt;&gt; <span class="hljs-number">64</span>);<br>    ull r = a - q * b;<br>    <span class="hljs-keyword">return</span> r &gt;= b ? r - b : r;<br>  &#125;<br>&#125; Mod;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> getmod Mod.getmod</span><br><br><span class="hljs-type">int</span> n;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  std::cin &gt;&gt; n;<br>  Mod = <span class="hljs-built_in">FastMod</span>(<span class="hljs-number">114514</span>);<br>  std::cout &lt;&lt; <span class="hljs-built_in">getmod</span>(n) &lt;&lt; std::endl;<br>&#125;<br></code></pre></td></tr></table></figure></details><h2 id="lct">LCT</h2><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">namespace</span> LCT &#123;<br><span class="hljs-type">int</span> f[N], c[N][<span class="hljs-number">2</span>], s[N], st[N];<br><span class="hljs-type">bool</span> r[N];<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">nroot</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushr</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">access</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">makeroot</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">findroot</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>; <span class="hljs-comment">// split(x, y) 表示取出 x,y 的路径</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">link</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">cut</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;<br>&#125;<br><span class="hljs-keyword">using</span> LCT::s;<br><br><span class="hljs-keyword">namespace</span> LCT &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> rc c[x][1]</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> lc c[x][0]</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">nroot</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-keyword">return</span> c[f[x]][<span class="hljs-number">0</span>] == x || c[f[x]][<span class="hljs-number">1</span>] == x; &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; s[x] = s[lc] + s[rc]+????; &#125; <span class="hljs-comment">// s 数组是记录结果。</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushr</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<span class="hljs-type">int</span> t = lc; lc = rc; rc = t; r[x] ^= <span class="hljs-number">1</span>;&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">pushdown</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (r[x]) &#123;<br>    <span class="hljs-keyword">if</span> (lc) <span class="hljs-built_in">pushr</span>(lc);<br>    <span class="hljs-keyword">if</span> (rc) <span class="hljs-built_in">pushr</span>(rc);<br>    r[x] = <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> y = f[x], z = f[y], k = c[y][<span class="hljs-number">1</span>] == x, w = c[x][!k];<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">nroot</span>(y)) c[z][c[z][<span class="hljs-number">1</span>] == y] = x; c[x][!k] = y; c[y][k] = w;<br>  <span class="hljs-keyword">if</span> (w)f[w] = y; f[y] = x; f[x] = z;<br>  <span class="hljs-built_in">pushup</span>(y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">splay</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-type">int</span> y = x, z = <span class="hljs-number">0</span>;<br>  st[++z] = y; <br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">nroot</span>(y)) st[++z] = y = f[y];<br>  <span class="hljs-keyword">while</span> (z) <span class="hljs-built_in">pushdown</span>(st[z--]);<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">nroot</span>(x)) &#123;<br>    y = f[x]; z = f[y];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">nroot</span>(y)) <span class="hljs-built_in">rotate</span>((c[y][<span class="hljs-number">0</span>] == x) ^ (c[z][<span class="hljs-number">0</span>] == y) ? x : y);<br>    <span class="hljs-built_in">rotate</span>(x);<br>  &#125;<br>  <span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">access</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = <span class="hljs-number">0</span>; x; x = f[y = x])<br>    <span class="hljs-built_in">splay</span>(x), rc = y, <span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">makeroot</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; <span class="hljs-built_in">access</span>(x); <span class="hljs-built_in">splay</span>(x); <span class="hljs-built_in">pushr</span>(x); &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">findroot</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  <span class="hljs-built_in">access</span>(x); <span class="hljs-built_in">splay</span>(x);<br>  <span class="hljs-keyword">while</span> (lc) <span class="hljs-built_in">pushdown</span>(x), x = lc;<br>  <span class="hljs-built_in">splay</span>(x);<br>  <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123; <span class="hljs-built_in">makeroot</span>(x); <span class="hljs-built_in">access</span>(y); <span class="hljs-built_in">splay</span>(y); &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">link</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-built_in">makeroot</span>(x);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">findroot</span>(y) != x)f[x] = y;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">cut</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>  <span class="hljs-built_in">makeroot</span>(x);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">findroot</span>(y) == x &amp;&amp; f[y] == x &amp;&amp; !c[y][<span class="hljs-number">0</span>]) &#123;<br>    f[y] = c[x][<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">pushup</span>(x);<br>  &#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></details><h2 id="fhq-treap">fhq treap</h2><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">namespace</span> Fhq_Treap &#123;<br><br><span class="hljs-type">int</span> ch[N][<span class="hljs-number">3</span>], siz[N], val[N], cnt, rnd[N];<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">newnode</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">Kth</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> k)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> &amp;x, <span class="hljs-type">int</span> &amp;y)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> A, <span class="hljs-type">int</span> B)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_rank</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_Kth</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_pre</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_nxt</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br>&#125;<br><br><br><span class="hljs-keyword">namespace</span> Fhq_Treap &#123;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123; siz[x] = <span class="hljs-number">1</span> + siz[ch[x][<span class="hljs-number">0</span>]] + siz[ch[x][<span class="hljs-number">1</span>]]; &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">newnode</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>  val[++cnt] = x; siz[cnt] = <span class="hljs-number">1</span>;<br>  rnd[cnt] = <span class="hljs-built_in">rand</span>();<br>  <span class="hljs-keyword">return</span> cnt;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">Kth</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">if</span> (k &lt;= siz[ch[now][<span class="hljs-number">0</span>]])now = ch[now][<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == siz[ch[now][<span class="hljs-number">0</span>]] + <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> now;<br>    <span class="hljs-keyword">else</span> k -= siz[ch[now][<span class="hljs-number">0</span>]] + <span class="hljs-number">1</span>, now = ch[now][<span class="hljs-number">1</span>];<br>  &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">split</span><span class="hljs-params">(<span class="hljs-type">int</span> now, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> &amp;x, <span class="hljs-type">int</span> &amp;y)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (now == <span class="hljs-number">0</span>) &#123;<br>    x = y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> ;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (val[now] &lt;= k) &#123;<br>    x = now; <span class="hljs-built_in">split</span>(ch[now][<span class="hljs-number">1</span>], k, ch[now][<span class="hljs-number">1</span>], y);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    y = now; <span class="hljs-built_in">split</span>(ch[now][<span class="hljs-number">0</span>], k, x, ch[now][<span class="hljs-number">0</span>]);<br>  &#125;<br>  <span class="hljs-built_in">update</span>(now);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">int</span> A, <span class="hljs-type">int</span> B)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (!A || !B)<span class="hljs-keyword">return</span> A + B;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rnd[A] &lt; rnd[B]) &#123;<br>    ch[A][<span class="hljs-number">1</span>] = <span class="hljs-built_in">merge</span>(ch[A][<span class="hljs-number">1</span>], B);<br>    <span class="hljs-built_in">update</span>(A); <span class="hljs-keyword">return</span> A;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    ch[B][<span class="hljs-number">0</span>] = <span class="hljs-built_in">merge</span>(A, ch[B][<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">update</span>(B); <span class="hljs-keyword">return</span> B;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>  <span class="hljs-built_in">split</span>(root, a, x, y);<br>  root = <span class="hljs-built_in">merge</span>(<span class="hljs-built_in">merge</span>(x, <span class="hljs-built_in">newnode</span>(a)), y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>  <span class="hljs-built_in">split</span>(root, a, x, z);<br>  <span class="hljs-built_in">split</span>(x, a - <span class="hljs-number">1</span>, x, y);<br>  y = <span class="hljs-built_in">merge</span>(ch[y][<span class="hljs-number">0</span>], ch[y][<span class="hljs-number">1</span>]);<br>  root = <span class="hljs-built_in">merge</span>(<span class="hljs-built_in">merge</span>(x, y), z);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_rank</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>  <span class="hljs-built_in">split</span>(root, a - <span class="hljs-number">1</span>, x, y);<br>  <span class="hljs-type">int</span> ret = siz[x] + <span class="hljs-number">1</span>;<br>  root = <span class="hljs-built_in">merge</span>(x, y);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_Kth</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123; <span class="hljs-keyword">return</span> val[<span class="hljs-built_in">Kth</span>(root, a)]; &#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_pre</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>  <span class="hljs-built_in">split</span>(root, a - <span class="hljs-number">1</span>, x, y);<br>  <span class="hljs-type">int</span> ret = val[<span class="hljs-built_in">Kth</span>(x, siz[x])];<br>  root = <span class="hljs-built_in">merge</span>(x, y);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">find_nxt</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>  <span class="hljs-built_in">split</span>(root, a, x, y);<br>  <span class="hljs-type">int</span> ret = val[<span class="hljs-built_in">Kth</span>(y, <span class="hljs-number">1</span>)];<br>  root = <span class="hljs-built_in">merge</span>(x, y);<br>  <span class="hljs-keyword">return</span> ret;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></details><h2 id="拉格朗日插值法">拉格朗日插值法</h2><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y, <span class="hljs-type">int</span> xi)</span> </span>&#123;<br>  <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>  s1[<span class="hljs-number">0</span>] = (xi - x[<span class="hljs-number">0</span>]) % mod, s2[n + <span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) <br>    s1[i] = <span class="hljs-number">1ll</span> * s1[i - <span class="hljs-number">1</span>] * (xi - x[i]) % mod;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">0</span>; i--) <br>    s2[i] = <span class="hljs-number">1ll</span> * s2[i + <span class="hljs-number">1</span>] * (xi - x[i]) % mod;<br>  ifac[<span class="hljs-number">0</span>] = ifac[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) <br>    ifac[i] = <span class="hljs-number">-1ll</span> * mod / i * ifac[mod % i] % mod;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) <br>    ifac[i] = <span class="hljs-number">1ll</span> * ifac[i] * ifac[i - <span class="hljs-number">1</span>] % mod;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>    (ans += <span class="hljs-number">1ll</span> * y[i] * (i == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : s1[i - <span class="hljs-number">1</span>]) % mod * s2[i + <span class="hljs-number">1</span>] % mod<br>            * ifac[i] % mod * (((n - i) &amp; <span class="hljs-number">1</span>) ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span>) * ifac[n - i] % mod) %= mod;<br>  &#125;<br>  <span class="hljs-keyword">return</span> (ans + mod) % mod;<br>&#125;<br><br></code></pre></td></tr></table></figure></details><h2 id="mt19937-随机数">mt19937 随机数</h2><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">std::mt19937 <span class="hljs-title">seed</span><span class="hljs-params">(<span class="hljs-number">114514</span>)</span></span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function">T <span class="hljs-title">rand</span><span class="hljs-params">(T l, T r)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">uniform_int_distribution</span>&lt;<span class="hljs-type">int</span>&gt;(l, r)(seed);<br>&#125;<br></code></pre></td></tr></table></figure></details><h2 id="本人常用缺省源">本人常用缺省源</h2><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cctype&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> File(a) freopen(a <span class="hljs-string">&quot;.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin), freopen(a <span class="hljs-string">&quot;.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout)</span><br><br><span class="hljs-comment">// using std::make_pair;</span><br><span class="hljs-comment">// using std::pair;</span><br><br><span class="hljs-keyword">using</span> ll = <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> inf = <span class="hljs-number">1e9</span>;<br><span class="hljs-type">const</span> ll infll = <span class="hljs-number">0ll</span> + <span class="hljs-number">1e18</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EL putchar(<span class="hljs-string">&#x27;\n&#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SP putchar(<span class="hljs-string">&#x27; &#x27;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> mp make_pair</span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span></span>;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>  <span class="hljs-comment">// File(&quot;1&quot;);</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">read</span><span class="hljs-params">(T &amp;a)</span> </span>&#123;<br>  T s = <span class="hljs-number">0</span>, t = <span class="hljs-number">1</span>;<br>  <span class="hljs-type">char</span> c = <span class="hljs-built_in">getchar</span>();<br>  <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>    t = (c == <span class="hljs-string">&#x27;-&#x27;</span>) ? <span class="hljs-number">-1</span> : t;<br>    c = <span class="hljs-built_in">getchar</span>();<br>  &#125;<br>  <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c))<br>    s = s * <span class="hljs-number">10</span> + c - <span class="hljs-number">48</span>, c = <span class="hljs-built_in">getchar</span>();<br>  a = s * t;<br>&#125;<br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt; <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T x)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;0&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;-&#x27;</span>), x = -x;<br>  <span class="hljs-type">int</span> top = <span class="hljs-number">0</span>, sta[<span class="hljs-number">50</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>  <span class="hljs-keyword">while</span> (x)<br>    sta[++top] = x % <span class="hljs-number">10</span>, x /= <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">while</span> (top)<br>    <span class="hljs-built_in">putchar</span>(sta[top] + <span class="hljs-string">&#x27;0&#x27;</span>), top--;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></details><h2 id="c-火车头优化">C++ 火车头优化</h2><details><summary>点击查看代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(3)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC target(<span class="hljs-string">&quot;avx&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;Ofast&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;inline&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fgcse&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fgcse-lm&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fipa-sra&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-ftree-pre&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-ftree-vrp&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fpeephole2&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-ffast-math&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fsched-spec&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;unroll-loops&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-falign-jumps&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-falign-loops&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-falign-labels&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fdevirtualize&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fcaller-saves&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fcrossjumping&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fthread-jumps&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-funroll-loops&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fwhole-program&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-freorder-blocks&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fschedule-insns&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;inline-functions&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-ftree-tail-merge&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fschedule-insns2&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fstrict-aliasing&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fstrict-overflow&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-falign-functions&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fcse-skip-blocks&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fcse-follow-jumps&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fsched-interblock&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fpartial-inlining&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;no-stack-protector&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-freorder-functions&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-findirect-inlining&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fhoist-adjacent-loads&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-frerun-cse-after-loop&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;inline-small-functions&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-finline-small-functions&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-ftree-switch-conversion&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-foptimize-sibling-calls&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fexpensive-optimizations&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-funsafe-loop-optimizations&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;inline-functions-called-once&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;-fdelete-null-pointer-checks&quot;</span>)</span><br><br>----------<br><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;Ofast&quot;</span>, <span class="hljs-string">&quot;inline&quot;</span>, <span class="hljs-string">&quot;-ffast-math&quot;</span>)</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC target(<span class="hljs-string">&quot;avx,sse2,sse3,sse4,mmx&quot;</span>)</span><br></code></pre></td></tr></table></figure></details><h2 id="最新-ccf-各类赛事-latex-模板">最新 CCF 各类赛事 <spanclass="math inline">\(LaTeX\)</span> 模板</h2><details><summary>点击查看代码</summary><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><code class="hljs tex"><span class="hljs-keyword">\documentclass</span>[UTF8,a4paper]&#123;ctexart&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;geometry&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;multicol&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;multirow&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;tabu&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;xeCJK&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;CJK&#125;     <br><span class="hljs-keyword">\usepackage</span>&#123;xeCJKfntef&#125;                     <br><span class="hljs-keyword">\usepackage</span>&#123;fancyhdr&#125;               <br><span class="hljs-keyword">\usepackage</span>&#123;graphicx&#125;                 <br><span class="hljs-keyword">\usepackage</span>&#123;lastpage&#125;    <br><span class="hljs-keyword">\usepackage</span>&#123;listings&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;xcolor&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;fontspec&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;layout&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;titletoc&#125;<br><span class="hljs-keyword">\usepackage</span>[colorlinks,linkcolor=blue]&#123;hyperref&#125; <br><span class="hljs-keyword">\newcommand</span><span class="hljs-keyword">\filename</span>[1]&#123;<span class="hljs-keyword">\emph</span>&#123;<span class="hljs-keyword">\textbf</span>&#123;<span class="hljs-params">#1</span>&#125;&#125;&#125;<br><span class="hljs-keyword">\newcommand</span><span class="hljs-keyword">\udot</span>[1]&#123;<span class="hljs-keyword">\textbf</span>&#123;<span class="hljs-keyword">\color</span>&#123;black&#125;<span class="hljs-keyword">\CJKunderdot</span>&#123;<span class="hljs-keyword">\color</span>&#123;black&#125;<span class="hljs-params">#1</span>&#125;&#125;&#125; <span class="hljs-comment">% 第一个 color 调整加粗字体下着重号的颜色</span><br><span class="hljs-keyword">\newcommand</span><span class="hljs-keyword">\newprob</span>[2]&#123;<br>    <span class="hljs-keyword">\newpage</span><br>    <span class="hljs-keyword">\pagestyle</span>&#123;fancy&#125;<br>    <span class="hljs-keyword">\lhead</span>&#123;ChineseContestName&#125; <span class="hljs-keyword">\rhead</span>&#123;<span class="hljs-params">#1</span>（<span class="hljs-params">#2</span>）&#125;<br>    <span class="hljs-keyword">\cfoot</span>&#123;第 <span class="hljs-keyword">\thepage</span> 页 <span class="hljs-keyword">\qquad</span> 共 <span class="hljs-keyword">\pageref</span>&#123;LastPage&#125; 页&#125;<br>    <span class="hljs-keyword">\phantomsection</span><br>    <span class="hljs-keyword">\addcontentsline</span>&#123;toc&#125;&#123;section&#125;&#123;<span class="hljs-params">#1</span>（<span class="hljs-params">#2</span>）&#125;<br>    <span class="hljs-keyword">\begin</span>&#123;center&#125;<br>        <span class="hljs-keyword">\LARGE</span><br>        <span class="hljs-keyword">\textbf</span>&#123;<span class="hljs-params">#1</span>&#125;（<span class="hljs-params">#2</span>）<br>    <span class="hljs-keyword">\end</span>&#123;center&#125;<br>    <span class="hljs-keyword">\large</span><br>    <span class="hljs-comment">%</span><br>    <span class="hljs-keyword">\textbf</span>&#123;【题目描述】&#125;<br>    <span class="hljs-keyword">\phantomsection</span><br>    <span class="hljs-keyword">\addcontentsline</span>&#123;toc&#125;&#123;subsection&#125;&#123;【题目描述】&#125;<br>&#125;<br><span class="hljs-keyword">\newcommand</span><span class="hljs-keyword">\para</span>[1]&#123;<br>    <span class="hljs-built_in">$</span> <span class="hljs-built_in">$</span> <span class="hljs-keyword">\\</span> <br>    <span class="hljs-keyword">\textbf</span>&#123;【<span class="hljs-params">#1</span>】&#125;<br>    <span class="hljs-keyword">\phantomsection</span><br>    <span class="hljs-keyword">\addcontentsline</span>&#123;toc&#125;&#123;subsection&#125;&#123;【<span class="hljs-params">#1</span>】&#125;<br>&#125;<br><span class="hljs-keyword">\newcommand</span><span class="hljs-keyword">\sample</span>[2]&#123;<br>    <span class="hljs-built_in">$</span> <span class="hljs-built_in">$</span> <span class="hljs-keyword">\\</span> <br>    <span class="hljs-keyword">\textbf</span>&#123;【样例&#125; <span class="hljs-params">#1</span><span class="hljs-keyword">\textbf</span>&#123;<span class="hljs-params">#2</span>】&#125;<br>    <span class="hljs-keyword">\phantomsection</span><br>    <span class="hljs-keyword">\addcontentsline</span>&#123;toc&#125;&#123;subsection&#125;&#123;【样例 <span class="hljs-params">#1</span> <span class="hljs-params">#2</span>】&#125;<br>&#125;<br><span class="hljs-keyword">\lstset</span>&#123;<br>    basicstyle=&#123;      <br>        <span class="hljs-keyword">\color</span>&#123;black&#125;<br>        <span class="hljs-keyword">\fontspec</span>&#123;Consolas&#125;<br>    &#125;,<br>    keywordstyle=&#123;<br>        <span class="hljs-keyword">\color</span>&#123;blue&#125;<br>        <span class="hljs-keyword">\fontspec</span>&#123;Consolas&#125;<br>    &#125;,<br>    numberstyle=&#123;<br>        <span class="hljs-keyword">\color</span>&#123;black&#125;<br>        <span class="hljs-keyword">\textbf</span><br>    &#125;,<br>    rulecolor=<span class="hljs-keyword">\color</span>&#123;blue&#125;,<br>    numbers=left,                               <br>    frame=single,                            <br>    frameround=tttt,<br>    morekeywords=&#123;Sample, Input, Output&#125;,   <span class="hljs-comment">% 可以手动添加关键字</span><br>&#125;<br><span class="hljs-keyword">\setmonofont</span>&#123;Consolas&#125;<br><span class="hljs-keyword">\geometry</span>&#123;left=2.52cm,right=2.52cm,top=2.5cm,bottom=2.5cm&#125;<br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br>    <span class="hljs-keyword">\pagestyle</span>&#123;fancy&#125;<br>    <span class="hljs-keyword">\lhead</span>&#123;ChineseContestName&#125; <span class="hljs-keyword">\rhead</span>&#123;&#125;<br>    <span class="hljs-keyword">\cfoot</span>&#123;第 <span class="hljs-keyword">\thepage</span> 页 <span class="hljs-keyword">\qquad</span> 共 <span class="hljs-keyword">\pageref</span>&#123;LastPage&#125; <span class="hljs-keyword">\color</span>&#123;black&#125; 页&#125;<br>    <span class="hljs-keyword">\thispagestyle</span>&#123;empty&#125;<br>    <span class="hljs-keyword">\addcontentsline</span>&#123;toc&#125;&#123;section&#125;&#123;注意事项&#125;<br>    <span class="hljs-keyword">\begin</span>&#123;center&#125;<br>        <span class="hljs-keyword">\Huge</span><br>        <span class="hljs-keyword">\textbf</span>&#123;ChineseContestName&#125;<br>        <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\Huge</span> <br>        EnglishContestName<br>        <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\huge</span><br>        <span class="hljs-keyword">\textit</span>&#123;SecondTitle&#125;<br>        <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\Large</span><br>        <span class="hljs-keyword">\textbf</span>&#123;时间：&#125;2021<span class="hljs-keyword">\textbf</span>&#123;年&#125;1<span class="hljs-keyword">\textbf</span>&#123;月&#125;1<span class="hljs-keyword">\textbf</span>&#123;日&#125; 08:30 <span class="hljs-built_in">$</span><span class="hljs-keyword">\sim</span><span class="hljs-built_in">$</span> 1:00<br>        <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\end</span>&#123;center&#125;<br>    <span class="hljs-keyword">\large</span><br>    <span class="hljs-keyword">\begin</span>&#123;center&#125;<br>        <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|p&#123;3.1cm&#125;|p&#123;2.5cm&#125;|p&#123;2.5cm&#125;|p&#123;2.5cm&#125;|p&#123;2.5cm&#125;|&#125;<br>        <span class="hljs-keyword">\hline</span><br>        题目名称 <span class="hljs-built_in">&amp;</span> First <span class="hljs-built_in">&amp;</span> Second <span class="hljs-built_in">&amp;</span> Third <span class="hljs-built_in">&amp;</span> Forth <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        题目类型 <span class="hljs-built_in">&amp;</span> 传统型 <span class="hljs-built_in">&amp;</span> 传统型 <span class="hljs-built_in">&amp;</span> 传统型 <span class="hljs-built_in">&amp;</span> 传统型 <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        目录 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;first&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;second&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;third&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;fourth&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        可执行文件名 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;first&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;second&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;third&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;fourth&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        输入文件名 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;first.in&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;second.in&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;third.in&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;fourth.in&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        输出文件名 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;first.out&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;second.out&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;third.out&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;fourth.out&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        每个测试点时限 <span class="hljs-built_in">&amp;</span> 1.0 秒 <span class="hljs-built_in">&amp;</span> 1.0 秒 <span class="hljs-built_in">&amp;</span> 1.0 秒 <span class="hljs-built_in">&amp;</span> 1.0 秒 <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        内存限制 <span class="hljs-built_in">&amp;</span> 256 MB <span class="hljs-built_in">&amp;</span> 256 MB <span class="hljs-built_in">&amp;</span> 256 MB <span class="hljs-built_in">&amp;</span> 256 MB <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        测试点数目 <span class="hljs-built_in">&amp;</span> 5 <span class="hljs-built_in">&amp;</span> 5 <span class="hljs-built_in">&amp;</span> 5 <span class="hljs-built_in">&amp;</span> 5 <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        测试点是否等分 <span class="hljs-built_in">&amp;</span> 是 <span class="hljs-built_in">&amp;</span> 是 <span class="hljs-built_in">&amp;</span> 是 <span class="hljs-built_in">&amp;</span> 是 <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>    <span class="hljs-keyword">\end</span>&#123;center&#125;<br>提交源程序文件名<br>    <span class="hljs-keyword">\begin</span>&#123;center&#125;<br>        <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|p&#123;3.1cm&#125;|p&#123;2.5cm&#125;|p&#123;2.5cm&#125;|p&#123;2.5cm&#125;|p&#123;2.5cm&#125;|&#125;<br>        <span class="hljs-keyword">\hline</span><br>        对于 C++ <span class="hljs-keyword">\ </span> 语言 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;first.cpp&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;second.cpp&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;third.cpp&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;fourth.cpp&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        对于 C <span class="hljs-keyword">\qquad</span> 语言 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;first.c&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;second.c&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;third.c&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;fourth.c&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        对于 Pascal 语言 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;first.pas&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;second.pas&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;third.pas&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;fourth.pas&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>    <span class="hljs-keyword">\end</span>&#123;center&#125;<br>编译选项<br>    <span class="hljs-keyword">\begin</span>&#123;center&#125;<br>        <span class="hljs-keyword">\begin</span>&#123;tabular&#125;&#123;|p&#123;3.1cm&#125;|p&#123;11.2cm&#125;&lt;<span class="hljs-keyword">\centering</span>|&#125;<br>        <span class="hljs-keyword">\hline</span><br>        对于 C++ <span class="hljs-keyword">\ </span>语言 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;-lm&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        对于 C <span class="hljs-keyword">\qquad</span> 语言 <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\texttt</span>&#123;-lm&#125; <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        对于 Pascal 语言 <span class="hljs-built_in">&amp;</span>  <span class="hljs-keyword">\\</span><br>        <span class="hljs-keyword">\hline</span><br>        <span class="hljs-keyword">\end</span>&#123;tabular&#125;<br>    <span class="hljs-keyword">\end</span>&#123;center&#125;<br>    <span class="hljs-keyword">\textbf</span>&#123;注意事项与提醒（请选手务必仔细阅读）&#125; <br>    <span class="hljs-keyword">\\</span><br>    <span class="hljs-keyword">\indent</span><br>    1. 文件名（程序名和输入输出文件名）必须使用英文小写。<span class="hljs-keyword">\par</span><br>    2. C/C++ 中函数 main() 的返回值类型必须是 int，程序正常结束时的返回值必须是 0。<span class="hljs-keyword">\par</span><br>    3. 提交的程序代码文件的放置位置请参照具体要求。<span class="hljs-keyword">\par</span><br>    4. 因违反以上三点而出现的错误或问题，申诉时一律不予受理。<span class="hljs-keyword">\par</span><br>    5. 若无特殊说明，结果的比较方式为全文比较（过滤行末空格及文末回车）。<span class="hljs-keyword">\par</span><br>    6. 程序可使用的栈内存空间限制与题目的内存限制一致。<span class="hljs-keyword">\par</span><br>    7. 只提供 Windows 格式附加样例文件。<span class="hljs-keyword">\par</span><br>    8. 评测在 Windows 下进行，各语言的编译器版本以其为准。<br>    <span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-keyword">\newprob</span>&#123;First&#125;&#123;first&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Description. <span class="hljs-keyword">\par</span><br>求出<span class="hljs-keyword">\udot</span>&#123;至少&#125;有多少个数满足条件。<br><br><span class="hljs-keyword">\para</span>&#123;输入格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>从文件 <span class="hljs-keyword">\filename</span>&#123;first.in&#125; 中读入数据。 <span class="hljs-keyword">\par</span><br>包含一个正整数 <span class="hljs-built_in">$</span>n<span class="hljs-built_in">$</span>。<br><br><span class="hljs-keyword">\para</span>&#123;输出格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>输出到文件 <span class="hljs-keyword">\filename</span>&#123;first.out&#125; 中。 <span class="hljs-keyword">\par</span><br>Output. <br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输入&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Input.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输出&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Output.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;解释&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Note.<br><br><span class="hljs-keyword">\sample</span>&#123;2&#125;&#123;&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>见选手目录下的 <span class="hljs-keyword">\filename</span>&#123;first/first2.in&#125; 与 <span class="hljs-keyword">\filename</span>&#123;first/first2.ans&#125;。<br><br><span class="hljs-keyword">\para</span>&#123;数据范围&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br><span class="hljs-keyword">\begin</span>&#123;center&#125;<br>    <span class="hljs-keyword">\begin</span>&#123;tabu&#125;&#123;c|c|c|c&#125;<br>        <span class="hljs-keyword">\tabucline</span>[2pt]&#123;-&#125;<br>        测试点编号 <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>n <span class="hljs-keyword">\le</span><span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>m <span class="hljs-keyword">\le</span><span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> 特殊限制 <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\tabucline</span>[1.2pt]&#123;-&#125;<br>        <span class="hljs-built_in">$</span>1 <span class="hljs-keyword">\sim</span> 4<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>15<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>2000<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multirow</span>&#123;2&#125;&#123;*&#125;&#123;无&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\cline</span>&#123;1-3&#125;<br>        <span class="hljs-built_in">$</span>5 <span class="hljs-keyword">\sim</span> 8<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>2000<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>15<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span>  <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br>        <span class="hljs-built_in">$</span>9 <span class="hljs-keyword">\sim</span> 12<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;2&#125;&#123;c|&#125;&#123;<span class="hljs-built_in">$</span>100<span class="hljs-built_in">$</span>&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>c<span class="hljs-built_in">_</span>i = C<span class="hljs-built_in">_</span>j = 1<span class="hljs-built_in">$</span> <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\hline</span><br>        <span class="hljs-built_in">$</span>13 <span class="hljs-keyword">\sim</span> 16<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;2&#125;&#123;c|&#125;&#123;<span class="hljs-keyword">\multirow</span>&#123;3&#125;&#123;*&#125;&#123;<span class="hljs-built_in">$</span>2000<span class="hljs-built_in">$</span>&#125;&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>w<span class="hljs-built_in">_</span>i = W<span class="hljs-built_in">_</span>j = 1<span class="hljs-built_in">$</span> <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\cline</span>&#123;1-1&#125; <span class="hljs-keyword">\cline</span>&#123;4-4&#125;<br>        <span class="hljs-built_in">$</span>17 <span class="hljs-keyword">\sim</span> 20<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;2&#125;&#123;c|&#125;&#123;&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">$</span>v<span class="hljs-built_in">_</span>i = V<span class="hljs-built_in">_</span>j = 1<span class="hljs-built_in">$</span> <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\cline</span>&#123;1-1&#125; <span class="hljs-keyword">\cline</span>&#123;4-4&#125;<br>        <span class="hljs-built_in">$</span>21 <span class="hljs-keyword">\sim</span> 25<span class="hljs-built_in">$</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\multicolumn</span>&#123;2&#125;&#123;c|&#125;&#123;&#125; <span class="hljs-built_in">&amp;</span> 无 <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\tabucline</span>[2pt]&#123;-&#125;<br>    <span class="hljs-keyword">\end</span>&#123;tabu&#125;<br><span class="hljs-keyword">\end</span>&#123;center&#125;<br>    <span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-keyword">\newprob</span>&#123;Second&#125;&#123;second&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Description. <br><br><span class="hljs-keyword">\para</span>&#123;输入格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>从文件 <span class="hljs-keyword">\filename</span>&#123;second.in&#125; 中读入数据。 <span class="hljs-keyword">\par</span><br><br><span class="hljs-keyword">\para</span>&#123;输出格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>输出到文件 <span class="hljs-keyword">\filename</span>&#123;second.out&#125; 中。 <span class="hljs-keyword">\par</span><br>Output. <br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输入&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Input.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输出&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Output.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;解释&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Note.<br><br><span class="hljs-keyword">\sample</span>&#123;2&#125;&#123;&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>见选手目录下的 <span class="hljs-keyword">\filename</span>&#123;second/second2.in&#125; 与 <span class="hljs-keyword">\filename</span>&#123;second/second2.ans&#125;。<br><br><span class="hljs-keyword">\para</span>&#123;数据范围&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Constraint.<br>    <span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-keyword">\newprob</span>&#123;Third&#125;&#123;third&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Description. <br><br><span class="hljs-keyword">\para</span>&#123;输入格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>从文件 <span class="hljs-keyword">\filename</span>&#123;third.in&#125; 中读入数据。 <span class="hljs-keyword">\par</span><br><br><span class="hljs-keyword">\para</span>&#123;输出格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>输出到文件 <span class="hljs-keyword">\filename</span>&#123;third.out&#125; 中。 <span class="hljs-keyword">\par</span><br>Output. <br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输入&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Input.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输出&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Output.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;解释&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Note.<br><br><span class="hljs-keyword">\sample</span>&#123;2&#125;&#123;&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>见选手目录下的 <span class="hljs-keyword">\filename</span>&#123;third/third2.in&#125; 与 <span class="hljs-keyword">\filename</span>&#123;third/third2.ans&#125;。<br><br><span class="hljs-keyword">\para</span>&#123;数据范围&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Constraint.<br>    <span class="hljs-comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span><br><span class="hljs-keyword">\newprob</span>&#123;Fourth&#125;&#123;fourth&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Description. <br><br><span class="hljs-keyword">\para</span>&#123;输入格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>从文件 <span class="hljs-keyword">\filename</span>&#123;fourth.in&#125; 中读入数据。 <span class="hljs-keyword">\par</span><br><br><span class="hljs-keyword">\para</span>&#123;输出格式&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>输出到文件 <span class="hljs-keyword">\filename</span>&#123;fourth.out&#125; 中。 <span class="hljs-keyword">\par</span><br>Output. <br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输入&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Input.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;输出&#125;<br><span class="hljs-keyword">\begin</span>&#123;lstlisting&#125;<br> Sample Output.<br><span class="hljs-keyword">\end</span>&#123;lstlisting&#125;<br><br><span class="hljs-keyword">\sample</span>&#123;1&#125;&#123;解释&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Note.<br><br><span class="hljs-keyword">\sample</span>&#123;2&#125;&#123;&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>见选手目录下的 <span class="hljs-keyword">\filename</span>&#123;fourth/fourth2.in&#125; 与 <span class="hljs-keyword">\filename</span>&#123;fourth/fourth2.ans&#125;。<br><br><span class="hljs-keyword">\para</span>&#123;数据范围&#125; <span class="hljs-keyword">\\</span> <span class="hljs-keyword">\indent</span><br>Constraint.<br><span class="hljs-keyword">\end</span>&#123;document&#125;<br><br><br></code></pre></td></tr></table></figure></details>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
